cset: moving following pidspec: 546994
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.754381183 seconds)
loading group "shootout"... done (took 1.147159111 seconds)
loading group "string"... done (took 0.655289177 seconds)
loading group "linalg"... done (took 8.522885011 seconds)
loading group "parallel"... done (took 0.16284197 seconds)
loading group "find"... done (took 2.981088451 seconds)
loading group "tuple"... done (took 2.059734078 seconds)
loading group "union"... done (took 14.41399948 seconds)
loading group "dates"... done (took 1.397379334 seconds)
loading group "micro"... done (took 0.214782812 seconds)
loading group "simd"... done (took 4.699202389 seconds)
loading group "io"... done (took 1.373226818 seconds)
loading group "random"... done (took 9.507669378 seconds)
loading group "problem"... done (took 1.590846489 seconds)
loading group "array"... done (took 24.952068574 seconds)
loading group "misc"... done (took 1.814625583 seconds)
loading group "scalar"... done (took 42.134361393 seconds)
loading group "sort"... done (took 3.217364619 seconds)
loading group "sparse"... done (took 12.74779046 seconds)
loading group "collection"... done (took 18.370598722 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.43913826 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113200466 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.162109272 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.109228037 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.228707163 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124129959 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130435769 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087647757 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.209147003 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140069123 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.13453106 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.42124838 seconds)
done (took 5.719748102 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.305110805 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.239568354 seconds)
    (2/2) benchmarking "String"...
    done (took 0.161476254 seconds)
  done (took 1.545285606 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.090634994 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057282382 seconds)
    (3/3) benchmarking "different"...
    done (took 0.063908824 seconds)
  done (took 1.354787029 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06254966 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138416884 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.06414989 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064101289 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.063863632 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064981713 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063913064 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064188867 seconds)
  done (took 1.667964798 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071377289 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.064710464 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.062919218 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065847992 seconds)
  done (took 1.410089238 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065328554 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118011365 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.061798814 seconds)
    (4/4) benchmarking "different"...
    done (took 0.061591777 seconds)
  done (took 1.447713335 seconds)
done (took 8.958424599 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.157248686 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.774929593 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.851842195 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.145622612 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.310768193 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.342910192 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119783668 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.204405561 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.114988909 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074479197 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.149043012 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079221073 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.479855397 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.476029717 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070543778 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.187754652 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.624887913 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085267453 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.114235224 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.25338679 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.081112192 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.082243277 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.088184 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071385489 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.161080718 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.178077931 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.627825032 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098570352 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067334697 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.193226588 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069523966 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.073793585 seconds)
  done (took 10.590590674 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.114149025 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110770813 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.0666677 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.101341155 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09291503 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067397113 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072511113 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066194414 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085137307 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.130263156 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088638276 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.121704392 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065547242 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067647759 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.097367 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.162118849 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081365266 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079557533 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.065992197 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.07897026 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.092458087 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078027048 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077511745 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07604577 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.112119936 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.135294119 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.089056284 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.108165371 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.067022677 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078726131 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.094289031 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.107623118 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066642958 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065285266 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.108479364 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.085263761 seconds)
  done (took 4.433763 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.032055634 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.092740202 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.104797961 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099910917 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106317163 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.093895873 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.146543998 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.121052248 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097664649 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072295883 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.174599421 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.67282419 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.105130442 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070291074 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.146837506 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362198452 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.918302423 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071735258 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066689859 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.097967554 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069268215 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.139059849 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066260974 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175671268 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.642885368 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.073829185 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069074379 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097056491 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.187766362 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138920534 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092466185 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.06816847 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.578933438 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065347833 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062445554 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.084135071 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091948795 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064959915 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.06553153 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.076099377 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063660125 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.117208137 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078644109 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.544854887 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068435155 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.625430375 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.331226578 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072176053 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070513876 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101993751 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063940815 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066577172 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.61791696 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.149168099 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066158775 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.289676601 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069773607 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066856141 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067974093 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.098413943 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066019452 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.0674969 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071706472 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.083817126 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.013338727 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.15124835 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.085865938 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067351226 seconds)
    (68/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.426218208 seconds)
    (69/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075871898 seconds)
    (70/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068298714 seconds)
    (71/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069326262 seconds)
    (72/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.125582951 seconds)
    (73/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.137429474 seconds)
    (74/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066433543 seconds)
    (75/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064112802 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065973997 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109934132 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.095515041 seconds)
    (79/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.255007396 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087788621 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068376426 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.06607565 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064667033 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.555841599 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.986360329 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068657189 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.06626364 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.502818828 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.066645399 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065037953 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066228323 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.087213469 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065363267 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062641947 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.062997259 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100438863 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067910407 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.593640857 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.06778052 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.485536157 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069194536 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098424698 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121451589 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066323128 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.063741352 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.103045788 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066303285 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063528711 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072060326 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064323694 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.06372191 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063467877 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068876747 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064750349 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065273153 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067366843 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067019362 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066131981 seconds)
  done (took 23.302228835 seconds)
done (took 40.503198852 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.395685721 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.076371402 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.076370396 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.076109076 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.075842509 seconds)
  done (took 1.89255419 seconds)
done (took 3.19491362 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.254598357 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076477413 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06253859 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.203409804 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.08745979 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.177273294 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.2185467 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.169075771 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.088856813 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088586398 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.210581677 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.223668711 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.234847399 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089614252 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.161263762 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.235019554 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091332838 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064019449 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089024215 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.090551949 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.091635536 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064917472 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.091266519 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.090339714 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.162254148 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089130697 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.06291356 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.163707316 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.091614003 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.167311932 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.092237512 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.092359093 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.093078258 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.16332748 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.091674481 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.16380476 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064164401 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.091170074 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.092855336 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.097481235 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.093432182 seconds)
  done (took 6.363134257 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076657089 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079307745 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080750378 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059973329 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06912183 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079037215 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.059919077 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079837147 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100315721 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080206532 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080609564 seconds)
  done (took 2.138886415 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070532218 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079852106 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080988676 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059401198 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070439082 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079932827 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060686208 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079912809 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08286654 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080418676 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080472341 seconds)
  done (took 2.054567852 seconds)
done (took 11.779257382 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190262106 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.089314794 seconds)
  done (took 1.489994654 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.257718856 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.509592655 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.944110779 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.124386084 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.102918121 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.117961647 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.238280211 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.099372843 seconds)
  done (took 8.783117265 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.124868922 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065305419 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.064731612 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.066929732 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065369362 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.06524228 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067346037 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.064773675 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.065998578 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066057058 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.065785186 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066996232 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067369827 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065354463 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.065523122 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.066958017 seconds)
  done (took 2.46775926 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.099922385 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.066999984 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.09587325 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.059472225 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069985068 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060499982 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068163286 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.069834238 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.067301052 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.067572654 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.069127037 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.068074342 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.06914129 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069538264 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.069886522 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.070046782 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.070903101 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.067830648 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.070924422 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.072894507 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070296651 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071326423 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073368708 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070572443 seconds)
  done (took 3.055845517 seconds)
done (took 17.031802874 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176650011 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072844547 seconds)
  done (took 1.477510736 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093850348 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091328919 seconds)
  done (took 1.430023941 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071889741 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058199475 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.074017243 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067760511 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059232266 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058710907 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.07312576 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.058820144 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.058553725 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.058761062 seconds)
  done (took 1.885822009 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062906225 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.064905263 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.06273973 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.061217261 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.063578364 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060560755 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062387304 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.059834817 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.065217588 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.058755526 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.0622978 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.079934054 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.061938338 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08054456 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062342418 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.062472595 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064571014 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.062837917 seconds)
  done (took 2.402833259 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.06159537 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.05884588 seconds)
  done (took 1.371488492 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063914544 seconds)
    (2/7) benchmarking "second"...
    done (took 0.058839439 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06065482 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060742732 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.058910839 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058325692 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059024408 seconds)
  done (took 1.663059282 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42612263 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192476412 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.426675892 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067855212 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.080896357 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.266122279 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06366235 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.06745765 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067535314 seconds)
  done (took 2.943513098 seconds)
done (took 14.430597287 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083336785 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.179971645 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.110085404 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.416459323 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.077364743 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065851889 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.095424361 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.208744393 seconds)
done (took 2.517281628 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.301048477 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.206925651 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.254942064 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.14606274 seconds)
  done (took 2.863971906 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.423893553 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.167681918 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074743356 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064961876 seconds)
  done (took 1.991961819 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065466522 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069221829 seconds)
  done (took 1.418490014 seconds)
done (took 7.845660032 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.097921777 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.060828021 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064366035 seconds)
    (4/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.058915707 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059300871 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.061313125 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.060906941 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.06054493 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.059910559 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.06081123 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.058921572 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.060944971 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.060956628 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060790566 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060552553 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060453927 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060753275 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061108505 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061021389 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061235093 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062076306 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063151873 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062383329 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061166602 seconds)
  done (took 2.781576718 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079504061 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063048299 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.063627082 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063420756 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064222864 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064481613 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064166672 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063096685 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064960972 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063553464 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064683867 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064456443 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.0633162 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.064742448 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063074632 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.064600961 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064235242 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064693857 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063986398 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06521952 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064674959 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063972647 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065271194 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065088718 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.066010295 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065653782 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063981105 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064205776 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065065414 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065391934 seconds)
  done (took 3.219894716 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066799078 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057631921 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058136149 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067888316 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058505002 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.05818513 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059106104 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057542389 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.057858193 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.058537403 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058102342 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.057516675 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058360695 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057522006 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057474297 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058548739 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063446461 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077990579 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058125174 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.057956115 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062408687 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.057804855 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058270881 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.057927282 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058149544 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.057947237 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.057846422 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058401232 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058197741 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059063314 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.05833549 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062846833 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064347202 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058242067 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068791777 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064106013 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058768494 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065170622 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059418308 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059034731 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058558481 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058431716 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058849711 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058422656 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068893227 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058615253 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059467162 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061789684 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058680476 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058361288 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058490622 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060021818 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064496603 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059645972 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058283232 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059968201 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058898677 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059040808 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058313009 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058107451 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058060364 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062311133 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059863056 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.0590938 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.07981482 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060133709 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068919865 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058329795 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.058990869 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062638226 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.058895324 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077965438 seconds)
  done (took 5.640032284 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071853563 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068022175 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.07599135 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067298006 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061890475 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058776941 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061611469 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058882763 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069122943 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062544577 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059233844 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062273592 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06762314 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.061954552 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.05949778 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067549696 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062000352 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061154455 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.058936623 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062592868 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062054352 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062783577 seconds)
  done (took 2.69427806 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.143840649 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.0639825 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105132163 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.067566927 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065867445 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067215485 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063734589 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063802345 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063885649 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064362505 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064784797 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064189146 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066026215 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064698227 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06508395 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064385985 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064584384 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064804218 seconds)
  done (took 2.565027519 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077431965 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.06355339 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089387659 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063236499 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.063527439 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063429042 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067950454 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067363817 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063275377 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.063700222 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067191454 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063278853 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063323293 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063440895 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063921789 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.063800692 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064350521 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063579778 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067092118 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067468873 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067654061 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068218826 seconds)
  done (took 2.744813208 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078226369 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06244702 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.077985982 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063833748 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057726885 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.05793079 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064376968 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063135078 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064731314 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062725989 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063325863 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059026345 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065335521 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063114281 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065162162 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062949777 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063310261 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063328488 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062615715 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.057989589 seconds)
  done (took 2.560833474 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098268353 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06160028 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061081643 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064576723 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060526331 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060428562 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076639526 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060543718 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060431496 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084274972 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060743469 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060695056 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065280752 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063399294 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.060879702 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065234697 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065385416 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066449907 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061052841 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060784046 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085516849 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061744766 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066353709 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061819806 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061710497 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.06144922 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061609297 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064591989 seconds)
  done (took 3.156240351 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065523178 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061435374 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06159711 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061294967 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06128084 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061436059 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061374099 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064215729 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061384598 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06152632 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061527066 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061718368 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06156326 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061571777 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061520246 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061582816 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062237511 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061872407 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061567871 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061484872 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061207072 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06143769 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061603296 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061767164 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061917499 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06245397 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062216853 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062120038 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061737766 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062241422 seconds)
  done (took 3.148256708 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073291705 seconds)
    (2/2) benchmarking "in"...
    done (took 0.068722622 seconds)
  done (took 1.428254183 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061865039 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.074687824 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.056934802 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070925173 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066358742 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.061920235 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067496639 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068208131 seconds)
  done (took 1.815548574 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092893512 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.115790746 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059715721 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.059919613 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.090058694 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126209086 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.101194224 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072375469 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073777096 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062412087 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.059619748 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.100490145 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059059317 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073048129 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060400692 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.068932389 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067518916 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078179312 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073277101 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058333166 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073190923 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061583983 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059622634 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061159558 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060949112 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067540845 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076313094 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072893294 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068969221 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05791852 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079268892 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059031691 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.059889621 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068930529 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.092521567 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059423693 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097979188 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059596601 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.063830827 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058523556 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.07172579 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080257896 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073694005 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077553849 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060519963 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.060658209 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058335271 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060536205 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063261633 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068797601 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059226549 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067363775 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058268605 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060386583 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070030134 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059273223 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.063762806 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068632709 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073186636 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070009669 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071818325 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075531332 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068643176 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067996943 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.059921843 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079920457 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061384995 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073485072 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074860466 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060435408 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073062369 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058766186 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058221213 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059496347 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094310321 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061051124 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060364332 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059538791 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060607285 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062135832 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071486383 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066408244 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06855114 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063961308 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077354497 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070504696 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060596894 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068761752 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079805193 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064722266 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060960234 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.07844055 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064877241 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.0605216 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079911154 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072538769 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063726035 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062583686 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065349998 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076068313 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06278845 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060320208 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071050314 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06379649 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.09640115 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.067223892 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070491436 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061716652 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.073141752 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.069719089 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06387253 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060628203 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066682412 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062751436 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060577951 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071826707 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061955339 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078065049 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068961748 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.077202868 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.077495152 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07334883 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.079377914 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062868706 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.06397352 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.081587166 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.072058933 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.063321518 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080994732 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.06132007 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073060239 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061341032 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063388157 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071861933 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060804522 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063950091 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061907535 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.069338372 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063742551 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064218092 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068132488 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071190505 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075579195 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063515334 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071266032 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063721571 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079371516 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073300261 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067124223 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065912608 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062904245 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075086396 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069410724 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072522156 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061604799 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062683321 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061830021 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07306949 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072069055 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063600977 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.071836974 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066886812 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062448487 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061998573 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06309042 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065846859 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065657171 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063316796 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070637041 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071315256 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077071809 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070273764 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071180389 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060643818 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060953462 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063238129 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061242292 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066270263 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071442099 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077769571 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073971157 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.083950782 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.06236421 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073007204 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063506583 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079538401 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075524671 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062617723 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066788185 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060362612 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063475945 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071616587 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073958331 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076935985 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077941565 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06688676 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066936506 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061873356 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077959168 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062718393 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07087433 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071678398 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.068247745 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061738873 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063333877 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.071508775 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066447715 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062401669 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078321118 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.070126147 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061411574 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077134957 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062359731 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073126237 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.06129919 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065576455 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067215791 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063902102 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.0718189 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078135223 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061191236 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062258318 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078133283 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063532643 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063304357 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070560221 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07859153 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06691179 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070408332 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073307314 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072228041 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06648818 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071944081 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.06299557 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072132183 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065381678 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.075123658 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.063019261 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081164662 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.06074931 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.078149803 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062755548 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073679423 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062383487 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071714759 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062604749 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079983104 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063686912 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062767937 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.074449534 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060327763 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071493626 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.06152349 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067325756 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.069415185 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072645807 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.064025911 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071879762 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.063544662 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071303482 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.066615609 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070673384 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071984515 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066699233 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.06107123 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070413969 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073525474 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070989073 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063360798 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063933512 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.06285973 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072378396 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063581603 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063093654 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070591657 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066953932 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067941788 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063756865 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063823215 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063628678 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070808201 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072235809 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084014109 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071022319 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070062868 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072029027 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061174816 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078093188 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061737915 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.070061081 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060547358 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.070773399 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071954628 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062499253 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083239471 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063479665 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.075245698 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.080051489 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07222445 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06694891 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081667027 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065507331 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071093053 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070323261 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066783952 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069145045 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064023995 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070816971 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072440859 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073450342 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062848966 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.06956045 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07120494 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064294124 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.072829191 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063726187 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070644635 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.06352067 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060683933 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066707833 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073983335 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.0668292 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067083122 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062118895 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.06033455 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061887509 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070981911 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066682758 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071830179 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078619223 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060720458 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062741832 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061149024 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065556357 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080911169 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.548875752 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071213057 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066430026 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059750385 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061744236 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061835169 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060461031 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063237627 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059549576 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059980816 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072207166 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062489521 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066114373 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062386683 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062385391 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072627485 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066657215 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.06303484 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069168704 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061124055 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067167091 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060189195 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062447496 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066220683 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060495597 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066232808 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072364531 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078443993 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068189303 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070621157 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06205063 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070869778 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078685541 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068963438 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062186329 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071020043 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.06019012 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080329234 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070969897 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070137852 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07122003 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061668937 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078381405 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065799352 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071421434 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077598951 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063420377 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068663347 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060517619 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077299057 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065998495 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060169103 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069522451 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069253254 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067261741 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073610965 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061219718 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06927657 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065814579 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.064772395 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.062985416 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.062881661 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070127263 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077721722 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.061365339 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065798193 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069080542 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.069465681 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.065559356 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073257787 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069331224 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0615171 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061954563 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064607908 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061335121 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075195315 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062472838 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065640854 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065250566 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059706616 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067238598 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077260546 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069905656 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070235499 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.05957002 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059377696 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07860326 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064384833 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063173868 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068717893 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070940955 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073366213 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069897994 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077409817 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060613483 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066097436 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072562829 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06043426 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060533741 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064297494 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.061275899 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069766202 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07060213 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068347767 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062052265 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071505149 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075431581 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061746201 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065696953 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066203851 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061117549 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071225645 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.068786358 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.069430062 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061487113 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.05994213 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.06493657 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.231617799 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068749843 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068635687 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059480218 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06523428 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072325748 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066576949 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06104761 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057974616 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061152923 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068037748 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063511128 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057982256 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06372197 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062665194 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065461399 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068584388 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064832401 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058162342 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075808418 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.06700202 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067906444 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059934422 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06030311 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059408713 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058374117 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070727454 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058733206 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.06078582 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.064819073 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060928757 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.077470182 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069093196 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07611861 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060314672 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064371911 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058790228 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069408086 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064387168 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059548402 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.070412256 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.058662005 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075348233 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071577337 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065822581 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059086281 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065112578 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068911518 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076087561 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069813729 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069238932 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062698115 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069660353 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061104767 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071048492 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060092416 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058964806 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070328482 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069081589 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072938146 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059402306 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070545086 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062680933 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069044204 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06854233 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061492582 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061412075 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061557432 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069827042 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065452866 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069963337 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065050739 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077419112 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060592325 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071236556 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069289019 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071161786 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07543104 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073388904 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068494807 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060428739 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067733256 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068192083 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06087681 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065109061 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062927602 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082234348 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061608444 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06104656 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074385891 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067062875 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060061154 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068719629 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065411584 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070498199 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060993582 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070672269 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.064967059 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060692918 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065238736 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065706622 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058976327 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059673068 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060050994 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070267243 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.064607861 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.0603772 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080526429 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062614862 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.069569729 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071672414 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.067489776 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062963403 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.06006859 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.224223894 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072620521 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074688425 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062459393 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06777412 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.059971396 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068841809 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057738536 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067747731 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066907893 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067465564 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057807052 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058596719 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073849194 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074957675 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063625987 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074537271 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067860577 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.05951958 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080313475 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068393523 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060392507 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070312379 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060602274 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057931441 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057677271 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059702381 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070491227 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058797222 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061487455 seconds)
  done (took 42.485047217 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.103896227 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059749164 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060752211 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058146666 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065173674 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059517623 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058325163 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059448585 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059570512 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061043859 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058383617 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058299734 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063734782 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073976901 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066228988 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062622609 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058772956 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.05994155 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058514744 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060126002 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065288703 seconds)
  done (took 2.797640627 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064844505 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.061844708 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06144144 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062554919 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061476821 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058713682 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06205157 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058694861 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062341291 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.05884646 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062137348 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058525998 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059065647 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.058908493 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058944777 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060036308 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062478159 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061553212 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.05871712 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062146369 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06118493 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062817989 seconds)
  done (took 2.771718598 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062913881 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.058947754 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067476157 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057505094 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.0575144 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.060850486 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058039433 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063977957 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064642788 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063677735 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068286098 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059264954 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058095813 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064602235 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057973074 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.05913462 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102834424 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059551117 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059473017 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058408419 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061261764 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068121113 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058340559 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059465363 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063799184 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061876379 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058761613 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061409755 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059483763 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.0640222 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059918383 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059158677 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068456131 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067949636 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063997987 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063712588 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060341066 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059817444 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058789465 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059467867 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068163833 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060571653 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058902067 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060140739 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068258879 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058597923 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058371369 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068728371 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.05849971 seconds)
  done (took 4.493794774 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073019898 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108995769 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064065852 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.090307835 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070180922 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063262813 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064092664 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091437249 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059173337 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.059641855 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.070708281 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071689265 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06094237 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062265828 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.064281452 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06065072 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061741771 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060412786 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.06324754 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.060752227 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063549775 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065721709 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.070698626 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07147309 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062128031 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060692869 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060966944 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063206068 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071146536 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064325378 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.06267999 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063280964 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071295831 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066302457 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061239109 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061363616 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07185821 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061372448 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061170561 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059848158 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.06123073 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062745622 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066943963 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072922864 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061969298 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066953595 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06168531 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059747634 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071592434 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061326362 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065490599 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072790257 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062424414 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064476168 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062813446 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07192918 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061504113 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060683151 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062563859 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071498771 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060287441 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062430313 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072265035 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061298128 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064811727 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072657764 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066909489 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062714078 seconds)
  done (took 6.067443347 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070727261 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093575947 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072039047 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072199295 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068259983 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068210338 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06841421 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068883177 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068298275 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071452811 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068459419 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.133156994 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066214204 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070344017 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.068832697 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.068948296 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.068999095 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069211971 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069603123 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071228034 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07518845 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076377642 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069567227 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073641539 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073597326 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066621403 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069207559 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069426344 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074058413 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069228758 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073610994 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069173621 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069063656 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074080939 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073940633 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069518194 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06013324 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069052628 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069359033 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070392923 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066984345 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074597039 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070010662 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066483066 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069653189 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069640438 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074548521 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074185946 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071187743 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072585726 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069783811 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074560319 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069467027 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070289743 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075146429 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077569454 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074613411 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074729769 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069956559 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074514022 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074626938 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077466159 seconds)
  done (took 5.962586957 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075238158 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063533268 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.076619259 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.057895206 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058131688 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067699278 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058538969 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058182525 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063921868 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.063911732 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065283876 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067212059 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069033729 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065466007 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068105534 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069343037 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06733149 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069012734 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064563333 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067962002 seconds)
  done (took 2.792724296 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063035369 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.062755129 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.059412555 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074193882 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.058689995 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066197608 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059646121 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059129307 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058928671 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059285094 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063374823 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063297005 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058893716 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066608652 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062458588 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066375845 seconds)
  done (took 2.45667057 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06411241 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.065759201 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.093508 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.059678902 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06125555 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.05870931 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059482449 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058388751 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060697737 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072469039 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060620557 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062091121 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059795746 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058965439 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.058907955 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063255181 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061269263 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060388439 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059736099 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.095059184 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068585372 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060596657 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062081953 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060561252 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061748237 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068234994 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063070498 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062071499 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060100107 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062440865 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062596352 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070570138 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06163011 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063214191 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058931225 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059560885 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.059968642 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062095825 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062022862 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.059973845 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058930486 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061617649 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06073157 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060776629 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061344878 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062100044 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061310819 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070037191 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.059985475 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.061819611 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060549749 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061828563 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061233433 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071476988 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062638817 seconds)
  done (took 4.93606319 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079088405 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06362386 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057872798 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058212151 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063126322 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.063881108 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064206272 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064060017 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064191713 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058244586 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064164386 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063977447 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06443297 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063997822 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064199716 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063743724 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058327483 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.063941746 seconds)
  done (took 2.625115761 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068217968 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063599967 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064224444 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059703162 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.059777104 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063946396 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.05836349 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059825387 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059626874 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.059879612 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059989344 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.059632542 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059631766 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.059588946 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06330151 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059838793 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059659882 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058617652 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06062797 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058623643 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064539163 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058973965 seconds)
  done (took 2.80073378 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.118595323 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.081809537 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.15846063 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.07944079 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088537781 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070161654 seconds)
  done (took 2.062898159 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094915724 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095362487 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063357073 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064140526 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067623473 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066289516 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066141547 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066099296 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069072066 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07197538 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066294266 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069372059 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069097024 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070779375 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067688405 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067653936 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066361615 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066982951 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064703474 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074355857 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0668751 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070063031 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066874565 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066966627 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067032079 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071663784 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070064722 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072733267 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0669796 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070372646 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068691441 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067059939 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071081782 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073185999 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064491636 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070191098 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067269772 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074762278 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06918329 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072584905 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064517926 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069082716 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070782255 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070315623 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070732429 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067567086 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070703221 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068168209 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067653861 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079007075 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069591256 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072223435 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06952093 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071087207 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070597124 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078912994 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073582404 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07242377 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069235583 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073490194 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07319018 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069988494 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07253457 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073724154 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069380435 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072571589 seconds)
  done (took 6.114689704 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104301349 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064700365 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069243515 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071382051 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070747865 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066151758 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066243964 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066654148 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066472252 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064047165 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101463741 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066426285 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071029129 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071012653 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066424411 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067015242 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067270803 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071979324 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065047939 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07802407 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066957472 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071940245 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072234288 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071794369 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072848727 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06851077 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066875381 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06686763 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066936801 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06726704 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070834016 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067407586 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071860325 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.0647251 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071600763 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067301242 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067695433 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070098959 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066957875 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068567387 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072067829 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075373724 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067565705 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067385388 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074390823 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068160987 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067722338 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065181535 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067525372 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065056861 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07397157 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073839638 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073734117 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07327801 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067731229 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067693447 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067405251 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067459192 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06794639 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070023893 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07322756 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068221181 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079557834 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067988922 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067850028 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072958883 seconds)
  done (took 6.132173266 seconds)
done (took 127.508259452 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.260081328 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.22175385 seconds)
  done (took 1.9322697 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074959867 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.26566453 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075434197 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.071788133 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.131810889 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.131371647 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.107233798 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070057439 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072140485 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069868195 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.168268154 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.107689525 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070370105 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069934631 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.09412598 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070417303 seconds)
  done (took 3.132560663 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.121245214 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.208414727 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.079647936 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067968918 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151682617 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075322029 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.070912448 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074179766 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076404219 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069105017 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.116556595 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082488162 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.07310863 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074250763 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070717208 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.07373324 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074893914 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075512182 seconds)
  done (took 3.118962345 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103780511 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.117802028 seconds)
  done (took 1.707316946 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.182304483 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.115706145 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.153627449 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.619916246 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.140651099 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.146391451 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.155858885 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.153976645 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.129819547 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.145489547 seconds)
  done (took 3.425310174 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106330999 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.10253728 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.305552379 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100208734 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080267771 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074793948 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072384737 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.07758153 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072606348 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074103238 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120214934 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07379026 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070524441 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122684253 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.096646328 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104828706 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069111835 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076502799 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078087673 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068859833 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073507399 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077713968 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.17698298 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077258393 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099057196 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07316304 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074675822 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072220144 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072119935 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076467597 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076808638 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.098779617 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076410083 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082608113 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.075262988 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096000049 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070115144 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.097935144 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072532747 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070726517 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073263998 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077356502 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070532964 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079121161 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073187195 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075203227 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077940273 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069748657 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073682869 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.07290675 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071061617 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074253003 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073987679 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075257374 seconds)
  done (took 6.168409715 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.122595039 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109690064 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067530786 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11685755 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109496358 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068706503 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.123774824 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103969098 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.121924661 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067792279 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068459307 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067256522 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074180827 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078447994 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119409816 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113009119 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069905127 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068142477 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.111997728 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.11232361 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066967087 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.125357006 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115648259 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111458975 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066664108 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068003981 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066806942 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.0686792 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075688601 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075017945 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067126226 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077089837 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078683202 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074582308 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066902795 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066849088 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066565743 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.074941196 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076192947 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07607009 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.073364889 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066566797 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067063589 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068478526 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068188677 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066627004 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076127186 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075049339 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07715856 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068419089 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067521706 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066910089 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068343208 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074490666 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.073778693 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074819645 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077823552 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068051355 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067128054 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068427923 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077881428 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075929571 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076048477 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068378015 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076108988 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067396034 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077518887 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081060037 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067186745 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067817858 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067461886 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067479809 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067844502 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073747801 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.073677897 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068582662 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069522269 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067503343 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075719513 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074249425 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067341184 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076031867 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067402882 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067781457 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068292209 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068912976 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.077515979 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076331532 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069490211 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070180443 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06981819 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069079316 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068126055 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.078203126 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.222739359 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073804749 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074924801 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066768116 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075202253 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07288672 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066579363 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073080963 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067013414 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066649697 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066548821 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072388725 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.071890558 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074062471 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06615248 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065881587 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07382382 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075735463 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066237456 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072278382 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074875933 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.072904755 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.06683029 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075981154 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066595299 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074885736 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066315851 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074283349 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066947652 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072604438 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066594624 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065671295 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066039923 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075018467 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067453575 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066274501 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067191416 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066367376 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072552855 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076098629 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066802926 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073453876 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074089118 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067391126 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075742544 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067184852 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07575596 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067204109 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067213105 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066225556 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078735644 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067464926 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068245204 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069748578 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075950511 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067264139 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076358491 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073382205 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066879301 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076999138 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075906148 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.073652133 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.076498049 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067868301 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067902657 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06704496 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067348667 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07604971 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077496519 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068648151 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067479417 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073273576 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.07664467 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067327294 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.073715111 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073703404 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074155645 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067563002 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068024714 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077411792 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078292619 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.0745932 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077296835 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075396405 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067556214 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073913637 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077279049 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067841858 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080437772 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068032256 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079172348 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.080004937 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07661342 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079780488 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.231143435 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075967959 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074507082 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076255035 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066079789 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065901189 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.071977907 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066082377 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.065984626 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072584241 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066972745 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067452419 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078757137 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066559135 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074773725 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065982463 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.072863171 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065669111 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06699994 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077225769 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066318529 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066455691 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072864981 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066765364 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072675147 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075036654 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072449164 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066142761 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066524674 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075418618 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075138413 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066080145 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065910809 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066942421 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074373973 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073892263 seconds)
  done (took 18.404663678 seconds)
done (took 39.392057878 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170728058 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112390088 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.224362792 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203797309 seconds)
  done (took 2.289279328 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100781837 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.062967745 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.106934782 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.11654503 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063259698 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.103675174 seconds)
  done (took 2.077213766 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202489256 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178197926 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.253642076 seconds)
  done (took 2.156440372 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366922502 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.151680572 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.260383979 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.514682943 seconds)
  done (took 2.913339904 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.136586953 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132284635 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075544438 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.146415682 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082264098 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060786354 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.144449264 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067523234 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.096869788 seconds)
  done (took 2.528201696 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.14133344 seconds)
done (took 13.627170539 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.106693225 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.319214481 seconds)
    (3/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.158705141 seconds)
    (4/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.072161844 seconds)
    (5/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.203931048 seconds)
    (6/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.118749399 seconds)
    (7/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.278118329 seconds)
    (8/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.289875708 seconds)
    (9/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.109229764 seconds)
    (10/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072260814 seconds)
    (11/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.322627323 seconds)
    (12/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.078579029 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.126588434 seconds)
    (14/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.127651509 seconds)
    (15/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.179752444 seconds)
    (16/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065906816 seconds)
    (17/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.296435338 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07514447 seconds)
    (19/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.161669658 seconds)
    (20/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074419229 seconds)
    (21/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064428859 seconds)
    (22/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.181078752 seconds)
    (23/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.082557415 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.076348261 seconds)
    (25/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070877922 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076704684 seconds)
    (27/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.298524097 seconds)
    (28/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.162000551 seconds)
    (29/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.179936783 seconds)
    (30/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.09358683 seconds)
    (31/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.266266874 seconds)
    (32/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068914277 seconds)
    (33/341) benchmarking ("sort", Int8, false)...
    done (took 0.153670232 seconds)
    (34/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.237659556 seconds)
    (35/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.193086017 seconds)
    (36/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.06893952 seconds)
    (37/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071391908 seconds)
    (38/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.072959606 seconds)
    (39/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073377261 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072792323 seconds)
    (41/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.075363715 seconds)
    (42/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.129626876 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.084558917 seconds)
    (44/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.197756166 seconds)
    (45/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.232321473 seconds)
    (46/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069683921 seconds)
    (47/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.301350422 seconds)
    (48/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.274838724 seconds)
    (49/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.086497497 seconds)
    (50/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072447454 seconds)
    (51/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.07032343 seconds)
    (52/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.154711317 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.088370504 seconds)
    (54/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.150884639 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.152810447 seconds)
    (56/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.115014013 seconds)
    (57/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.243426794 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078555266 seconds)
    (59/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.225031176 seconds)
    (60/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.202334266 seconds)
    (61/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089839535 seconds)
    (62/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.170871318 seconds)
    (63/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.255075971 seconds)
    (64/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.193057946 seconds)
    (65/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.06797342 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.13091996 seconds)
    (67/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.239582058 seconds)
    (68/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.1872994 seconds)
    (69/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.115264216 seconds)
    (70/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267371975 seconds)
    (71/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.142962126 seconds)
    (72/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.14801463 seconds)
    (73/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.073950773 seconds)
    (74/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069296973 seconds)
    (75/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.090851943 seconds)
    (76/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.074406631 seconds)
    (77/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066137055 seconds)
    (78/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.264091998 seconds)
    (79/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.093816645 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072015164 seconds)
    (81/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.062503458 seconds)
    (82/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.104640226 seconds)
    (83/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.143948849 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.072296799 seconds)
    (85/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.127789909 seconds)
    (86/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066555261 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.150278708 seconds)
    (88/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.140948489 seconds)
    (89/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084347918 seconds)
    (90/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.070974596 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063941736 seconds)
    (92/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.145043456 seconds)
    (93/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.208067611 seconds)
    (94/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.117401678 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089293843 seconds)
    (96/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.207884509 seconds)
    (97/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.174882367 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064773657 seconds)
    (99/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.073965015 seconds)
    (100/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.146936813 seconds)
    (101/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.065516484 seconds)
    (102/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064931712 seconds)
    (103/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.148401067 seconds)
    (104/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.064814327 seconds)
    (105/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.064940211 seconds)
    (106/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081342487 seconds)
    (107/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.064445594 seconds)
    (108/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.064883071 seconds)
    (109/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.234304887 seconds)
    (110/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065929448 seconds)
    (111/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.19228887 seconds)
    (112/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.141649295 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132455903 seconds)
    (114/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.151990797 seconds)
    (115/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.087525122 seconds)
    (116/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.082930628 seconds)
    (117/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.15431865 seconds)
    (118/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.098810291 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.091743726 seconds)
    (120/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.072325068 seconds)
    (121/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066743528 seconds)
    (122/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.085553979 seconds)
    (123/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.145086146 seconds)
    (124/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.068893112 seconds)
    (125/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072967541 seconds)
    (126/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.161218055 seconds)
    (127/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.146984076 seconds)
    (128/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072853686 seconds)
    (129/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065931321 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.064741981 seconds)
    (131/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.141988496 seconds)
    (132/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.065207859 seconds)
    (133/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.2124006 seconds)
    (134/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.077320887 seconds)
    (135/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065882646 seconds)
    (136/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.071041565 seconds)
    (137/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.065701204 seconds)
    (138/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.072354829 seconds)
    (139/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065660669 seconds)
    (140/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075906474 seconds)
    (141/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070048727 seconds)
    (142/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065223446 seconds)
    (143/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.176744145 seconds)
    (144/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068149055 seconds)
    (145/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065707224 seconds)
    (146/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.077769753 seconds)
    (147/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074275536 seconds)
    (148/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.221335365 seconds)
    (149/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074612209 seconds)
    (150/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.087290299 seconds)
    (151/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070530482 seconds)
    (152/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.06727435 seconds)
    (153/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.06594919 seconds)
    (154/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.167234552 seconds)
    (155/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.268448634 seconds)
    (156/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.154575746 seconds)
    (157/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074158543 seconds)
    (158/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.218907063 seconds)
    (159/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.085363855 seconds)
    (160/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.074427367 seconds)
    (161/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.189264757 seconds)
    (162/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066491937 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.201248662 seconds)
    (164/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.066944823 seconds)
    (165/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.139555039 seconds)
    (166/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.209871516 seconds)
    (167/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.067014405 seconds)
    (168/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073372302 seconds)
    (169/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091462938 seconds)
    (170/341) benchmarking ("sort", Bool, false)...
    done (took 0.139392061 seconds)
    (171/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065598196 seconds)
    (172/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.064820236 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.09069988 seconds)
    (174/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.228496716 seconds)
    (175/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.169112148 seconds)
    (176/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.064736124 seconds)
    (177/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.063280154 seconds)
    (178/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071225528 seconds)
    (179/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073406072 seconds)
    (180/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.17369741 seconds)
    (181/341) benchmarking ("sort", Int64, false)...
    done (took 0.065392619 seconds)
    (182/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.062116382 seconds)
    (183/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.074733276 seconds)
    (184/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.187004768 seconds)
    (185/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.080118055 seconds)
    (186/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.170196274 seconds)
    (187/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.150207389 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063837809 seconds)
    (189/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082681122 seconds)
    (190/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.074916336 seconds)
    (191/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.091391258 seconds)
    (192/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.07270263 seconds)
    (193/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.202962127 seconds)
    (194/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073783342 seconds)
    (195/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064954444 seconds)
    (196/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.062380605 seconds)
    (197/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.210333185 seconds)
    (198/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.065334023 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093114373 seconds)
    (200/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.079098543 seconds)
    (201/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073041075 seconds)
    (202/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.064446282 seconds)
    (203/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.210155415 seconds)
    (204/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067688159 seconds)
    (205/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.06705009 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.190790762 seconds)
    (207/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.064576701 seconds)
    (208/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069764343 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.155970571 seconds)
    (210/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064931998 seconds)
    (211/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.065223673 seconds)
    (212/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064441532 seconds)
    (213/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072447893 seconds)
    (214/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.074924738 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.121217527 seconds)
    (216/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085442964 seconds)
    (217/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.06443954 seconds)
    (218/341) benchmarking ("sort", Float32, false)...
    done (took 0.137620056 seconds)
    (219/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067359242 seconds)
    (220/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.065784466 seconds)
    (221/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062981602 seconds)
    (222/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.071975299 seconds)
    (223/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.078578027 seconds)
    (224/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.072462661 seconds)
    (225/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086958902 seconds)
    (226/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.176860257 seconds)
    (227/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.066326925 seconds)
    (228/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.063777846 seconds)
    (229/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.065612316 seconds)
    (230/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072577913 seconds)
    (231/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.069818315 seconds)
    (232/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066369854 seconds)
    (233/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071695825 seconds)
    (234/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.07193449 seconds)
    (235/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064971534 seconds)
    (236/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065097841 seconds)
    (237/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072297694 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.088483894 seconds)
    (239/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067735628 seconds)
    (240/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.065865178 seconds)
    (241/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071083598 seconds)
    (242/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.06536582 seconds)
    (243/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065253743 seconds)
    (244/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.064660449 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085639086 seconds)
    (246/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066877275 seconds)
    (247/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.06492305 seconds)
    (248/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.110863383 seconds)
    (249/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.247965097 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.087055596 seconds)
    (251/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066554559 seconds)
    (252/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.074370204 seconds)
    (253/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075374411 seconds)
    (254/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.065538664 seconds)
    (255/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077073892 seconds)
    (256/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.138811854 seconds)
    (257/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.063849173 seconds)
    (258/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065872262 seconds)
    (259/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.065183191 seconds)
    (260/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.065050415 seconds)
    (261/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.254673436 seconds)
    (262/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073807997 seconds)
    (263/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.073060055 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151434639 seconds)
    (265/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.064082706 seconds)
    (266/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064606644 seconds)
    (267/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071893066 seconds)
    (268/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.068895418 seconds)
    (269/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.07089228 seconds)
    (270/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.197618921 seconds)
    (271/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064676578 seconds)
    (272/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097242978 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.186873992 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.064501029 seconds)
    (275/341) benchmarking ("sort", Float64, false)...
    done (took 0.1355846 seconds)
    (276/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062164213 seconds)
    (277/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.07809763 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.087983629 seconds)
    (279/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064753211 seconds)
    (280/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.065925727 seconds)
    (281/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.06395645 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.063527217 seconds)
    (283/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063630024 seconds)
    (284/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.062794656 seconds)
    (285/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093536821 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.119550826 seconds)
    (287/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.064412038 seconds)
    (288/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.186515305 seconds)
    (289/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063691145 seconds)
    (290/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.063835796 seconds)
    (291/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.065546539 seconds)
    (292/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.065296367 seconds)
    (293/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061845376 seconds)
    (294/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.064521663 seconds)
    (295/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.064113242 seconds)
    (296/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.062222496 seconds)
    (297/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.231822588 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084618037 seconds)
    (299/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.2089837 seconds)
    (300/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.064304248 seconds)
    (301/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.159150733 seconds)
    (302/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069390378 seconds)
    (303/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064327212 seconds)
    (304/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064164437 seconds)
    (305/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064493633 seconds)
    (306/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065221257 seconds)
    (307/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.068458549 seconds)
    (308/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.063971174 seconds)
    (309/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072236852 seconds)
    (310/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.064893071 seconds)
    (311/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.064376681 seconds)
    (312/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.064992856 seconds)
    (313/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.075992408 seconds)
    (314/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.066890986 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.113140708 seconds)
    (316/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065157267 seconds)
    (317/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.065011053 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.157396806 seconds)
    (319/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.071014936 seconds)
    (320/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066246682 seconds)
    (321/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.065393684 seconds)
    (322/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064733042 seconds)
    (323/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.064874316 seconds)
    (324/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092033422 seconds)
    (325/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066704979 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064367531 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.075833954 seconds)
    (328/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.066168159 seconds)
    (329/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.075819024 seconds)
    (330/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064954048 seconds)
    (331/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.192800728 seconds)
    (332/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.067877539 seconds)
    (333/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065442687 seconds)
    (334/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.063945603 seconds)
    (335/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.065253577 seconds)
    (336/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072188981 seconds)
    (337/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064780731 seconds)
    (338/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064791316 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064453451 seconds)
    (340/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.066930386 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.140944162 seconds)
  done (took 38.756378759 seconds)
done (took 40.301483713 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.126075565 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.076733627 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.074686139 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.071840456 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075877929 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075558611 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.075948136 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074627294 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.07803878 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074828068 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.107662919 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063054442 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070707071 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.079868314 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072121634 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078706932 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078265471 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078313481 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064261116 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079122789 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090495922 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076988143 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072737706 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078351587 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064519235 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073231049 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12175283 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.08387391 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.068891363 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073673727 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071739981 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080061045 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072635761 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071930045 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073721384 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069102517 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073714186 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070255161 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.12137094 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069151444 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064362938 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07613266 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070738613 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072133411 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072404964 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076277471 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070412434 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079462785 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063556013 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074996891 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.122106982 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069594072 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068867105 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072390576 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069205391 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073388695 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068935668 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075238429 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068952136 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076749861 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073888592 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072014266 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063770796 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072316366 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070839278 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071011184 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062536641 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069185136 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063667088 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063662585 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.062890888 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072385532 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070667406 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069513353 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064124698 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064024833 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06339186 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075806876 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071132412 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072926199 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064758346 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069376598 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069098366 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064633395 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.06966974 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075796357 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063875662 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064876164 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06400112 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079794764 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071024063 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.0641577 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.075948325 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070015343 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070031487 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064427743 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06384125 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070081011 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072624004 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064775814 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063472743 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070028623 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069673052 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074325947 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065134732 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069928881 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069950438 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.06336419 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073313647 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071710772 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073363657 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077305739 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074538396 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078868343 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065929376 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064150637 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075383416 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.224145463 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069546023 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.070820978 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068166388 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.070791437 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063417027 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062084103 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068464717 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.068466242 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063378778 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063393364 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.06332545 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072301095 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070936095 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062059381 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063747003 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071644395 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071585086 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062357353 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062326956 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071359346 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063448428 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068775849 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068099668 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071709233 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.06252782 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063376114 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062894661 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.063445255 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06251383 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068319211 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.06876468 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063662552 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071852928 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070459847 seconds)
done (took 12.745460594 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067771158 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106111769 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.117306009 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.112239482 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077153816 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065127225 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067593377 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083561243 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067347368 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089174277 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089059682 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085468982 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.130778118 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062886763 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064555154 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065511718 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062779476 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076266281 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.114960611 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088344207 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.106513168 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064167793 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080237007 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084416082 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077123752 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083530016 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065715937 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065899529 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067922999 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.08212824 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090414645 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064519132 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065919652 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083352158 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080334811 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.072957808 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065362364 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071105459 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065053348 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064210201 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066404828 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08345127 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071703034 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071693363 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065369097 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065180934 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064503074 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07192137 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078482403 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070513187 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078592131 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081198218 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066061868 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06437654 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062671538 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072930461 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065003744 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065700262 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065273686 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064559038 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065078082 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067413979 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069894795 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.074453508 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068534511 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.071725226 seconds)
  done (took 6.598781335 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083584445 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.091924829 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.077766512 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078095378 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063447428 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064449064 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064859113 seconds)
  done (took 2.18259944 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068044925 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.105581493 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.113076007 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.114288445 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.123807731 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.113907895 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065765168 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.0969218 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063805184 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.107863883 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.122116094 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.11658795 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067708029 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076735323 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065172105 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.117885838 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065833469 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072620061 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.113383865 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.118694344 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069305357 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095077496 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078762166 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066290678 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.117612463 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.108254885 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.068151813 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066497766 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067466375 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064873623 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064717583 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088094057 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.108140047 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07964013 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065467513 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064140075 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.106179484 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065954434 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.105575014 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072766001 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.106758435 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067423041 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067468981 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065464304 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066553069 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.111683262 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065994672 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064796437 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064318997 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.109717173 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064326009 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.108955199 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067652082 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.06967285 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072479189 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071096641 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072105204 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065268333 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.110804716 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075342313 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066846822 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.121313889 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.121470785 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.109342253 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.121698386 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074889148 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111742705 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.10831106 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065259521 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065059866 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065774524 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.122837804 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069218286 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068196752 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070554968 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073592775 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.115105289 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.126666325 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.125887933 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080020039 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068753675 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066189335 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.233795783 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.123092195 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070077007 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064447842 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065223926 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063925344 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.06927796 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066005974 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.068895616 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064033226 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074107479 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066729278 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.06611243 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.115367681 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064869285 seconds)
  done (took 10.020259739 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069372024 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066546822 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065112952 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065085509 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065262217 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06511089 seconds)
  done (took 2.070701082 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091836606 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065180871 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.076593633 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067927743 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087090827 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.110998014 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.109412237 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067543503 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081380659 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076348148 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.110470394 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.111745006 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.112408228 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.0668013 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.110370033 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067258704 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.112399366 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069036595 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076732619 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067780405 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079687163 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066893789 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067134399 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.11900028 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068312743 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066795328 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.074167479 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.076698685 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077286408 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067781698 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066932341 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068398519 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075094602 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067340925 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.112768539 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.074933476 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066364919 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070822574 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069059298 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068239846 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.114794938 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06845009 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070073055 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070320532 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067306862 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07478912 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070757403 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070043538 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.112926171 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07039439 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070243528 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066246639 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067835101 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070468686 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075076414 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067681901 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.0703478 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.113083122 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.06708964 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.074764966 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066026902 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068069271 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067161534 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067844535 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.070919881 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070600532 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.07519437 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067434891 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068293277 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066916406 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070949027 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066429555 seconds)
  done (took 7.251533178 seconds)
done (took 29.759825724 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.538847522 seconds)
  done (took 2.17172071 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.983344487 seconds)
  done (took 2.659636619 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.212179669 seconds)
  done (took 11.899947266 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.345714847 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.440310198 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.761231983 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.139402756 seconds)
  done (took 3.403610919 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.916990835 seconds)
  done (took 2.600802754 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239684226 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226116042 seconds)
  done (took 2.163572927 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.433150238 seconds)
  done (took 2.105639515 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.231374291 seconds)
  done (took 2.912514935 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.239000364 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162244547 seconds)
  done (took 2.089214447 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.634321856 seconds)
  done (took 2.315866337 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.754701952 seconds)
  done (took 6.437662196 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.331688439 seconds)
  done (took 2.072400974 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.240600238 seconds)
  done (took 1.925112672 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.612784031 seconds)
  done (took 4.292898614 seconds)
done (took 50.748419629 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086293037 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083477671 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083128818 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079106362 seconds)
  done (took 1.987742153 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075318428 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068349095 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070550135 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071184215 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068992695 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070204996 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071300728 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067440589 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.068831589 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068380896 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.067432406 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068254407 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070546572 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067547155 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070081751 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071380173 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067899493 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068154202 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070164319 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06786719 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070596799 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067884664 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066114282 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067544921 seconds)
  done (took 3.342777526 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079032926 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.06969404 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07264576 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068228025 seconds)
  done (took 1.977444408 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077286903 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074031372 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08222433 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087024358 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073938282 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.075484128 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.082034597 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081784857 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063404339 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084441006 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065765994 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064546482 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064561425 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083447031 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080749659 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.059882727 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061244031 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074865356 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.075007296 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077263159 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066368849 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063249106 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073932546 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074983712 seconds)
  done (took 3.455708573 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082637878 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.06339382 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.085071147 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088389411 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089809069 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.06324822 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078265471 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090333963 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126175761 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063948342 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072625661 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.064287324 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102982634 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063395428 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079427711 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108763028 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111299126 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067534161 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096824679 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063659137 seconds)
  done (took 3.359994018 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078279335 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067843508 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068280525 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063441864 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.073872516 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070277304 seconds)
  done (took 2.122954832 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069131603 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066101743 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065030245 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069859272 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06554786 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065850046 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065680863 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064422031 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064300643 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064753154 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064978895 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066103476 seconds)
  done (took 2.485933279 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215517587 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070418197 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067865931 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063520647 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065104166 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064578113 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078405332 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066937013 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082047512 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064802841 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065037915 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067699314 seconds)
  done (took 2.666940001 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105501737 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110102154 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141644925 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113215341 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114166751 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093548968 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.165422852 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092408318 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.158640221 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136072985 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117148005 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093868694 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085138633 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067998869 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098776587 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118332829 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138320012 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071460013 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111510043 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.216910341 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133025097 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.133960194 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146047672 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115509004 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090867402 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145558526 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095658857 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102424636 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123788979 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126279128 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117170732 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.096172499 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070531755 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069559482 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149687752 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.106203725 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12243192 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092603256 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.1058067 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088180422 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109075631 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069041075 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083167303 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112690211 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085873379 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133195045 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.092897383 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116632944 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08112054 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.307212976 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123897499 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136352053 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083526999 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102814991 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134665457 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109329915 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130793536 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103016304 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079632765 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11576907 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101597786 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096956789 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105154763 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07744677 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1743197 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086703945 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108819114 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108645245 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.092720243 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093301226 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104136141 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134051151 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126567821 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.127327443 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140174172 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094909492 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12006995 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.099784328 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128233953 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103460825 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071761368 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122240575 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130431643 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099045131 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101660878 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132115153 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092467472 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077374139 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.101559008 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119802013 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08026022 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.114964975 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08022053 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111319322 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140516154 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100321888 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112491236 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12098722 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.249938238 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151824151 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106074645 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070732902 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113605088 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108917803 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151810037 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092368795 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074043969 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098442699 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100970689 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151239487 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104569135 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077156426 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105761299 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136017817 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091104343 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.21384612 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093490709 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139542469 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107567362 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084684539 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072990866 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088182432 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111658811 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106537576 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111194071 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092932699 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084260569 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085820596 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11464598 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092820584 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079395655 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112792886 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098340795 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073501537 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086813047 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075217551 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14141881 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077882264 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137626048 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126288273 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076232305 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10767366 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098392979 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109794473 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098966565 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120939011 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144217565 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116255942 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091175022 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.095474741 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109090471 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.147298192 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13076947 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.265340101 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.07516254 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098635239 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109708662 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094966295 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12290699 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093032093 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103628583 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100505446 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1370724 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140344019 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095457495 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097926405 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104082281 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.118932777 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074389287 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152552106 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101066963 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115709781 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082843122 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137355421 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.109635095 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087126841 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085568507 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098481655 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.103935227 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107427752 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144757293 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096634741 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.072066072 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091926909 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143793174 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076477791 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108688214 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.09063527 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091557897 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118117501 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094606738 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08076619 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067823078 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127802381 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.159205852 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069451881 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11706562 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11029725 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103518676 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.123873834 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069169259 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121371434 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142300526 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121302542 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150259616 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.335999501 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115503387 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116850484 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110158369 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105890024 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077305763 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.121838077 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.130797039 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092382534 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088298965 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131694829 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11705817 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.132936107 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114066458 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115390454 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102175822 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105379179 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099874366 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100984266 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141544983 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12289201 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.123491613 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085514109 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105411268 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119477509 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135697492 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0810029 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14107377 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084373704 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120461987 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077486051 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123350155 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.076776825 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.107765566 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077971506 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100274536 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068220442 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073122701 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144157664 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113843996 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109077193 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101567501 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.139718017 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.139524071 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079080936 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108823686 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118378118 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102272277 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120553085 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110743687 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.262152915 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092633441 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105598823 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082568047 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.078502865 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111701568 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090917429 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122388252 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082081574 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072728907 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135106523 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10092853 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091459051 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075768833 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104116777 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121058887 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090921159 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085390015 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115182007 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103318908 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137891072 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088867208 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.094705573 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.1213842 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077830521 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.089544489 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067560058 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084419417 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074741186 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.126297846 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074866162 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115821077 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067787181 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.129718727 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086206413 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091697869 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10132013 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109848204 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127707419 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093609956 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140058327 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088569124 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120060398 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106955919 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094232165 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088454433 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102892635 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100965422 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12404196 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096951195 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125426354 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14767329 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10381706 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145887768 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091605256 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12565221 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109846078 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.300484147 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109056384 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163383302 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134156025 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109341001 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10988659 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073146834 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092767055 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102637216 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109738196 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169900423 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12229953 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070198789 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10419005 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092424187 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106766966 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100665233 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079435956 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140620534 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099384847 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085563595 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108657212 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.088522592 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102340858 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074972309 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09979129 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.103808517 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095129668 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096372765 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116999788 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128481715 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111694085 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143770744 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100925977 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092483967 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118068452 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110096647 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108773454 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08487514 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085667049 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138621492 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121986151 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129259117 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.103683046 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109610154 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114296111 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101182594 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127387419 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109136162 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.129416595 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080582451 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.078783232 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.07006297 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073924935 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129691592 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112915932 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118847747 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102983963 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.07370083 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10724939 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110678308 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073546289 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091416529 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099796388 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099991649 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.096500599 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1144876 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.117442424 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.094711483 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109505524 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104439537 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.158622103 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.107870047 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093495746 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15485036 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161335407 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092974155 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098336768 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07310132 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081987052 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118788733 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160433705 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.163785713 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.082162465 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089940155 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.089978715 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092297253 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074468439 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.093433221 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091812699 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112104679 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107171393 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.120012302 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111688226 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077931899 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106885974 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105353213 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096909895 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.113661812 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129345296 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135958737 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.152091358 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120722783 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114204022 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079619434 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084459485 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078400443 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082112218 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105914341 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.082657068 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0795418 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.489583941 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092526523 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104911309 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107437962 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08780475 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076592032 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136573309 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.069241185 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133954991 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.070637169 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080562041 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081335609 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077776388 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091553907 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135132536 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111642931 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110330182 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106894913 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102467402 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159240262 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155561471 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079611799 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142490374 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075112518 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076724751 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07512999 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109649937 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088419563 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114683355 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141325174 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090180448 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101555343 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077087322 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144150576 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099092559 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104023777 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086428083 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078771992 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143888573 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079286958 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080361878 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089106519 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110898373 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072071008 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105362317 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085668298 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080036398 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166817715 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.711759041 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092530113 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075618312 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09638517 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.145838175 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136810553 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097993727 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.28412376 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.118259876 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098257106 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093589185 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104451994 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188890701 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072622433 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0913055 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101193533 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095431369 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100248508 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096711672 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084612313 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089643643 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084796445 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076864435 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104767805 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085874828 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094363192 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108487452 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08186126 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.086439069 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128572268 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101732754 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080176939 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085238894 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103441245 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085798489 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100553944 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068536227 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112360886 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090952262 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118056262 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.097017753 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106776824 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127958932 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093335647 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136961511 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.106674068 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12220703 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087672849 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077869509 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127892324 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.088919702 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076860391 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147013676 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.095857828 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091711932 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10431827 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096903227 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114287554 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118387708 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114002915 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096868046 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078645101 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101833087 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103700472 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.259283904 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07833419 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072790917 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074988945 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104338315 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082768643 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080949508 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111277299 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085904173 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099752088 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.099995753 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119137619 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086644603 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098799936 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109514853 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089329736 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107130762 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099584319 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125776863 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170104959 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121180606 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127861022 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131451594 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.075477533 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073459982 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067056741 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114935861 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080214102 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088991999 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080166795 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132917309 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082307836 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114028068 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.243655802 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079894102 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093757076 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095400488 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068558536 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082376369 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106785058 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086842143 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08062744 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119660425 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08245691 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128606913 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110208536 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098643657 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09521569 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080375656 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114580036 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105407581 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132753296 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099044149 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075203624 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125124208 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104431585 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140715162 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073309302 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081090487 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132321003 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.27416016 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128332144 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077847312 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145032628 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140315837 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097892295 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130682752 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070074701 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086070165 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08735956 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124372864 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081282342 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107793288 seconds)
  done (took 68.54314966 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.181252251 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.175938909 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.119846062 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.132066189 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.29014663 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.299015983 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.152025967 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.123761668 seconds)
  done (took 3.341270374 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069940767 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081414009 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079099032 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.246331781 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096533394 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066103099 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071511543 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080247732 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065777008 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065315263 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099583938 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065920244 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066177491 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.524709773 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065701443 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071263745 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065910773 seconds)
  done (took 3.753592242 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.35538539 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.618636821 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.326999534 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.756963756 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.16846604 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.723085817 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075895124 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081821226 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.944546733 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.400866359 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.162348117 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089424087 seconds)
  done (took 21.567427804 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.0776449 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.122258013 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.121349411 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073109253 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072613538 seconds)
  done (took 2.336035972 seconds)
done (took 122.650362683 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085177206 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.170978471 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067087185 seconds)
  done (took 2.13136523 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.123763535 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.119295214 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.119350083 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.120481641 seconds)
  done (took 2.346091051 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075954507 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074491288 seconds)
  done (took 2.020949735 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.228234066 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.215701658 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.0900862 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085257804 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078457376 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078609936 seconds)
  done (took 2.116027866 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.07303042 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069646347 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069680231 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069741996 seconds)
  done (took 2.139746943 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.173185355 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065517553 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067637531 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069406446 seconds)
  done (took 2.235589988 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086988786 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086033385 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115703069 seconds)
  done (took 2.153377255 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084660564 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083799518 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077209281 seconds)
  done (took 2.108085387 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.11054317 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095151832 seconds)
  done (took 2.066120358 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08045514 seconds)
  done (took 1.944290497 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092970055 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.09731693 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.186366686 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.152258152 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.188854852 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.174201163 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076088485 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075817974 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07125528 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070378738 seconds)
  done (took 3.042741869 seconds)
done (took 26.785545839 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085728369 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.190017927 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.441117522 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08563787 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.652544934 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.438959516 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.731090592 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090603134 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098148716 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067008382 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083415658 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.632357843 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.732087728 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.14573866 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.718723577 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.140097079 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.563301821 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06794224 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067018445 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067852329 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.714914496 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06742148 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067075987 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067457575 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.559650529 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.456500344 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071130253 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.137185172 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069679203 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074084664 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.436520572 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068753909 seconds)
  done (took 14.721812331 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.096036391 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124864303 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072161869 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082590734 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.06900417 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068557845 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070240642 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067090352 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.108909102 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067134824 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083930027 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066661038 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071618421 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068411772 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08732039 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067685453 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070053571 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067664803 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067232654 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067590065 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085788107 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066460765 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067404632 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067259203 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067156664 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081285494 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068185763 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066785086 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066942794 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071171784 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073217809 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06879943 seconds)
  done (took 4.278049996 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.12913708 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129300706 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071982745 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107612591 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.1154764 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069442126 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.14998013 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089488157 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113098994 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068571455 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084873267 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068390043 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.103057727 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068884649 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088132718 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06727212 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069457939 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067989323 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06844134 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067799938 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086144718 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066740717 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068478723 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067830244 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067545777 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083338292 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068296713 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066948085 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067100027 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071071613 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073118911 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068512746 seconds)
  done (took 4.537605652 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070891961 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069336482 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075565848 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078182267 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064480098 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066696496 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.068586202 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065221248 seconds)
  done (took 2.448971656 seconds)
done (took 27.866464638 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080190076 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.06579198 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069238977 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085606946 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071782529 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.112260956 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063074977 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072725243 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069469548 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069368158 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071066979 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065608103 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068462042 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062914065 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069693265 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064094531 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.115891305 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068431468 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.112395794 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.113731524 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06653706 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069664378 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072568324 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.11346634 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.11505234 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.115652344 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073944675 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070282974 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064547194 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067344856 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.173912158 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.188446204 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074086665 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.121216422 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.06489655 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064409917 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069078617 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067791974 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.120530176 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.079533105 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068391942 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073271813 seconds)
  done (took 5.41673958 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.193479359 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.196526448 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.189950944 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078510725 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091962802 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078489238 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.196103698 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.0764302 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074342047 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.195221414 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070423546 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074651405 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.07667918 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067333096 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.075302059 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070708471 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.075827928 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068569898 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.075895072 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.074469846 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.195265293 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.06810254 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078901214 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.076128721 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.069858137 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.076287608 seconds)
  done (took 4.57655749 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073820576 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.08773296 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091090559 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.14464022 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108262343 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081155901 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080586869 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092101902 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099854939 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066544738 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070640845 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096959569 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095796798 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073362355 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105980964 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084347682 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078451913 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067829668 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.07279405 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100363988 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088879744 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084812502 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099365708 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.08660386 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066178658 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075805927 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.0733843 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.081752256 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.07361967 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.07846746 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070120202 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069665142 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066947111 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.077813361 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070541297 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064643804 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089206594 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081327829 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082674935 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106774357 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076909977 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.117297987 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.094137279 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132659959 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066476716 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068924196 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070853446 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079431229 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068773185 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098772183 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083020506 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066991772 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085510693 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068113794 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068123571 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082803517 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068458452 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068281512 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078203236 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07293633 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087781259 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072707163 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088247933 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06675782 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078560092 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.06819692 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068470669 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065403209 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.100951953 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074541935 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117709507 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.06863626 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065328953 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079369384 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078934107 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074036788 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066381552 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086172244 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078678858 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070543113 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077592813 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069098414 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.069831047 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103393107 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065327591 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064442896 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06467198 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068777947 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07052794 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067288677 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079441763 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065960448 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070055936 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081901083 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067011562 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.06735918 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069185855 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06803556 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066314463 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077691992 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071503877 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068932617 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080627417 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068515322 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070362298 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082115601 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075900417 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066601451 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.06800237 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069290276 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.06909103 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.071849513 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070708184 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069261321 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072648063 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.07524163 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074505885 seconds)
  done (took 11.101881709 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.211600841 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.197238659 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.067461242 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.1936422 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075019629 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.128440931 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.197461493 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.134867092 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067186734 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067819774 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066029698 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.143212272 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.135932665 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.146739447 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.118509473 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068222699 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093515013 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.147626782 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.201397639 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.195033921 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093178687 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074709179 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069891846 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069173018 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069476255 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076976466 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083525025 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075972767 seconds)
  done (took 5.21492024 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075423333 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.08223969 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070314915 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090744087 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.082887003 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066378245 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068698888 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067631251 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083584618 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072786 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067518217 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071120211 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.06987541 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067182448 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067369844 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072789442 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.07293638 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065287815 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.069963204 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070934351 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079267951 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154677843 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071525906 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071025952 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069168302 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067099404 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073246012 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.074852004 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066368563 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100012531 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063721781 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070832509 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081479875 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067641055 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066515094 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.06763155 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067489822 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.068018474 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067761426 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06544072 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065039265 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073068506 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065709429 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071658251 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081313288 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075712535 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.06840079 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069343503 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069215351 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.06418531 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070633039 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.071772667 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07025259 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075851155 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070651942 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.06920044 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068604309 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09631224 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072989162 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066719564 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067184943 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065344178 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068520856 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074651117 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084098629 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069882188 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065394127 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066991245 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074428038 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081549238 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066424552 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072176783 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063843351 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066944679 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069296995 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069795166 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068469203 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065125043 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066742025 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068122739 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068378806 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066674502 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067215688 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069765231 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064585167 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.06538128 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068307582 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068721768 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.071983068 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065737575 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.06944963 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068336396 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065787766 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069756939 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074413869 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070898127 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088016288 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075656137 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.06778869 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064961055 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082649664 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.06927952 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066514886 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.070869549 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071818155 seconds)
  done (took 9.496112504 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098067379 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06772734 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087449513 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.099860969 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079360055 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.073918994 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083557455 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069815879 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.090990944 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067892608 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.077347986 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.06502873 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080161905 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075648247 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067753296 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077624082 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069279265 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087613338 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081145626 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064563382 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075322871 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078601258 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078700198 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.08466679 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084359136 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085238877 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078656988 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068754903 seconds)
  done (took 4.197441466 seconds)
done (took 41.879122421 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.977488959 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.159799857 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.968536885 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.442869633 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.043827512 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.049536609 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.053352431 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.956714547 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.262722056 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.039293748 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.717666361 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.645714513 seconds)
done (took 70.287068804 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.076774982 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.108380718 seconds)
    (2/2) benchmarking "String"...
    done (took 2.209931357 seconds)
  done (took 6.225877468 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.395173342 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.960057066 seconds)
    (3/3) benchmarking "different"...
    done (took 2.000335274 seconds)
  done (took 8.251595828 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.2053891 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.489639692 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.240580698 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.957575825 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.974642888 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.442582951 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.058717336 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.592192287 seconds)
  done (took 33.660423376 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.971671691 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.257760553 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.315750124 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.394300179 seconds)
  done (took 21.914956034 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.405111592 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.306446617 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.312073197 seconds)
    (4/4) benchmarking "different"...
    done (took 2.416212424 seconds)
  done (took 11.434638964 seconds)
done (took 93.823155699 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.959989491 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.279499241 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.973799886 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.133728065 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.998724832 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.038919129 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.96940274 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.984071811 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.962781051 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.965395917 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.967207303 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.97475615 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.96738856 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.99772513 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.967925927 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.993661854 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.241767676 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.97077192 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.973013725 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.689343718 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.311962554 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.968268767 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.977305448 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.031625101 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.341236731 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.971078052 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.418321364 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.963680224 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.570461526 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.969825319 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.965986043 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.971120696 seconds)
  done (took 210.361999134 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.960588632 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.745351016 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.753992623 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.970599724 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.283782357 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.304011131 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.813183908 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.311863461 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.985716638 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.997213787 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.96335122 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.962164733 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.950404514 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.529160573 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.994548082 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.014126017 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.817936803 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.715918587 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.996929565 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.884285309 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.964964914 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.476519231 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.435856645 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.750917255 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.965151989 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.96750213 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.099088004 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.007540421 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.486703735 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.797761959 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.978495835 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.977851841 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.452152463 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.200377251 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.968776087 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.979537464 seconds)
  done (took 184.364126496 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.18825487 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.98625995 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.009435778 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.071352282 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.914160651 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.762899736 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.964050026 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.969079332 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.962463765 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.968233087 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.964341063 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.027087096 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.112573833 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.994563838 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.96745238 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.966213887 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.059122244 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.980864343 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.962184504 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.963850237 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.590586854 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.305653247 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.075322023 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.963045484 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.976798779 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.071247502 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.968681511 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.961759388 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.070205223 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.965909147 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.097476493 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.079619947 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.984393921 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.023158395 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.975215627 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.161552518 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.964073924 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.96308903 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.965040457 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.013535119 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.972122452 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.03163518 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.073980972 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.964354373 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.979762728 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.425670893 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.557082343 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.973292889 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.968374746 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.96650849 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.97213734 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.962131108 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.248869374 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.964140312 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.99739198 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.394062396 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.968594163 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.964194784 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.969358548 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.96102042 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.96738364 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.968662237 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.009718014 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.622730757 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.752530041 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.317626443 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.700504834 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.964198725 seconds)
    (68/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.68482639 seconds)
    (69/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.031707194 seconds)
    (70/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.968339787 seconds)
    (71/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.142617482 seconds)
    (72/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.965724288 seconds)
    (73/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.962452307 seconds)
    (74/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.967185358 seconds)
    (75/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.961157108 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.962654281 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.88132147 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.987424458 seconds)
    (79/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.968303332 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.965422712 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.080773121 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.966031477 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.970906281 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.332475229 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.041405421 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.981867182 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.981246967 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.027062679 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.965896244 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.964111124 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.974661728 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.961918023 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.968693539 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.966290983 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.997694388 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.342617878 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.969815579 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.204840754 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.347520606 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.057424068 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.389733475 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.941284414 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.972522444 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.963766833 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.964798583 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.986416159 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.968286507 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.965055292 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.979315051 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.961525219 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.963780875 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.963073702 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.964562747 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.969457512 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.969028537 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.972293101 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.985753659 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.976139783 seconds)
  done (took 429.735495565 seconds)
done (took 828.629578243 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.636409408 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.728264934 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.542403009 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.596684345 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.552446034 seconds)
  done (took 14.952570224 seconds)
done (took 16.858085431 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.996745251 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.987306049 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.982468525 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.991103113 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.994500326 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.987820715 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.996698618 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.006712913 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.99748391 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.988860685 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.99340521 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.990519952 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.004693579 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.001463674 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.002416227 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.008713318 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.99280238 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.989171202 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.998884741 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.991338248 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.995235076 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.993387748 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.998791284 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.004560152 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.016495735 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.991513561 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.987462041 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.995948974 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.992389092 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.001023176 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.010232408 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.006725103 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.004114227 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.006613329 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.001134758 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.002110112 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.993841426 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.008852976 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.012482607 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.009276541 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.999892468 seconds)
  done (took 83.832618641 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.98000783 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.150627744 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.256510776 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.018449259 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.98224936 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.271178977 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.050550482 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.127473059 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.14842256 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.26224244 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.302937134 seconds)
  done (took 25.457314819 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.980969712 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.148005498 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.266696263 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.02050399 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.980058049 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.257759367 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.051586741 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.147222033 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.158573447 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.264193179 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.285736568 seconds)
  done (took 25.485805632 seconds)
done (took 136.684449894 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.532902555 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.027538577 seconds)
  done (took 6.464080028 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.968297689 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.993934193 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.151067654 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.971680607 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.970826292 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.973959411 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.971220398 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.972501059 seconds)
  done (took 17.872348991 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.975815969 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.974039041 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.977613913 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.977288732 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.974700716 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.974193086 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.970534348 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.971048242 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.975194797 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.973836759 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.971092512 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.974787284 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.975973596 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.978359834 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.994299732 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.984163819 seconds)
  done (took 33.526660822 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.984933603 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.986836746 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.990055098 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.007382627 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.986870779 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.979728364 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.98218836 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.975046015 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.981997116 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.973308484 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.97726132 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.973617727 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.978258333 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.974506366 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.971915714 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.973690204 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.973520945 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.975063125 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.971876966 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.972698333 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.972896281 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.976433092 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.994466811 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.976658525 seconds)
  done (took 49.424366527 seconds)
done (took 109.210291627 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.571768393 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.979506139 seconds)
  done (took 9.456748838 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.976893951 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.974839313 seconds)
  done (took 5.950772854 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.977848866 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.029384061 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.971717121 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.971267994 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.970426822 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.971392354 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.970746118 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.974557962 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.974397942 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.978290491 seconds)
  done (took 21.694185505 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.98212389 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.975553639 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.976656314 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.978545942 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.977201621 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.973953151 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.973563957 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.983378428 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.980589651 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.976715501 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.991587732 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.976509438 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.97305482 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.974732625 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.981974502 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.97751627 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.979548727 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.981378052 seconds)
  done (took 37.524767537 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.975097571 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.974732701 seconds)
  done (took 5.858838987 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.977191687 seconds)
    (2/7) benchmarking "second"...
    done (took 1.973309182 seconds)
    (3/7) benchmarking "month"...
    done (took 1.973541821 seconds)
    (4/7) benchmarking "year"...
    done (took 1.974302756 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.975644404 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.974621659 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.977636063 seconds)
  done (took 15.729465423 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.979854391 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.131125093 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.163136777 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.453185516 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.977332014 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.976698796 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.586262449 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.980805907 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.980783079 seconds)
  done (took 21.141854907 seconds)
done (took 119.270712384 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.708516895 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.985234454 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.777955655 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.108285813 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.01109789 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.337222678 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.98124914 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.514303019 seconds)
done (took 45.33647734 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.043116822 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.978731697 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.017366682 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.023073343 seconds)
  done (took 22.9394876 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.991086061 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.610475067 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.014877604 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.119519199 seconds)
  done (took 23.744274902 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.477601503 seconds)
    (2/2) benchmarking "read"...
    done (took 2.502493599 seconds)
  done (took 6.906841448 seconds)
done (took 62.557334152 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.979789704 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.97855705 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.978011836 seconds)
    (4/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.979013778 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.981528228 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 1.978692702 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.976245024 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 1.976799682 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.979059008 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.97694006 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.975746733 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.979037499 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.978259695 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.984133932 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.981873087 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981560839 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982647089 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.985847329 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98251511 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.983756847 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.980738392 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.979630049 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.982834046 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.980205188 seconds)
  done (took 49.436932494 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.978858544 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.978923642 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.978475423 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.980499054 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.9834241 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.977133962 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.978201686 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.977114183 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.979817198 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.981669863 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.995213417 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.984326323 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.984506478 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.979985197 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.983578502 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.983248592 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.980236158 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.983762442 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982348579 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.984870657 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.980900869 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980256658 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.983102613 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.978313734 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.980275475 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.981741689 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.981867416 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.980173591 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.986372658 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.983740331 seconds)
  done (took 61.36506021 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.986540526 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.984990809 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.984402644 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.990464729 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.985746914 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.985564165 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.984559543 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.986275002 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.985817948 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.985537544 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.984106419 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.983322039 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.981399775 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.978954525 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.981084958 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.011375159 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.043176493 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.002152766 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.990712515 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.991540041 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.992542256 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.025748632 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.988758477 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.9939071 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.994900868 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.990454753 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.986947348 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.986228696 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.982257187 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.981073736 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.98252528 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.981176745 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.981995688 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.989976662 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.983854683 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.979117869 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.981107982 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.988167307 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.011085888 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.983459451 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.987166274 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.981071958 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.982374924 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.982178929 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.983092449 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.985110405 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.985871628 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.98840383 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.988351701 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.987124101 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.987201765 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.988847176 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.984647779 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.984353788 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.981960767 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.001667028 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.006478709 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.987977295 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.985522561 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.982546137 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.984969456 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.980411861 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.981128759 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.984650131 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.986206051 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.991322743 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.994722505 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.98583821 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.984363881 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.984433458 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.983375596 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.988463254 seconds)
  done (took 145.079056792 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.987579568 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.995978622 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.044101365 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.994282033 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.99915958 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.999948721 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.990137236 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.992685269 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.989888986 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.990730613 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.986774676 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.991635904 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987989793 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.989557518 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.991755563 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.987830019 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.989430194 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.988185421 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.985017351 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.987377821 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.986201293 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.987103929 seconds)
  done (took 45.759540945 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.009357298 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.986242845 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.983095811 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.000323505 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.983653552 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.986089943 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.985164612 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.984256293 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.983534826 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.982035079 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.989095719 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.002214053 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.987021656 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.989044864 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.986549275 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.994514922 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.989759695 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.988159256 seconds)
  done (took 37.727048451 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.990507348 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.988109232 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.995103402 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.988745806 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.988219818 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.987618886 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.987456155 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.987329347 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.988250718 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.987483047 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.007741999 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987708767 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.987423325 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.98480142 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.984512758 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.992076212 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.003737043 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.011800171 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.9950136 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.998089332 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.996266774 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.996401678 seconds)
  done (took 45.7565762 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.994406459 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.992327414 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.986662487 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.98916143 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.98448645 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.984668004 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.984307322 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.986333731 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.988889613 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.989939889 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.990913386 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.996720315 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.99261053 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.995030883 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.995549737 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.993696631 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.992665164 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.993421668 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.011047457 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.996261094 seconds)
  done (took 41.761144648 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.009961083 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.99120252 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.993509689 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.989149836 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.989010162 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.989560881 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.995000403 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.990332902 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.990646037 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.996561227 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.987854697 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.988526689 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.992173515 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.989916399 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.989165162 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.986336747 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.992056143 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.99132127 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.989005011 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.985798901 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.988393277 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.987068374 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.988980502 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.989000069 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.989931693 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.987476157 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.990804743 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.986091493 seconds)
  done (took 57.678323964 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.988752654 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.994716201 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.990292973 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.988074304 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.997362211 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.990819523 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.990614417 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.989570945 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.991636021 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.989053037 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.992171141 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.990784354 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.989547254 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.989799327 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.012975515 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.989646432 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.994625771 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.995862808 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.991880277 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.009689548 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.99153145 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.990599763 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.989853854 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.991016721 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.989634575 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.990032051 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.992559929 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.994533144 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.994137224 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.990427032 seconds)
  done (took 61.698059101 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.010137574 seconds)
    (2/2) benchmarking "in"...
    done (took 2.012406864 seconds)
  done (took 5.939984882 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.997009287 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.011901434 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.996148877 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.994243186 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.989509773 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.00088606 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.990866847 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.992586422 seconds)
  done (took 17.893521323 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.988718759 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.995589249 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.997177134 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.996673199 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.990476725 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.018932157 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.993421689 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.993241335 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.995289415 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.996228057 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.996072692 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.000713591 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.003453668 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.004739995 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.99419621 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.997147332 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.996453581 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.99862698 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.995932127 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.992546374 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.997135268 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.999910611 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.996428651 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.994450938 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.999697839 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.013734247 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.006839703 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.004091796 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.002933169 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.991355936 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.001788312 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.004293571 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.002083066 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.996457184 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.993052193 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.994822177 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.005176905 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.995964507 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.008577351 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.99511566 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.996419704 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.996571655 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.000760884 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.003739134 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.005377744 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.995958507 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.996627271 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.99665661 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.9975189 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.004870396 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.013248471 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.997408174 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.997172748 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.999050624 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.000632737 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.994925803 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.997083916 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.000942693 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.024519137 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.002862622 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.001740786 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.019910579 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.004151975 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.994530081 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.994643425 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.008633991 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.02481901 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.995718118 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.995720323 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.995694173 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.002297917 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.996353144 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.995441488 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.995351043 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.030672897 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.002414385 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.99300781 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.993178574 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.992860921 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.995779087 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.994127001 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.999866058 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.012297228 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.993685828 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.004876116 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.024994747 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.99249454 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.993794837 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.999913928 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.997715866 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.002436294 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.998889557 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.996182105 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.998353061 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.009420824 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.997971211 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.993511072 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.996270019 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.000423311 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.005048667 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.994669601 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.01621071 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.999874762 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.004810979 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.998340037 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.994910814 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.998662719 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.995202241 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.004203931 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.013989583 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.996213167 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.011073816 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.001242401 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.002724465 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.994179282 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.99948345 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.005909563 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.003398705 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.998926294 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.006647769 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.021319262 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.999758462 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.010879735 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.05049899 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.996214369 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.999577248 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.00309493 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.014897982 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.006037632 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.000323259 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.99916921 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.997667771 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.998843174 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.000996468 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.032705715 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.012876248 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.997882566 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.997844915 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.004676716 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.997679999 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.000742593 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.998662953 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.998320241 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.997004679 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.002925006 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.007337541 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.015149953 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.003936572 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.001668033 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.999740419 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.001972529 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.003075698 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.000298748 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.00484477 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.999377825 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.997006438 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.005407402 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.000533038 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.002721794 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.00168689 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.99843514 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.001036697 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.003780002 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.002402529 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.000882662 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.003263634 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.022818282 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.999301831 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.000749871 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.002528514 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.005496809 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.002042877 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.00657904 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.023285297 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.998847466 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.00003337 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.001623502 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.001008128 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.007379743 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.012824728 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.008720289 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.011789984 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.002442588 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.007782927 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.999279534 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.004153013 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.00161749 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.000620636 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.00001726 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.002887798 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.001501462 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.005485587 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.028058591 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.014819658 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.005442967 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.003446166 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.009802376 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.006528487 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.009593175 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.00016916 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.002082262 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.003146251 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.003320937 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.003172503 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.00285257 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.007613741 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.001146419 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.004580982 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.005603943 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.999717445 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.005109829 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.002226292 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.000136141 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.002529551 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.004576135 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.009560791 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.001365374 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.004732689 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.0190952 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.007565497 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.002893041 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.008117568 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.004480805 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.015455264 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.998804459 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.005285998 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.003728513 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.000490455 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.007375261 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.007105285 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.009424289 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.009154981 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.007499513 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.012815046 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.005435398 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.00437941 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.010374717 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.013006042 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.00676472 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.002365362 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.009615296 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.002073053 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.007243095 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.00259495 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.001473826 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.019785878 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.011984905 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.001550639 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.00518638 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.01658275 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.02398381 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.005885692 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.005652499 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.012186006 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.006204127 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.006203455 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.022106484 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.009456271 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.015493872 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.010270537 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.013136691 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.009598923 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.010331414 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.011078734 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.019996544 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.010033432 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.028104872 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.021527647 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.009107971 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.004947179 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.008268103 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.005728457 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.004376567 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.003404014 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.014500474 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.005874792 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.006765914 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.009713466 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.008410798 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.004166601 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.015242952 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.008318087 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.010578361 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.007396417 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.007058838 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.007524369 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.005177832 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.006957266 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.007457431 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.012166034 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.010353591 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.004700182 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.007885716 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.006692466 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.017116955 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.007947014 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.007360701 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.016333794 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.008889411 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.006751066 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.009060526 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.006953465 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.00880544 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.012078498 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.011547328 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.012415545 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.006246322 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.017487274 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.027450458 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.01574828 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.018377305 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.012076134 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.052203538 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.008944504 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.009925298 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.006516442 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.026559191 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.023285383 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.007322131 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.006503696 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.014911958 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.011608828 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.01184017 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.011973021 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.009524388 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.010876802 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.009365229 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.015193136 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.012289562 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.013388273 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.010744071 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.007389337 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.010276759 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.009266023 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.011244273 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.017432567 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.009024082 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.013259333 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.010013332 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.010851216 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.012632815 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.014245953 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.03230665 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.012151257 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.01075157 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.034022903 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.023560311 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.015945594 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.035382199 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.008607416 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.024294888 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.011151234 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.010563528 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.011420303 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.015849767 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.014468462 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.012838761 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.010746393 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.009058049 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.013382317 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.016801086 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.024017544 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.019258232 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.022365269 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.01733189 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.012980185 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.015739033 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.023997675 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.040098056 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.012132872 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.013517578 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.0183126 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.02184062 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.027805191 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.017333412 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.017605967 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.020839946 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.0140098 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.010406118 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.011714807 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.031273068 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.015426196 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.012074647 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.01119477 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.016031463 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.01453504 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.020432344 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.01306227 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.030400764 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.013379329 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.023650019 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.012596002 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.015013613 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.012651833 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.014147936 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.013988333 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.014750466 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.020964086 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.01996452 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.024155253 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.014464584 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.019258422 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.02111654 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.018473321 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.036528723 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.027545277 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.011574401 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.015525289 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.011897172 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.012676051 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.015754941 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.011552422 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.013134563 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.015868246 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.013616753 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.032383225 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.027107099 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.023894704 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.017067522 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.015140341 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.01078669 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.015763224 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.012666731 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.013521646 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.017661725 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.022908008 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.038282485 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.030447424 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.032171576 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.017465138 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.017892155 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.026358025 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.027017997 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.031870661 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.016834173 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.011417534 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.015363198 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.018815056 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.01494489 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.016978833 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.020337463 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.023895926 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.014441334 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.015148194 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.014135505 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.015415795 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.02428739 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.01606751 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.025800111 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.027078526 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.018657198 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.017222638 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.019283522 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.021342866 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.02578632 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.01700608 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.021234191 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.017054333 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.016520649 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.018762798 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.013955631 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.017431963 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.019212323 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.016946745 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.019942021 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.020625078 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.017561577 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.014782085 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.020816425 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.031244048 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.017666424 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.023381305 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.022019362 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.023987613 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.022544708 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.02257417 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.038575208 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.022976185 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.03158595 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.022949115 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.017287509 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.017770214 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.017624497 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.02468901 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.020040978 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.035444822 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.025320587 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.023597768 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.01840969 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.022342204 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.032586848 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.024062255 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.023373017 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.047810336 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.025689404 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.030805357 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.021316299 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.023846772 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.022928778 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.02358278 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.036038069 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.020883329 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.02732553 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.017912231 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.016955286 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.023900152 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.024818185 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.020412458 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.020387144 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.022238889 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.028649515 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.032938473 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.02514047 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.023174592 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.021578611 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.031978237 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.038945982 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.021398348 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.02760855 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.019945723 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.022610233 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.024547735 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.028504786 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.030562795 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.02191521 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.028859492 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.02425962 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.043181452 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.027666546 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.031969499 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.058561917 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.026097757 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.022935748 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.024801155 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.040462812 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.028347451 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.023842345 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.023350269 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.034170027 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.017132363 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.019578285 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.028981777 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.022744112 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.023824039 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.021261976 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.022909274 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.033146708 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.020814602 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.030737629 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.031594988 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.029588878 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.02502745 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.027356767 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.022379414 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.019956522 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.022943393 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.021844622 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.01838569 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.020529509 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.027230571 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.026280073 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.025488087 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.037312039 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.035254755 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.023245385 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.025145635 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.024307512 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.03222746 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.027670081 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.020841026 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.028354538 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.034684286 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.03105404 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.035613868 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.026524233 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.025646095 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.024852717 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.024627025 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.021100875 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.036120705 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.037791103 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.020970347 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.029808116 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.029265209 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.022342748 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.029581675 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.028060213 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.025717688 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.025586709 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.024237257 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.025954036 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.027300806 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.026149628 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.0312371 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.03206646 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.023922327 seconds)
  done (took 1201.503691018 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.022105307 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.021751819 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.023174055 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.021261431 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.021096494 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.023564449 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.019150361 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.025805358 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.023503427 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.022692737 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.023319496 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.02488738 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.026100193 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.024112963 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.028381889 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.026012331 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.026151344 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.027126093 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.023686256 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.024068933 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.024934022 seconds)
  done (took 44.465494841 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.026423126 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.022268841 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.022818289 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.02338427 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.026085756 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.023540927 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.022096992 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.02587679 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.026929204 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.024884259 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.023145423 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.02804639 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.024215327 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.02409244 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.026307026 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.027094314 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.024163576 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.037628017 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.024724411 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.027006793 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.028721902 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.024987907 seconds)
  done (took 46.516814786 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.023460109 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.024583074 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.025348615 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.025221133 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.02494742 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.030150729 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.023918246 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.031236239 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.024845437 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.035217684 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.034153863 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.036108838 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.031152691 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.034590968 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.033225219 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.02969458 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.148437711 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.025654656 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.025288571 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.026398691 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.027084942 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.030428864 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.02689745 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.033510363 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.0597999 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.028272668 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.029117491 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.043030469 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.027786263 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.033505604 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.037214459 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.035597043 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.041914556 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.030411573 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.02586112 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.03933048 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.030234867 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.031088597 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.024283538 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.026696781 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.041398303 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.065212087 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.028047402 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.028978653 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.04510185 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.027100753 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.03228421 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.034735172 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.043098332 seconds)
  done (took 101.653522016 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.031816042 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.033360198 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.036577661 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.035312518 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.038944906 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.028936023 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.02988102 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.040045517 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.026727959 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.026666375 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.026509714 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.030276959 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.029638885 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.032645496 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.029004222 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.028412843 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.030558821 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.028390182 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.044099257 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.035968553 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.034834451 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.03353837 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.034707518 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.03508997 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.057455231 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.031724646 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.033767407 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.031905708 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.031970129 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.031465724 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.029978951 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.038318144 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.030613141 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.038116526 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.033104551 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.033027897 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.035712103 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.0307228 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.032934657 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.034885366 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.036468793 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.045443954 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.036317406 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.036302961 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.030927181 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.030836146 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.031597353 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.027603849 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.031060596 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.025585282 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.030339022 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.03147391 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.028969523 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.029688849 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.026404063 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.029224322 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.029061127 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.025791478 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.028102234 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.026542084 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.027258208 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.028013841 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.027449876 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.027751108 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.025448257 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.027059362 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.029790403 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.026600864 seconds)
  done (took 140.135986736 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.027295793 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.027357502 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.02595991 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.027068786 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.027769165 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.028467126 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.029344208 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.027330663 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.028977607 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.026982669 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.030111534 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.030900008 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.025164193 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.026958582 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.02768401 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.028360646 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.030545677 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.02837017 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.030049014 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.027609181 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.03111436 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.032888707 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.030047825 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.032883635 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.026532996 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.02671236 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.045900246 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.027997996 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.029617417 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.038024897 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.029754102 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.029540381 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.029385604 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.031664796 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.029987189 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.038630556 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.029650616 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.027781378 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.031027205 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.029364248 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.02806067 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.031590882 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.050897891 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.031628867 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.032223305 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.03326558 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.031115374 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.033317981 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.030807237 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.030388969 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.03187466 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.030076605 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.033320586 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.038558734 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.044665542 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.031644199 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.032640397 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.030255883 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.036248462 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.035856911 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.038860337 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.036209268 seconds)
  done (took 127.905419497 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.035554779 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.029515775 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.031265388 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.031073311 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.03133465 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.03993442 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.030566231 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.032838758 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.030965448 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.029871483 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.033800285 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.032386592 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.034387523 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.03202328 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.035541938 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.034691595 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.030116833 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.032645306 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.030553469 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.031225561 seconds)
  done (took 42.610134683 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.029928696 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.034155134 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.030215201 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.033964027 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.028455363 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.030737272 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.033170974 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.031795909 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.033157362 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030201893 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.033002022 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.034926561 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.032499256 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.033980714 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.031913143 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.029332781 seconds)
  done (took 34.474898835 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.031457006 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.031062664 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.031395549 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.031013906 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.035154863 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.033163334 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.036981951 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.031423125 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.031344987 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.034602841 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.03200764 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.034882871 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.033283459 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.03444518 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.032340842 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.032292229 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.034467096 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.033651849 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.033426896 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.047939646 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.036207106 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.037733397 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.032005017 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.053768707 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.033804938 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.034777207 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.033951986 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.035705176 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.033628599 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.032291568 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.032776773 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.039213437 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.032696557 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.034762283 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.032851601 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.032295848 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.032565438 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.032525965 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.036172821 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.036847792 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.036822622 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.035391836 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.033289303 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.040072615 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.034408406 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.03665773 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.03696987 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.03420547 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.036296736 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.057779383 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.036614252 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.036659204 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.036618138 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.036165853 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.039334746 seconds)
  done (took 113.912706435 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.033070042 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.034732077 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.036489696 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.03881226 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.037356382 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.034986574 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.034167708 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.069349876 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.034008802 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.035906926 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.044167744 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.0370396 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.061040153 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.035398194 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.037072169 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.035689143 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.034782703 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.036639912 seconds)
  done (took 38.675897519 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.035461226 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.034110967 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.037868997 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.037543402 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.039338797 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.037981059 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.037593482 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.043456732 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.038917437 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.036876343 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.037028126 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.037349014 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.041243641 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.036116112 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.037264941 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036557144 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.036111812 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.037371253 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.037528922 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.04122601 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.036929933 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.041436479 seconds)
  done (took 46.797943487 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.03798462 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.040983014 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.056319199 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.064635126 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.068371241 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.08358249 seconds)
  done (took 14.317716834 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037328599 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036980157 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.042978341 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038122474 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038540463 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036770737 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.058660831 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039237884 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036210283 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0389585 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039644987 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038021188 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040213676 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037595662 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040953939 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041429371 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039329021 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043030181 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039555176 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042343575 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038387368 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036574995 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.041678618 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03753114 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.053261867 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038307452 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040530582 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040153094 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036749175 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040189898 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036440847 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041857341 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039047068 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037412018 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040311099 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036210838 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.040023241 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039728177 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036191693 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039123214 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.040733326 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041508175 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041986602 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043740343 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039349779 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057436976 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041060153 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037896173 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042969933 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.071876378 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050708805 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0421166 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041353176 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041027236 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04274901 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041993792 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04209686 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041904952 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041108701 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039813783 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039008508 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048549248 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041660859 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04155897 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041917653 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042736701 seconds)
  done (took 136.704075263 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039492484 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.043999145 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.045433307 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044044252 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044139546 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043875085 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045047613 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04060835 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043673122 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03970165 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03987379 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042636125 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041136079 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046387545 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043762551 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040077038 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045099377 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039910845 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047133781 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042443475 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042073135 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042078662 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044858062 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044859094 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04090464 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041781421 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045056457 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041604731 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043909399 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042192696 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.041226979 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04199073 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042309487 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.049936476 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044665477 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043636111 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042016572 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04417555 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044622896 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040730606 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051238461 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043638715 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046113996 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047771309 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085849066 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045640969 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.055171622 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052217464 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051492337 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042974787 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.059658673 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063144153 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050797258 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048380491 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049392988 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048711179 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.054456857 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.054866133 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04377731 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045871689 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.069806339 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051768132 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046736988 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048831084 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050949051 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050339243 seconds)
  done (took 137.057840914 seconds)
done (took 2798.75218541 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.155367306 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.083081042 seconds)
  done (took 16.218120394 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.186270022 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.181336784 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.209557168 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.154433538 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.088332935 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.107025373 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.059962828 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.054998036 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.141923961 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.057013412 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.131656745 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.059690253 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.057460602 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.059307723 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.055680098 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.058820979 seconds)
  done (took 55.698728318 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.064744325 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.057793965 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.059859083 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.05706058 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.08765526 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.156911411 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.094316939 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.069029738 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.092103117 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.105540521 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.084947115 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.067181904 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.072580436 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.068571478 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.165540057 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.119957079 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.142118852 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.153320062 seconds)
  done (took 39.695962773 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.161223897 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.079274603 seconds)
  done (took 11.227877497 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.05933366 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.077503191 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.056233437 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.05641629 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.076070501 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.05936723 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.050955126 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.100220137 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.069134989 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.092826869 seconds)
  done (took 72.710992836 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.060523975 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.06074256 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.347701363 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.07284864 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.084022562 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.08742622 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.055084017 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.093840148 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.057291527 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.054049108 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.066572274 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.359247701 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.077406842 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.056624031 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.492310502 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.074585792 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.062539798 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.093993307 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.093000975 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.05999358 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.060385013 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.06841047 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.30564402 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.893397146 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.062716108 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.06514441 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.062377826 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.056628378 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.052646792 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.072872801 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.058675863 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.054655431 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.071677575 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.056533925 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.071358621 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.063008275 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.720478472 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.083424527 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.066116748 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.145642444 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.109676213 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.072664646 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.058121584 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.064613466 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.05160817 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.059109263 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.807255099 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.138914636 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.059564033 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.227430386 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.49908396 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.080069996 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.209618495 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.19188238 seconds)
  done (took 144.128183819 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.059264856 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.500484567 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.21268794 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.05519442 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.404577167 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.26633839 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.828010552 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.108197113 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.064631716 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.270136904 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.217068781 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.181113007 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.055852733 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.061028832 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.057120903 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.056429361 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.237113818 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.126553229 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.057395938 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.055405556 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.081879423 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.296326746 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.181172922 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.064244884 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.080766018 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.288451001 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.107039048 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.179002429 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.46077533 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.053586511 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.119493828 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.07661258 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.057763658 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.058227573 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.104303568 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.165297643 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.157723031 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.059859503 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.708431263 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.056313843 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.661961331 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.259476668 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.165754597 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.190900151 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.302440984 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.27394782 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.766640993 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.05739056 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.790797027 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.219817865 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.288603191 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.272764094 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.156709445 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.05628126 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.645192271 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.059691779 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.058712694 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.292853165 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.214069476 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.197409114 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.058941284 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.104568107 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.058863086 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.317204671 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.057469284 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.169573008 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.063054784 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.061607722 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.17668372 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.184846489 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.211507422 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.282753587 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.091443274 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.262379787 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.040556872 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.271425313 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.128806057 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.289992855 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.05777149 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.060405107 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.153770446 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.512154772 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.211262633 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.298003842 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.366315236 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.097612464 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.57660643 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.059435828 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.278087383 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.209319439 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.275256215 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.312876861 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.111723359 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.912591001 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.06729311 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.085505988 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.261797284 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.185528724 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.064368045 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.594608159 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.297880428 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.666384908 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.104471146 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.49750014 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.17797016 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.074975185 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.709245502 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.058681615 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.273390054 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.108598321 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.056628558 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.062583647 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.21389477 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.802087843 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.061301631 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.154522357 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.127844138 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.063089457 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.219955719 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.064318887 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.315480904 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.841264819 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.298655079 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.062968241 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.096998194 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.233752903 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.312881012 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.065983148 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.443216297 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.301466521 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.156296539 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.278467372 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.595522736 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.068259937 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.338207742 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.082187486 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.064782934 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.232612568 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.955213878 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.219402093 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.065138127 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.323748931 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.093456491 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.130833127 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.067720618 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.304342088 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.100278622 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.115453238 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.068005779 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.192442737 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.060168334 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.108932249 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.227745939 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.064519889 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.063093421 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.977757293 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.065873848 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.213824362 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.290539577 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.079063329 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.137233678 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.472464797 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.065448991 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.16321501 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.087987768 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.487785504 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.575667364 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.2335334 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.690401859 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.300384781 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.064154707 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.299083034 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.244868758 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.065303315 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.076352796 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.82623823 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.518682534 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.066361142 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.220386447 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.268198875 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.431437217 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.276930631 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.07750752 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.115618444 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.074505273 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.342920036 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.594433769 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.318449788 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.08696707 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.069126532 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.06527325 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.067541017 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.269854567 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.10612584 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.690849791 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.202206669 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.324602383 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.288022845 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.369493375 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.121259489 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.061072962 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.376151036 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.066352443 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.128108617 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.063631441 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.073376397 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.308001419 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.063693103 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.272662235 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.406892101 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.173287469 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.110111137 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.081932785 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.066741499 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.063637368 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.227957377 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.179533595 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.076305434 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.288692696 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.106776289 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.181210714 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.257504779 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.340498584 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.024927688 seconds)
  done (took 929.868044544 seconds)
done (took 1271.529597463 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.058165053 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.078399153 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.062837186 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.072667918 seconds)
  done (took 30.257995885 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.06420621 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.062432721 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.072907417 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.069578796 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.061629485 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.06282471 seconds)
  done (took 14.389149055 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.061465391 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.063570366 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.067086733 seconds)
  done (took 23.178131768 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.524740338 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.373570033 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.182434729 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.234649669 seconds)
  done (took 11.315355294 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.071168528 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.064340266 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.062076055 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.099422908 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.067562844 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.064662058 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.067741787 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.06893987 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.066463131 seconds)
  done (took 20.63210026 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.531568713 seconds)
done (took 108.303299225 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.076482374 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.487448174 seconds)
    (3/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.954655123 seconds)
    (4/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.216187078 seconds)
    (5/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.477685686 seconds)
    (6/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.083598051 seconds)
    (7/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.244324072 seconds)
    (8/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.198939157 seconds)
    (9/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.072797926 seconds)
    (10/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.183794501 seconds)
    (11/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.286925607 seconds)
    (12/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.080897602 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 4.411224393 seconds)
    (14/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.074177249 seconds)
    (15/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 4.013507804 seconds)
    (16/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.070482111 seconds)
    (17/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 4.15242954 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.084879783 seconds)
    (19/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.40143664 seconds)
    (20/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.243204892 seconds)
    (21/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.862017063 seconds)
    (22/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.193638257 seconds)
    (23/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.229984426 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.094089497 seconds)
    (25/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.072569862 seconds)
    (26/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.079037702 seconds)
    (27/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.358556071 seconds)
    (28/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.162252987 seconds)
    (29/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.581904132 seconds)
    (30/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.56042389 seconds)
    (31/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.38637312 seconds)
    (32/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.223140803 seconds)
    (33/341) benchmarking ("sort", Int8, false)...
    done (took 5.704209668 seconds)
    (34/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.205381885 seconds)
    (35/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.228117934 seconds)
    (36/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.164789464 seconds)
    (37/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.220120773 seconds)
    (38/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.965560145 seconds)
    (39/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.248915868 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.084896749 seconds)
    (41/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.07135689 seconds)
    (42/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.327885229 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.201868404 seconds)
    (44/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.468116435 seconds)
    (45/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.37222412 seconds)
    (46/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.159793525 seconds)
    (47/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.291612252 seconds)
    (48/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.844347104 seconds)
    (49/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.119528959 seconds)
    (50/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.379241551 seconds)
    (51/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.223297387 seconds)
    (52/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.067308543 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 5.159194394 seconds)
    (54/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.292280456 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.107414195 seconds)
    (56/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.435146783 seconds)
    (57/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.07849041 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.591596774 seconds)
    (59/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.455349492 seconds)
    (60/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.610853567 seconds)
    (61/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.081981373 seconds)
    (62/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.364282744 seconds)
    (63/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.391791388 seconds)
    (64/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.328446486 seconds)
    (65/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.266021157 seconds)
    (66/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.218175507 seconds)
    (67/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.311332889 seconds)
    (68/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.676244711 seconds)
    (69/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.301965594 seconds)
    (70/341) benchmarking ("sort", BigInt, false)...
    done (took 7.080459536 seconds)
    (71/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.07287636 seconds)
    (72/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.200655986 seconds)
    (73/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.090242883 seconds)
    (74/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.088595372 seconds)
    (75/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.067130693 seconds)
    (76/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.212751176 seconds)
    (77/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.810590849 seconds)
    (78/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.431635296 seconds)
    (79/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.933388919 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.089875081 seconds)
    (81/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.073307427 seconds)
    (82/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.036607938 seconds)
    (83/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.323955246 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.095191179 seconds)
    (85/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.611470212 seconds)
    (86/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.141061625 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.09206151 seconds)
    (88/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.393825902 seconds)
    (89/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.20521191 seconds)
    (90/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.101354547 seconds)
    (91/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.469194355 seconds)
    (92/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.245967079 seconds)
    (93/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.055571268 seconds)
    (94/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.371853643 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.901502946 seconds)
    (96/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.343398826 seconds)
    (97/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.311612741 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.495880002 seconds)
    (99/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 9.035795413 seconds)
    (100/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.450154545 seconds)
    (101/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.450930946 seconds)
    (102/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.492571744 seconds)
    (103/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.303613796 seconds)
    (104/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.083503954 seconds)
    (105/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 9.346407237 seconds)
    (106/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.250338555 seconds)
    (107/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.290777796 seconds)
    (108/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.273484269 seconds)
    (109/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.085420339 seconds)
    (110/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.345490478 seconds)
    (111/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.24218093 seconds)
    (112/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.249864426 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.229057111 seconds)
    (114/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.38383063 seconds)
    (115/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.448405357 seconds)
    (116/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.296836583 seconds)
    (117/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.481023101 seconds)
    (118/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.992986823 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.262964822 seconds)
    (120/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.241543969 seconds)
    (121/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.071007065 seconds)
    (122/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 4.280707391 seconds)
    (123/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.079561918 seconds)
    (124/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 3.163292874 seconds)
    (125/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.107566008 seconds)
    (126/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.444361021 seconds)
    (127/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.108847464 seconds)
    (128/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.086130819 seconds)
    (129/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.183916592 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.468724608 seconds)
    (131/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.619726239 seconds)
    (132/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.428866449 seconds)
    (133/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.345522736 seconds)
    (134/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.28164127 seconds)
    (135/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.354095627 seconds)
    (136/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.083205986 seconds)
    (137/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.071696157 seconds)
    (138/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 5.138301987 seconds)
    (139/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.406263678 seconds)
    (140/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.504709153 seconds)
    (141/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.429456305 seconds)
    (142/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.955232313 seconds)
    (143/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.224670972 seconds)
    (144/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.149828063 seconds)
    (145/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.455255319 seconds)
    (146/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.085262672 seconds)
    (147/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.099363272 seconds)
    (148/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.076161097 seconds)
    (149/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.096889698 seconds)
    (150/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.614512186 seconds)
    (151/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.198554755 seconds)
    (152/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.233009758 seconds)
    (153/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.075569326 seconds)
    (154/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 8.784669357 seconds)
    (155/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.092180338 seconds)
    (156/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.074907058 seconds)
    (157/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.168339765 seconds)
    (158/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.072061078 seconds)
    (159/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.474186398 seconds)
    (160/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.40087006 seconds)
    (161/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.074670528 seconds)
    (162/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.128996609 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.225057562 seconds)
    (164/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.855087669 seconds)
    (165/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.26348598 seconds)
    (166/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.455320475 seconds)
    (167/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.300298888 seconds)
    (168/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.403105759 seconds)
    (169/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.071631159 seconds)
    (170/341) benchmarking ("sort", Bool, false)...
    done (took 4.863536699 seconds)
    (171/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.085090536 seconds)
    (172/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.209297847 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.364279096 seconds)
    (174/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.086978434 seconds)
    (175/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.099213453 seconds)
    (176/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.299121829 seconds)
    (177/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.510860266 seconds)
    (178/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.095511228 seconds)
    (179/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.095099948 seconds)
    (180/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.428608717 seconds)
    (181/341) benchmarking ("sort", Int64, false)...
    done (took 6.701476166 seconds)
    (182/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.230297799 seconds)
    (183/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.047115582 seconds)
    (184/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.087013668 seconds)
    (185/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 3.109615777 seconds)
    (186/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.57962202 seconds)
    (187/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.151556426 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.326033238 seconds)
    (189/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.255177972 seconds)
    (190/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.777647755 seconds)
    (191/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.085102544 seconds)
    (192/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.19334704 seconds)
    (193/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.612501015 seconds)
    (194/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.083623472 seconds)
    (195/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.586263837 seconds)
    (196/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.206172812 seconds)
    (197/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.556463931 seconds)
    (198/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.190328012 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.043786153 seconds)
    (200/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.908484402 seconds)
    (201/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.124360338 seconds)
    (202/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.272749729 seconds)
    (203/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.087096856 seconds)
    (204/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.087576913 seconds)
    (205/341) benchmarking ("perf_sum", Float64, true)...
    done (took 4.003708388 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.237247975 seconds)
    (207/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.296775157 seconds)
    (208/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.281727017 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.078268793 seconds)
    (210/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.612394321 seconds)
    (211/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.626625442 seconds)
    (212/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.234534356 seconds)
    (213/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.10166541 seconds)
    (214/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.275079998 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.210045242 seconds)
    (216/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.380464505 seconds)
    (217/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.473785565 seconds)
    (218/341) benchmarking ("sort", Float32, false)...
    done (took 6.748215352 seconds)
    (219/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.374478927 seconds)
    (220/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.088792609 seconds)
    (221/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.186146423 seconds)
    (222/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.449032521 seconds)
    (223/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.219498325 seconds)
    (224/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.25013292 seconds)
    (225/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.625885104 seconds)
    (226/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.246575094 seconds)
    (227/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.263849888 seconds)
    (228/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.246710638 seconds)
    (229/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.409047219 seconds)
    (230/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.20885051 seconds)
    (231/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.207646184 seconds)
    (232/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.250265255 seconds)
    (233/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.235948491 seconds)
    (234/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.404381748 seconds)
    (235/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.503095849 seconds)
    (236/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.012192534 seconds)
    (237/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.106926705 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.550419464 seconds)
    (239/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.686657551 seconds)
    (240/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.367295988 seconds)
    (241/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.09430525 seconds)
    (242/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.204640315 seconds)
    (243/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.607059217 seconds)
    (244/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.278015241 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.221412713 seconds)
    (246/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.091586121 seconds)
    (247/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 4.201877944 seconds)
    (248/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.212041116 seconds)
    (249/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.22334561 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.298194572 seconds)
    (251/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.427675285 seconds)
    (252/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.09425598 seconds)
    (253/341) benchmarking ("perf_countequals", "Float64")...
    done (took 4.902563973 seconds)
    (254/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.466075253 seconds)
    (255/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.926382822 seconds)
    (256/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.285413238 seconds)
    (257/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.240259357 seconds)
    (258/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.489297493 seconds)
    (259/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.19835149 seconds)
    (260/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.432340549 seconds)
    (261/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.105558391 seconds)
    (262/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.085027877 seconds)
    (263/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.251048395 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.079330549 seconds)
    (265/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.406439282 seconds)
    (266/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.590394017 seconds)
    (267/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.104985022 seconds)
    (268/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.212695954 seconds)
    (269/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.092133946 seconds)
    (270/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.560863861 seconds)
    (271/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.087111332 seconds)
    (272/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.577487447 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.086898466 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 5.033442445 seconds)
    (275/341) benchmarking ("sort", Float64, false)...
    done (took 6.875564865 seconds)
    (276/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.179360634 seconds)
    (277/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.197025256 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.209717625 seconds)
    (279/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.577584901 seconds)
    (280/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.125804308 seconds)
    (281/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.71445583 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 4.568295293 seconds)
    (283/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.402842761 seconds)
    (284/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.171508861 seconds)
    (285/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.187021302 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.09250868 seconds)
    (287/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.68538751 seconds)
    (288/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.083172348 seconds)
    (289/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.169610774 seconds)
    (290/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.203068851 seconds)
    (291/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.092952051 seconds)
    (292/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.231252869 seconds)
    (293/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 3.868464769 seconds)
    (294/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.402737417 seconds)
    (295/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.351529288 seconds)
    (296/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.243785517 seconds)
    (297/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.081981836 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.564252437 seconds)
    (299/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.822744585 seconds)
    (300/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.214598977 seconds)
    (301/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.088380366 seconds)
    (302/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.354816385 seconds)
    (303/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.388511346 seconds)
    (304/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.44698542 seconds)
    (305/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.091076905 seconds)
    (306/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.607351608 seconds)
    (307/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.214547567 seconds)
    (308/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.273827169 seconds)
    (309/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.095573178 seconds)
    (310/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.219104583 seconds)
    (311/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.217870483 seconds)
    (312/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.505595654 seconds)
    (313/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.803548984 seconds)
    (314/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.830647945 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.231707646 seconds)
    (316/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.997300279 seconds)
    (317/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.088856838 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.097977908 seconds)
    (319/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.413399092 seconds)
    (320/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.094319844 seconds)
    (321/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.608992882 seconds)
    (322/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.710566738 seconds)
    (323/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.327715522 seconds)
    (324/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.121775105 seconds)
    (325/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.138282613 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.504304476 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.244764076 seconds)
    (328/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.133925487 seconds)
    (329/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.10054527 seconds)
    (330/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.55839418 seconds)
    (331/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.103301142 seconds)
    (332/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.959333064 seconds)
    (333/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.51642579 seconds)
    (334/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.331051526 seconds)
    (335/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.092502724 seconds)
    (336/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.215923753 seconds)
    (337/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.523338496 seconds)
    (338/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.100586158 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.572434728 seconds)
    (340/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.982969294 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.26747761 seconds)
  done (took 1206.690085225 seconds)
done (took 1208.830775171 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.10458959 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.084258525 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.662331943 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.107085891 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.084193166 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.086342249 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.632008758 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.125302221 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.096408309 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.633351008 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.101167548 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.086415449 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.100510725 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.106571924 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.094213628 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.101519721 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.093845183 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.114115267 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.105086424 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.090925256 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.168159731 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.092999471 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.088388295 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.132133072 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.084996027 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.095434568 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.1077897 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.168334633 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.170560295 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.090303189 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.096307967 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.486526783 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.150690607 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.093540065 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.09229854 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.095326127 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.089424714 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.094227172 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.104533434 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.097082088 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.08995331 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.101363951 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.095063224 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.087290001 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.088877922 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.09038288 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.089863764 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.190066865 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.098635953 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.494816867 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.16337525 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.10534633 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.170263071 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.089993066 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.107361699 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.091262859 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.170402422 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.09240827 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.093301367 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.504948181 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.206195594 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.099712075 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.491575716 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.164742016 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.102842899 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.105107317 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.09270214 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.108410876 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.486358848 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.689953226 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.129047394 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.112258933 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.091538387 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.089941482 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.101326653 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.647920052 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.107278945 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.766453849 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.122018848 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.097775185 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.098711819 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.094174351 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.09057103 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.100768637 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.112241032 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.088969962 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.094886582 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.092556828 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.105145898 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.490209761 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.152876384 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.663848934 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.10172388 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.113018947 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.111219589 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.770943659 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.125058733 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.115316475 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.089369044 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.487686957 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.141305059 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.116889493 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.111833899 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.098158938 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.190259439 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.109715532 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.1188485 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.099239132 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.112771279 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.100397365 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.093465407 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.107139815 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.112929109 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.10578478 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.105195037 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.09803066 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.103647088 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.096521351 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.118398635 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.102790034 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.100498655 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.113760851 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.08986601 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.143979089 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.111810694 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.131636048 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.18440422 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.09753471 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.191039343 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.09770804 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.124806497 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.090417204 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.499529004 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.150437472 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.119033025 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.094530958 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.118036066 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.118648908 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.100150026 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.094956735 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.100775015 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.096918098 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.143726704 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.090744029 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.125884311 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.139975589 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.106970999 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.097003993 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.115594695 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.10775648 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.121302638 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.104312517 seconds)
done (took 330.524387159 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.145141046 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.545822493 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.156930248 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.098848483 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.161890207 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.15079187 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.093364257 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.090361068 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.093381828 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.509339103 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.092201912 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.092568016 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.535315572 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.098280154 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.144925192 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.091047228 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.094612193 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.354254166 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.100220555 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.157271246 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.106064984 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.095202673 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.095463131 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.50836656 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.094246131 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.101918058 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.161460269 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.0896673 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.358247904 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.102509325 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.113014925 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.356800124 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.154146575 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.107426779 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.093673929 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.096619482 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.170628938 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.106669539 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.141039815 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.146556825 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.157277061 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.100217968 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.102861398 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.12713542 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.103234768 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.090601356 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.093242002 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.095544491 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.092144842 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.095579554 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.349352857 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.092008181 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.096630747 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.093234148 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.098697784 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.094100062 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.091360617 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.091116019 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.161400558 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.091925255 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.140261162 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.51094734 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.536859071 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.097070382 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.109259435 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.106546641 seconds)
  done (took 165.843799683 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.172697851 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.192032748 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.185797618 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.095375575 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.155010967 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.175825699 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.099403098 seconds)
  done (took 17.095129653 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.104379389 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.09532906 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.123021349 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.133011691 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.091314876 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.265428449 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.107746927 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.091690413 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.11899074 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.092290344 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.466854018 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.117642743 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.095915415 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.095419794 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.104248969 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.137794061 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.095601902 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.090175859 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.198684645 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.172330648 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.092576874 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.095317225 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.129017674 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.10806714 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.098066356 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.09476078 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.096913683 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.100383436 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.093612844 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.09555164 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.095848959 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.107810074 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.094309171 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.089720192 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.096116055 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.094655349 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.092262214 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.091732452 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.092700161 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.484659899 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.09473997 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.093323594 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.095100184 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.093669045 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.094695118 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.119462982 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.096758769 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.093610907 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.097315309 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.094960488 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.135222493 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.097538083 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.096217422 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.095530455 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.135199978 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.094004009 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.094548872 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.095592621 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.09966532 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.093968876 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.098003209 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.169499888 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.125559365 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.103806693 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.133135594 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.148932216 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.096041529 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.091828977 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.097200071 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.125015196 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.095242128 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.122688603 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.09397758 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.186033419 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.095735353 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.275649481 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.12050439 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.104865526 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.099217253 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.067842971 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.107369959 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.096565309 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.096749902 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.10262735 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.095012336 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.096676643 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.096515308 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.095407229 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.10679345 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.099328123 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.152910856 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.102205853 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.107394839 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.190874945 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.09693113 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.205928546 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.128036152 seconds)
  done (took 210.597368514 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.137522081 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.097702065 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.112082502 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.098110721 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.096854078 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.10447898 seconds)
  done (took 14.667627182 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.1047797 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.101890557 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.096494523 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.104378846 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.097628346 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.100069216 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.119488616 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.100439804 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.103213162 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.098155704 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.098726661 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.100366402 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.100491182 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.097078969 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.097167509 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.101287391 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.099216847 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.098352151 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.099567045 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.099457922 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.300820523 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.097938606 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.095952913 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.10007226 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.103417544 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.098954176 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.109650061 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.095957373 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.103462475 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.108538236 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.103727746 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.102194156 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.10223863 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.107736396 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.104232569 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.103906702 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.106945536 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.101236134 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.097231892 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.106616285 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.100680074 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.099379045 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.097967832 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.101833643 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.103921788 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.108104339 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.108322332 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.126817929 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.112889732 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.102018011 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.10076787 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.099319589 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.101079966 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.10118007 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.105281119 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.108825395 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.105371261 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.098023434 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.101031263 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.105236535 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.107673555 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.098539542 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.103603176 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.121308802 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.101939593 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.100697628 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.106118279 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.111493481 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.102143815 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.10156063 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.100488527 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.099487975 seconds)
  done (took 153.633284012 seconds)
done (took 563.857865231 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.119368159 seconds)
  done (took 9.142522695 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.366468159 seconds)
  done (took 9.525834975 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.400987589 seconds)
  done (took 14.435114333 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.111200201 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.133332134 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.134118282 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.107910106 seconds)
  done (took 30.534510381 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.153921917 seconds)
  done (took 9.188063593 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.118359635 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.105176623 seconds)
  done (took 16.281223628 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.174145577 seconds)
  done (took 9.215738516 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.521922209 seconds)
  done (took 9.586407787 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.126072267 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.129233177 seconds)
  done (took 16.313054857 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.112339239 seconds)
  done (took 9.15011705 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.642405451 seconds)
  done (took 10.755918772 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.115075978 seconds)
  done (took 9.176516833 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.157624753 seconds)
  done (took 9.19604403 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.835262597 seconds)
  done (took 9.869110972 seconds)
done (took 174.412892954 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.116227201 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.106637594 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.105792152 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.123360109 seconds)
  done (took 30.476178856 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.145989523 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.151068983 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.148481368 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.165225715 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.133806035 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.130132282 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.145264569 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.140991055 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.134891783 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.14878085 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.142515278 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.148540773 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.159489966 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.143057256 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.143357117 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.147331517 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.14904696 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.141607262 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.136150746 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.14493048 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.15482144 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.147254319 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.112517154 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.104968332 seconds)
  done (took 53.4795926 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.315247426 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.198254107 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.271676625 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.156596717 seconds)
  done (took 10.971277346 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.104283812 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.177837381 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.162005724 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.164309208 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.160951909 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.272159293 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.162818752 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.297085065 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.277796275 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.254632585 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.109705696 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.125407275 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.123676719 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.161772129 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.269728137 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.101013734 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.103100041 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.240510319 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.177288927 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.344597116 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.103309449 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.167544127 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.162675173 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.165022237 seconds)
  done (took 54.420594095 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.104599262 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.116358893 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.114111899 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.105632782 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.108929187 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.10407136 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.115039868 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.103624374 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.150364902 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.108726201 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.10903419 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.11365599 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.123672381 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.107751641 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.114852588 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.145692718 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.118743111 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.107918078 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.104945877 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.115925784 seconds)
  done (took 44.32459886 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.105046703 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.346067012 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.3806404 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.267030635 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.10361224 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.108436889 seconds)
  done (took 33.341646172 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.119586434 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.127931816 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.113296575 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.143330142 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.173361058 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.118860928 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.196172789 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.324972856 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.119729426 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.19072727 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.135371066 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.115256815 seconds)
  done (took 27.91713711 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.104288452 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.114056091 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.108602681 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.135368389 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.129664976 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.128558381 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.145066309 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.121850861 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.123692931 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.13282717 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.116504758 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.122639502 seconds)
  done (took 47.515293732 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.296713485 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.247678609 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.402811006 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.801486008 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.618962833 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.171434313 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.502335431 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.61847358 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.191289428 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.223893818 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.59136847 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.13901818 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.615222893 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.067715807 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.107269704 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.384161163 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107150983 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.582820797 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.530408058 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.175331158 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.111188582 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.107608372 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.115231972 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.626535369 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.414057968 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.104763436 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.278935619 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13321614 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.107358048 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.332174595 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.105601754 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.134908409 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.276816321 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.404372799 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.625018413 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.181383872 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.18926252 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.133606648 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.1608499 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.142456438 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.120260129 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.122936923 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.633136205 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.133167388 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.357620237 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11082026 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.126653374 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.69992102 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.064607012 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.297197605 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.285198135 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.321869428 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.151634685 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.825621019 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243687546 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.396303948 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.121582495 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.200146772 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184143794 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.217754801 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.287343 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.18771709 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.302647728 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.068477199 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.674551887 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.298050291 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.11119282 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.114809091 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.386159775 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.385720262 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.195492988 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.285782361 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.892772913 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.113997901 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.11467955 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.153825178 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.225642515 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.108158043 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.839664494 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.620649415 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.068026034 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.212233955 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.71312979 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.119781354 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.115876711 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.125157555 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.697496604 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.061077708 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.195015543 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.238142291 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.454953633 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.11679548 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.112295747 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.138104765 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112184081 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.064820138 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.762800825 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.189584841 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.06091695 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.664324176 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.109218813 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.073829168 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.113983132 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.135898642 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.478334901 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.148071104 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.863017711 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.752772186 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.404741224 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.703533942 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.12055202 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.928900059 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.201691431 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192378932 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109926082 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.861368032 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.166572465 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.285249471 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.291127878 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.109798453 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.067019976 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.125327835 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.27779127 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110874554 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142567468 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110624284 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.121028208 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.109986558 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.12002201 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.170770294 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138178861 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.60827733 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.224727165 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.112575847 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.069120011 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.124730482 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.589764356 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.194048095 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.165838386 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.552911299 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.704172903 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.589345468 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.081130611 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.870543575 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.566902549 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.213408278 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222649379 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.689410948 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.260356917 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.213681947 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.113505897 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2816965 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.128418853 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.119774376 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.11098653 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.769850896 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.822188673 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.165607973 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.111577582 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.081396252 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.149649971 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.328055351 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.816539863 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.154981924 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.124336895 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.198928174 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.258201526 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.112081653 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.071337775 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.444921758 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.323929875 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.613721431 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.511954618 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.808896676 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.203752344 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.130965358 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.285005365 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.199950196 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.772045494 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.318609025 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.426566875 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.5942787 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.111617211 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118307366 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.262280007 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.512376688 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.140388225 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.852784438 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.148162926 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.610270186 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.153655075 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.57765758 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.070828301 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130760179 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.541645699 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.112136283 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.668169661 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.398130063 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140363982 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.117678844 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.120685935 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127523831 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.416500709 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.235399288 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.194129388 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195095128 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.071575681 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.061461025 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.171240773 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.120314154 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.117577671 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.496799908 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.090867182 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.136516718 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.118213186 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207170176 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.977587525 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.820750619 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.126629509 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.123442131 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.602541981 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.127984872 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.137360993 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.139067401 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.046285477 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156127157 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.252516324 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.249693359 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.640216876 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.222198369 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201544157 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.138219337 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.131999333 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.38986571 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.132513534 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.381228893 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.600549304 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.721388332 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.807587419 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.219062401 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.797982029 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.156113078 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.131837136 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.749548388 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.160226107 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127160487 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.28778376 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.814657178 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.313384366 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.279732838 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.206060019 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.120429219 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.566289549 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.705224564 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.163292246 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.04515453 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.237279303 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.122274672 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.29293963 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.878229192 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.12449919 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.122365222 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135825612 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.311264478 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.286073368 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.488124547 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.621180781 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.459158622 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.074733188 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.131872468 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.207923463 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.407265856 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.121346431 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.160670899 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.727067815 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.81790768 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.906323121 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.654066618 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.423762592 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.84690172 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.571323813 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.218393697 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.135663178 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.046483991 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.317168822 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.082108107 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.256018344 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.07323449 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.938490892 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.419579224 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.148282132 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.580243655 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.166214814 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.63900891 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.486556274 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.259230691 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.240792667 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.16023164 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.130794282 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.193795176 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.127219972 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.127048632 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.24754846 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.13141337 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.584669942 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17683242 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.171011357 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.159789942 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.817190238 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.1539301 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.129110594 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.590290465 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.152907158 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.253415636 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207232383 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.226384417 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.207035799 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.124403646 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.103498211 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.695706043 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.586383561 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.207999972 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.667954212 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.178180049 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.873235263 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.125684018 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.29976959 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.135412474 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.815679094 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182046029 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.48451285 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.121736599 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.316428585 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.407241648 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.212472682 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.132870769 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.07704615 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.699730107 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.189244545 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.606996882 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.135824802 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.891646959 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.652663787 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.245266577 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.688711598 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.10893938 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.128579162 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.605936953 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.810709056 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.91023455 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167733667 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130834838 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.342755149 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.320233531 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.300794995 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.829816373 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.143120289 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.153058119 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.298053018 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.249478445 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.071932858 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.65817612 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.878800484 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.411969793 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.147297228 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.294878697 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.336116321 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.353918881 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.170025753 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.207609672 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.876136968 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.590137727 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.226084433 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.080797759 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133701806 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.83060346 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.864261557 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.213599533 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.397469167 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.525307618 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.221620929 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.200482591 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.156112226 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.710178616 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.817727549 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.805187583 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.430212059 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.601484503 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.700092465 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.86685484 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.88091938 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.301687161 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.244089016 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.498649342 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.034233704 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.501657536 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.414044821 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.140481978 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.079460207 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.299413722 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.131369631 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.202120024 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.828624475 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.421726483 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.262914275 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.221229263 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.714551278 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.213815606 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.159909072 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.350846241 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.155924217 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.151981011 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.131639412 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.654734488 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.512597255 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.14765527 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.091845943 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.89346606 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.107363649 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.303566574 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.200343282 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.195970716 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.947726653 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.288411118 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.293318161 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.653738394 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.254342462 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.177497947 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.081453421 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.247107611 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.110534277 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.83197129 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.923611181 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159311808 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.152660993 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.298741168 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.11520291 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177590117 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.136538375 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.410032245 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.808057826 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.59254723 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.300313718 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.460800477 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.410100116 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.140394368 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.239974036 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.368502501 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.081279837 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.190230354 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.111607574 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.194757751 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.209170528 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.132040661 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.156219414 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.368616305 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.323622872 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.289381004 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.290298741 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.142044122 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.155481978 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.323214457 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.273253742 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.139255307 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.143891285 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.227034326 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.299495545 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.131491063 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.111394541 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.30550477 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223419267 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.517035522 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.212964811 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.722923395 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.140149772 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.12890682 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308129186 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.637888974 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133440734 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.256838245 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.202774656 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.130615964 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.590228862 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.79426513 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.302922558 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.815801524 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.158771861 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.183153459 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.185147966 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.139714843 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.139899642 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.728237502 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.507487352 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.134210159 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.589729883 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.210450245 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.143770845 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.880119219 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.614487944 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.13833846 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.952043747 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.211900851 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.620738773 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.742803512 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.141242291 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.271792708 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.142981907 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.088182299 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.136936365 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.155835647 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.642693323 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.150400629 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.654384278 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.348506481 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.295393751 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.141693226 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.136927369 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.154987487 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.306732605 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.723062303 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161894681 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.391946361 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.300773767 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.13770379 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.663347909 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.815323938 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.280247813 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.188344497 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.171329197 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.475473212 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.969873553 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.204067978 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.677289975 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.282103203 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.139392355 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.374142723 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.386195985 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.137329719 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.324520778 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.135752469 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.504424036 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.438295639 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.690526471 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.237995516 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.171988086 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.491528558 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.152622591 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.659213177 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.584999279 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219360123 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.136554663 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.152996696 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.138212408 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.240510044 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.699761832 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.302982331 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.33433011 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.376796242 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.655491205 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.140110221 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.089656224 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.137619926 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.163907554 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.149413811 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.088372314 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.246070319 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.995115053 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.335765947 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.483140175 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.091765957 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.330475266 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.126385654 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.093107228 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.61806396 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.14568012 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.453561586 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.094239462 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.145390584 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.091700206 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.30521932 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.370732187 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.423800145 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.139154984 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.832155104 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.147361678 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.142471206 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.138989739 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.249366063 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.139465095 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.379989138 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.592022434 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.45300128 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.320084589 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.92295106 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.256828045 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.106887126 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186183357 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.951597293 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.691353827 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.325044239 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.333878532 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.946041417 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.118083411 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.66289807 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.163324224 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.846862484 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.145638896 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.143189156 seconds)
  done (took 2447.60500434 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.160786302 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.19728352 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.202472662 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.182568248 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.175659637 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.190977231 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.190817998 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.187020701 seconds)
  done (took 59.550840679 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.143792156 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.182333895 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.153671891 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.141757366 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.147566707 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.148003388 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.355997631 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.179817376 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.140093234 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.14789215 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.139248123 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.588872015 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.148894319 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.143596319 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.163738394 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.510401493 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.167553788 seconds)
  done (took 82.713772598 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.177141663 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.54809396 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.149243966 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.365243813 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.170169513 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.39097774 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.148540707 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.154566154 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.178810036 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.795837679 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.164295626 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.170697279 seconds)
  done (took 91.517138566 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.143645046 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.142565253 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.141727344 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.147737442 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.163900792 seconds)
  done (took 12.820717812 seconds)
done (took 2998.818713867 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.365443506 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.296684203 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.242281368 seconds)
  done (took 6.604230159 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.204674291 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.264789544 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.341177868 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.279045057 seconds)
  done (took 11.168495045 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.429849142 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.626015756 seconds)
  done (took 7.119958015 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.672172557 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.161333338 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.678947119 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.14854174 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.144443549 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.14986607 seconds)
  done (took 23.525167654 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.150255293 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.141345303 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.144343263 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.140166366 seconds)
  done (took 10.651541441 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.157868432 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.14071429 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.167232264 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.159472864 seconds)
  done (took 22.691023317 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.518804201 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.376599937 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.899081824 seconds)
  done (took 9.857534484 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.955289065 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.52213307 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.943996205 seconds)
  done (took 10.488679092 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.430622842 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.056890286 seconds)
  done (took 8.554752119 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.298306441 seconds)
  done (took 4.366280826 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.628885296 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.62503013 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.008517508 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.99932142 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.158002042 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.461159032 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.513150289 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.538010952 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.811021964 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.650043953 seconds)
  done (took 29.459951441 seconds)
done (took 161.434940423 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.155257916 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.637223676 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.334304274 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.323067133 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.242927747 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.339026117 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.212644056 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 4.080359874 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.757816018 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.747298526 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.834498521 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.238691821 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.218111405 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.526000387 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.204864658 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.513301935 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.561906906 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.134271578 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.372356879 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.04081183 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.217011202 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.412311863 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.512599786 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.40886928 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.557949232 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.287497707 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.351589437 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.516948834 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.64206604 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.351123382 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.292175086 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.308306647 seconds)
  done (took 186.399665682 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.143931759 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.147531315 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.150717987 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.149031153 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.921278196 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.14965086 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.153629027 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.166764767 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.014509539 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.009788388 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.151282986 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.908253429 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.153497761 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.148271837 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.150232958 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.151339072 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.092522687 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.151066179 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.152602603 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.147921695 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.150322559 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.791114349 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.148462512 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.775211886 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.094715696 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.170663619 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.14845332 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.147829739 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.155402842 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.148358434 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.148639517 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.147800056 seconds)
  done (took 221.322669777 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.147016904 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.151221218 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.150024601 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.152868512 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.150760265 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.152868232 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.153683031 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.152556233 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.153625684 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.150450766 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.154502619 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.151142335 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.153185366 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.167342672 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.154694234 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.156978991 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.15327897 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.171154567 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.15378325 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.148856539 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.149444916 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.151884946 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.150500772 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.155856705 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.153174064 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.154504851 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.153043843 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.173236965 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.15530231 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.152053385 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.157995237 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.151953572 seconds)
  done (took 231.034734454 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.45086048 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.151651875 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.150586832 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.525679445 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.154017601 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.151513035 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.505542535 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.448800449 seconds)
  done (took 22.621829757 seconds)
done (took 663.469205561 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.856293738 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.058173994 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.326394337 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.186000774 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.790717942 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.246408566 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.170949165 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.275160772 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.929685921 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.291057168 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.667170187 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.188277606 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.053068278 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.212972173 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.329384012 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.259981169 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.581636582 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.893840489 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.351200559 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.976829314 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.421807764 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.146610849 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.301863169 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.98118774 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.681462306 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.193894579 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.287861555 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.589703467 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.179755977 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.441690269 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.261101596 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.590547408 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.207200652 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.1840215 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.25599081 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.230489216 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.510487822 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.198521207 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.317337047 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.928092078 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.016519916 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.807666334 seconds)
  done (took 115.451373254 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.162313502 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.159362076 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.159407864 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.159971784 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.169068622 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.160054985 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.158743257 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.161212097 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.159643146 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.161366882 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.158761247 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.159317847 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.158333051 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.159919163 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.160822196 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.160393268 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.160679687 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.162824616 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.16206443 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.159093771 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.160405685 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.166414776 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.152574719 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.161301636 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.165026358 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.159918858 seconds)
  done (took 58.279510293 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.15268918 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.339977481 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.496715715 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.193967982 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.157314081 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.158261521 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.195238669 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.166617167 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.160181375 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.156864102 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.26384071 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.163770519 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.174228576 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.493834468 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.196018206 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.156595818 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.152009022 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.156429627 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.344961488 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.180298993 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.197932734 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.165239674 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.197039384 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.17839748 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.157800595 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.156530479 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.159002457 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.667091267 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.17257868 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.265885906 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.278983192 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.206170702 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.582899572 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.504655242 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.23448124 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.165502276 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.157080731 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.315553278 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.17612059 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.158362204 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.200023929 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.170136236 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.497986345 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.763625902 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.187412971 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.160605594 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.698809963 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.330243415 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.217436233 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.172961533 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.505562559 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.196493194 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.159060592 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.15826084 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.200924489 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.187679586 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.158971406 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.462305173 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.178278475 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.19755172 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.168283594 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.16271232 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.353030101 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.173918252 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.339039053 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.173995651 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.166778338 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.162611662 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.497785839 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.197569038 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.734402953 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.180476264 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.157011666 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.264457409 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.346403362 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.705091908 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.177754371 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.358334741 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.596908559 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.211664734 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.170411657 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.662878779 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.213045764 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.172056774 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.159623656 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.15921861 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.159417218 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.209548866 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.203191877 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.662771461 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.752183406 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.486506377 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.231219744 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.177943798 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.167907623 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.467947317 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.195164894 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.159870673 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.49978588 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.771567075 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.199167867 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.170290819 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.721987296 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.203971528 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.202624576 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.174632714 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.506867092 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.198800037 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.214944638 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.161507769 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.171652817 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.163520613 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.203844612 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.190357132 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.163402344 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.718040213 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.339204134 seconds)
  done (took 268.958318659 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.162950768 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.164144743 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.165752116 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.163198927 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.165470125 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.164383602 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.162164321 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.163576121 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.168486942 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.158518604 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.162629361 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.178958583 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.164228861 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.176912416 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.19147785 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.164828629 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.777549321 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.167201476 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.166175539 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.17318096 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 4.001886208 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.171320584 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.174289546 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.171837811 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.170324677 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.173520096 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.169858411 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.192527741 seconds)
  done (took 176.287333517 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.164311335 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.232579473 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.178640302 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.236422856 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.17873015 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.16328114 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.191969584 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.185169008 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.173084723 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.164715729 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.164882075 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.203335164 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.199918208 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.28119425 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.21005198 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.207839212 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.275641477 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.177978695 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.165708896 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.165826536 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.233259118 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.187311367 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.210168479 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.245810102 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.181804576 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.234667553 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.184245237 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.163758003 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.167562962 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.28815069 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.190587224 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.206139128 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.214501531 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.192499845 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.297335012 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.311560238 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.279973961 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.212737931 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.172215168 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.166925769 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.163851668 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.171144885 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.234994196 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.179428108 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.16902259 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.321850459 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.192745347 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.166988067 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.208265059 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.164645738 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.181166764 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.187738108 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.213008134 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.309443482 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.233414018 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.203496574 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.197314387 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.193551102 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.185135676 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.26983727 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.186571216 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.292095406 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.191045605 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.168472855 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.172096413 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.171765878 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.237531675 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.219974569 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.274361473 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.180911597 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.268939847 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.250229207 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.183674584 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.16589966 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.168447964 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.241314028 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.282297658 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.246923105 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.25183835 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.216147183 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.190776553 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.16591351 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.17612336 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.206373058 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.176876037 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.297450907 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.293858666 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.180602833 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.1658006 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.167465351 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.166283183 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.204127956 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.249106544 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.224513313 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.292388231 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.219140879 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.21975604 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.175967034 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.186307091 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.174361665 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.208793332 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.176797059 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.185105421 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.636464927 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.222225901 seconds)
  done (took 234.439856655 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.564205381 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.234330501 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.251177675 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.446119088 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.585528408 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.414931526 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.223952417 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.237323917 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.226696475 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.372392451 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.275408409 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.34821915 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.223775142 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.197129372 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.2263746 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.22917363 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.263700636 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.59182832 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.346680433 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.136696757 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.227146751 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.535261141 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.553762006 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.666500088 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.271749799 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.697439918 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.877135329 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.335395079 seconds)
  done (took 71.660835627 seconds)
done (took 927.157462533 seconds)
SAVING RESULT...
DONE!
