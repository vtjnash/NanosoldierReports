cset: moving following pidspec: 675305
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.752468455 seconds)
loading group "shootout"... done (took 1.150298389 seconds)
loading group "string"... done (took 0.656170509 seconds)
loading group "linalg"... done (took 8.526931056 seconds)
loading group "parallel"... done (took 0.160847779 seconds)
loading group "find"... done (took 2.846452672 seconds)
loading group "tuple"... done (took 2.044518974 seconds)
loading group "union"... done (took 14.371140809 seconds)
loading group "dates"... done (took 1.421903783 seconds)
loading group "micro"... done (took 0.211172122 seconds)
loading group "simd"... done (took 4.637976228 seconds)
loading group "io"... done (took 1.36772921 seconds)
loading group "random"... done (took 9.608275802 seconds)
loading group "problem"... done (took 1.652702073 seconds)
loading group "array"... done (took 24.794561838 seconds)
loading group "misc"... done (took 1.883685017 seconds)
loading group "scalar"... done (took 42.155403876 seconds)
loading group "sort"... done (took 3.232290696 seconds)
loading group "sparse"... done (took 12.798762078 seconds)
loading group "collection"... done (took 18.240698474 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.437534864 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.112542162 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.160694519 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.110289398 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.229766675 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124366267 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.12692142 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087203105 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.222695339 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140356005 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.136468688 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426425815 seconds)
done (took 5.732463317 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.305259155 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.239698966 seconds)
    (2/2) benchmarking "String"...
    done (took 0.162322284 seconds)
  done (took 1.553961617 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.090818615 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057431034 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06420322 seconds)
  done (took 1.363306358 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063321409 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138244183 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.063665349 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.063760448 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.06411612 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.063764068 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063532787 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063375277 seconds)
  done (took 1.673676095 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071526816 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.064950493 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063777727 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065093665 seconds)
  done (took 1.412264979 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065427402 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.117818315 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06230486 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062149418 seconds)
  done (took 1.454953367 seconds)
done (took 8.99261352 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.158262481 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.775721942 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.850712659 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.144139238 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.310771546 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.343060646 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.120019472 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.201908114 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112687584 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.07466563 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.149965859 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07962339 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.482060902 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.474594378 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070844195 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.184750504 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.625108099 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084403341 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.115184998 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.252126735 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.08096076 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.08248667 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087742902 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.070905132 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.160131182 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.176581455 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.628396504 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098250381 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067706541 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.193344251 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069722123 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.073810389 seconds)
  done (took 10.58833651 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.114341946 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110907532 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066095216 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.101475769 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092129858 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.06785499 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072706282 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066098096 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.084917936 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.130865994 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088851145 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.121662444 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065852618 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.066960227 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.0971377 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.161542502 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081959629 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079892509 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066296829 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079245153 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.093050053 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07799468 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076215243 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.075629166 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.112119486 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.134769546 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.089423891 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.10906943 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066399945 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077892615 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.095203926 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.107724432 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066733071 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06510738 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.108767675 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.084464544 seconds)
  done (took 4.438033482 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.025782191 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09311744 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.104832813 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096709948 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109809284 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.094663661 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.146573785 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120598885 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097572385 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072122152 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.174600295 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.669494569 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.090687117 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070372542 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.146379198 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.359460417 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.921296382 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07184484 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0672068 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096825115 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069234727 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.138922325 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065393359 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175635446 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.645572176 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072121173 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068591618 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096291781 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.188389105 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141270462 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093155669 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068022493 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.578926526 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065681796 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062567052 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.084396862 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091629151 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064698394 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.06559928 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.075999775 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063816442 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.116916861 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078733461 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.544471917 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.06844308 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.624267127 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.331001661 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072647932 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070735414 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100680684 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063497056 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066613375 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.62221965 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.149126327 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066085764 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.289140966 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069774933 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067296516 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067756283 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099133892 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066500016 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069066796 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073403099 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.084958401 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.015829827 seconds)
    (65/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.140789277 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.147753407 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.085558905 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068339676 seconds)
    (69/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.063574498 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.424378981 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076351579 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069044862 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070512718 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.096925271 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.136454222 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067135685 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066205815 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110330488 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.230549546 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090561678 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068531649 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065389394 seconds)
    (83/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.06275324 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06448236 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.581863885 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.983683293 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068728255 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066311862 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.507063238 seconds)
    (90/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063809446 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062370507 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064616684 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066888219 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.087617382 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065403054 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062042207 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.06319038 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101016129 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068012366 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.565800692 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068552763 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.497554291 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069505825 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099096364 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122146218 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066700001 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.103244015 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066421277 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06385402 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072301007 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064566515 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063303689 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068180993 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064515732 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065726484 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067478436 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067112845 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067070165 seconds)
  done (took 23.322041742 seconds)
done (took 40.53110811 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.395991168 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077920801 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.076784496 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.076197085 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.07621828 seconds)
  done (took 1.900575475 seconds)
done (took 3.201525345 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.254631317 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077425684 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06281339 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.203711927 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.08689865 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.177510885 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.217585979 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.16986106 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089709471 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088436344 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089063768 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.345136721 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.233622993 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.090268768 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.162245881 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.234692262 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091273905 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064212415 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089497262 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.091066711 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.090797718 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.063900176 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089351498 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.090624183 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.162835494 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089598803 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063764954 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.164564538 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.091894137 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.166841304 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.09158364 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.090813338 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.091648045 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.164568114 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.092484711 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.163862439 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063815398 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.091573193 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.092325929 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.096573352 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.093605677 seconds)
  done (took 6.366855677 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07681007 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079296802 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080596781 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059814865 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.068927873 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079228553 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.059968873 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.078641382 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099579525 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080084344 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079450406 seconds)
  done (took 2.140881749 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070547127 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079764866 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080836079 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059402652 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070435703 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080054352 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.059764049 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079568324 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082231684 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080417653 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081060962 seconds)
  done (took 2.058013865 seconds)
done (took 11.786727374 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190504977 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.088013775 seconds)
  done (took 1.493066366 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.257168582 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.508377485 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 6.083604277 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.124329759 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.102896459 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.117460165 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.238898736 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.099735982 seconds)
  done (took 8.923269255 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.097824958 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067645834 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.066923939 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.065666393 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.096539913 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.06551661 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066143183 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065262817 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.064908407 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065159325 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065115088 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067070846 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.064924853 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065591339 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066392741 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066396523 seconds)
  done (took 2.469046075 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.10031674 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.066776405 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.095743846 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.059714257 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069203637 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060279644 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068546101 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070388302 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.067834582 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.067721348 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.069116278 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.067594263 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.068677245 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.068594982 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.069591505 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.070128378 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071149364 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068037002 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.070190742 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071555873 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070925541 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072196327 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.072818438 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070342647 seconds)
  done (took 3.052057417 seconds)
done (took 17.171256896 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176088632 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072311517 seconds)
  done (took 1.476520357 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.094960944 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091643869 seconds)
  done (took 1.434367792 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072189642 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.057920379 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.073708421 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.066692516 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.058868105 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058602029 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074089003 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.058964302 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.05895162 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059685169 seconds)
  done (took 1.884538743 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06289781 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.064931416 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.062811348 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.061293033 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.063425192 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.059387261 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.061942072 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060151264 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.066420342 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.058968539 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.062580116 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080875352 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062237295 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.080502258 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062043772 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.062494582 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064267025 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.062337773 seconds)
  done (took 2.418377007 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061430701 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059632056 seconds)
  done (took 1.37079864 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064050018 seconds)
    (2/7) benchmarking "second"...
    done (took 0.058977949 seconds)
    (3/7) benchmarking "month"...
    done (took 0.060624037 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060468817 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060519789 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059299642 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059175285 seconds)
  done (took 1.672093842 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.428369001 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192276074 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.425620435 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068251189 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.081026014 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.267198385 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06287944 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066776034 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066733604 seconds)
  done (took 2.94302577 seconds)
done (took 14.45319918 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083409998 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.18132676 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.110667405 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.415946496 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.077488185 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.06500314 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.094815416 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.209151145 seconds)
done (took 2.502536889 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.28650304 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.205815565 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.255867299 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.14726353 seconds)
  done (took 2.867820417 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.419249404 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.167363815 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074579944 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065318012 seconds)
  done (took 1.991016931 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065502506 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069237341 seconds)
  done (took 1.395254286 seconds)
done (took 7.810349732 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072682416 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.087707504 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.058533626 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.064590943 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.060330834 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.060705893 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.060336261 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060321121 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061662928 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059049509 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.061013014 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.061459304 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060920857 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06050974 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060776215 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060901381 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.059997483 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.060428691 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06052355 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.060979779 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059432095 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061621659 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.060672846 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061351079 seconds)
  done (took 2.77749671 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079607326 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063075341 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.063741667 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063704443 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064382807 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.063994413 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.063983155 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.062926811 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064062081 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.062861692 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064244194 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065103051 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063095368 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.064585007 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063061271 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.064812666 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064159307 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063240845 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063332729 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.064730364 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06436798 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063394864 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.064983334 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064955846 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065289299 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065270079 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063929168 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064832109 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065051318 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065212896 seconds)
  done (took 3.214152071 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06699838 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057442382 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057457381 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067223601 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057036036 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057407126 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058113223 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057278449 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.057791899 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059329612 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058414977 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.057461603 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058266116 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057312483 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057346624 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.05786447 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.062586274 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078171759 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058002175 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.057558906 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062264043 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.0580472 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.057602842 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.057487064 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058023617 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.057954812 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058061783 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.05849458 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058358066 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.05892654 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058191651 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062824806 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064508179 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058668089 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068880144 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063442872 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058302627 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064877198 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059172227 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058036572 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058062091 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058128685 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058909831 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058535464 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068915583 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058737819 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059489434 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061694697 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058633493 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058211395 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058874935 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06044431 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06444845 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059653618 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058317869 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059573506 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058369318 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059020761 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058482716 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058881842 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058322 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062304985 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.05971094 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.05888059 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079217402 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059685881 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068908701 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059272135 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059163197 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062579473 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.058924633 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077469492 seconds)
  done (took 5.632489655 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.0719455 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067926178 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.075803791 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067097184 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061123112 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058397368 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06181232 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058445318 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067231722 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06170745 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058311599 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061192989 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067348754 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062718713 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060182375 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067443504 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062024636 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061083463 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.05839585 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062432626 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060069576 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062332556 seconds)
  done (took 2.691602253 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.143591255 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064005333 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106440109 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068009108 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066317644 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067496927 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064041148 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063866006 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064224153 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064648576 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064687069 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063977402 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066094165 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064386604 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064327211 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064115433 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064319137 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065367524 seconds)
  done (took 2.568817378 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076911888 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063321232 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089744699 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063244234 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.063465945 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063168187 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066846167 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067046209 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063503595 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064267047 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067268023 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063569007 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063325527 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063756711 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063391892 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.063582402 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063936314 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06482281 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067591898 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067035031 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066890445 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067539039 seconds)
  done (took 2.74340611 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078459103 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062606426 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078016168 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06375117 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057641094 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058105015 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064410015 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.06324434 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064508016 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062693272 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062865487 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.057932512 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.064941167 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063415405 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.066360366 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0635928 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063383825 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06344065 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062857036 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058049666 seconds)
  done (took 2.562309161 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098253563 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060293329 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059939145 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064481704 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060434577 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061458311 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076620809 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060623459 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060390304 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083924534 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060363265 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.0603305 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064889061 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063101322 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.060687755 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064920348 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064834917 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065011987 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.060866358 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06093402 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085661145 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061472927 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065989764 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061226999 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061185797 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061150387 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061288209 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.06447319 seconds)
  done (took 3.115148723 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065343697 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06136402 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061304281 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061858784 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061426804 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061200123 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062086234 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064447745 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061236437 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061501665 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061196545 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.06128528 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061282579 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061033342 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061540825 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061177777 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061164566 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061350564 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061384232 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061695336 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061934547 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06162271 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061571771 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061719505 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061810883 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061387313 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061658223 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.061776249 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061752579 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062310712 seconds)
  done (took 3.143914619 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072890482 seconds)
    (2/2) benchmarking "in"...
    done (took 0.06924139 seconds)
  done (took 1.432146475 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.06193083 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.074774218 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.056983856 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.069938644 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.065768371 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063214231 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066384356 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065988151 seconds)
  done (took 1.805405542 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.093242099 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.115162219 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059495292 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060324416 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.09095489 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126545858 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.101094643 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071869699 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073719634 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06287808 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060473472 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.100760732 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.058992252 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073256884 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060454559 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.068729968 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067021424 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078013829 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073076936 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058277856 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072983053 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060783363 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059716687 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.060877257 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061013305 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067760017 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076519602 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073291869 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069527961 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057899713 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079435021 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058592018 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.059770432 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069040381 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.092813444 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059229786 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097039927 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.05942429 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.063854203 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058633186 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071763318 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080792355 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074760553 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077689118 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060523677 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061230256 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058783204 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060665063 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063034033 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069042401 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058831959 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067058596 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058192687 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060287481 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070835143 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059637587 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064303276 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069129221 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073337778 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070302726 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072122151 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075134607 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068295232 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067421103 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.059691165 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079590131 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060667922 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072822903 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074738389 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060851698 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073520212 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059268229 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058308439 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059142972 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09399897 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060996701 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060398617 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059448114 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059683757 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061891101 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070981178 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065975049 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068426441 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064184983 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077998897 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070666377 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060656522 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068777997 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079605575 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064531306 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061217833 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078987339 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064776688 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060257449 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079752067 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071951681 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063530651 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062822846 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.066171297 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077197914 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.0636444 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060528197 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070857736 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063437586 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.251093068 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063671997 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067546093 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058873351 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070066477 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063832311 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059842475 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057938875 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063264259 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062448554 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.062306512 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07035226 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058488024 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07281427 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065069811 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072939794 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07368323 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068901268 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074349319 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058330527 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059704545 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076548881 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068566648 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059475858 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.07689355 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057749334 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.068911348 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.05734422 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059128939 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.067715471 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.05704682 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059434545 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.057821821 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063188331 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.05917132 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059759938 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064242016 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.06731887 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071393869 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059307517 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067611687 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058437181 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074314647 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.068544736 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063463894 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06146007 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059117282 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071222047 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.065825132 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068826198 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058893694 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.05982739 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059354748 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070892322 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069399882 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060905804 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067272489 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064129188 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059704135 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059354456 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060284274 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063328108 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062250826 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.059674044 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067509862 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068633434 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073939042 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066163194 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068983726 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059403512 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058900603 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060718804 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058601922 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064056187 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068854779 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074987373 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071172337 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.080774651 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.0595565 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069469408 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.06045088 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076857379 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073245207 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060576129 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064291795 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058182396 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06088204 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069276134 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071619116 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075499066 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076633882 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065848219 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065645798 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060256773 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076436901 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.06102185 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069934277 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070568481 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067940696 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061394794 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062849253 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070932864 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065710211 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061370467 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077164327 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068870701 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061081596 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076301442 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061644064 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072919005 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061109622 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065912344 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067257302 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064481861 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072516064 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.236396324 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058401715 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059272479 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074429696 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.059869817 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059455247 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.066855828 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.073939162 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063242841 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066987187 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069198169 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069545348 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063349818 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068506118 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.058867462 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.067924514 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060840424 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070018114 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.057941807 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076297032 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.056944629 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073518793 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058105792 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069237509 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058764753 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.067943274 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059412921 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075619506 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059561677 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.058852516 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070116484 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.056962867 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067663411 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057491683 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063575136 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064947092 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068023302 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059496988 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067791555 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059365876 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067758988 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063205797 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067414541 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068115024 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.06304882 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.057934674 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067702183 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070356879 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067421409 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060386034 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060348162 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059461051 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.068613956 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060070195 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060078293 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067855624 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064506371 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065652375 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061301258 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.060983497 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06120207 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068264067 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069078962 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080490806 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069040883 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067434602 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068941682 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058711186 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075356203 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059224486 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067100232 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058261006 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066073421 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069673829 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059408346 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078875813 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060501249 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067578127 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071898499 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068593313 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063444477 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077908997 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062197659 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068067952 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067733319 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064192712 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066561543 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06178117 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069084319 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069750496 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070753502 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060700911 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.06839528 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070262512 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062391122 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070825974 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062840985 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069729347 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062577535 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059841693 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065782135 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073111565 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066651916 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06687078 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061255748 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059765683 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061365855 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069618609 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066570458 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070845705 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078152661 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060636888 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06311518 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061377515 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065743738 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081170445 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.235088282 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068305287 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064233275 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.057930501 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.059761031 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060066729 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.05885777 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061120889 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057295918 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057799436 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069184465 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059446985 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.062784218 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058260706 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059161402 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069238299 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062435677 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058911722 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065768812 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058018529 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.06374083 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057233796 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.05931367 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06315526 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057481654 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06229534 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069148928 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075369402 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065518853 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067645958 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059456253 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067435109 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07418349 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065621725 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059271973 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.067915188 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057277249 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076863502 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068112488 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067259633 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068322352 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059289784 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075302096 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063145221 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068361957 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074609028 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060956051 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066427252 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058570382 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075144883 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064146361 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058450476 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067377072 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067456627 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065151309 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071071368 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.05959623 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067347908 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064256316 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063107159 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.060798325 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061949131 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.069092402 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.07595861 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060034015 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064562182 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067660811 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067988382 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06418327 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071727391 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068014393 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060750044 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060788736 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063294883 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060267174 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.071680851 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060485023 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.06542758 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064406355 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060585709 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068562382 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078210416 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072017426 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072076443 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061582849 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059169876 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078235853 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.063820273 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062686484 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067919943 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070154057 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073822608 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07055443 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078010881 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061499797 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067238202 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073865766 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061934722 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060744648 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065040104 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062530525 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070669353 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071164474 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.06896719 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06289753 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070836655 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075937416 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062739338 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066299935 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067750285 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062289866 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072990538 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070757697 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071032078 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063639095 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061822919 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065767463 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.229029946 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067852118 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069216368 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059707398 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065183253 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072282602 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066379936 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060981677 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057594111 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060741321 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.06771104 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.062961218 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057545838 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063194544 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062385146 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064848947 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.06762945 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063932062 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058431125 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075463505 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066652849 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067758259 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059523484 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059653213 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058793629 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057647349 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069680561 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057979427 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059695096 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063295753 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059485788 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076088865 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.06694748 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075272282 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059933589 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063524998 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.05775541 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067977104 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063157972 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058332975 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069091667 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057359608 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073961695 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070015155 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06383297 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058334737 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.064755745 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067495211 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075590686 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069988696 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069280393 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062583369 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.06913761 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060580677 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070360397 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.05857568 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.057946418 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069380084 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068214948 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071821627 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058917218 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069829792 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061110253 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.07224054 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.07239719 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.065056354 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063690397 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061848941 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069621288 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064452128 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069282379 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064549169 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076893457 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06022625 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070907718 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068905913 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070683284 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073779876 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073015042 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068705884 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060356729 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067535128 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068497836 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061055129 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065144704 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.06307795 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08218031 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.06135227 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.060990757 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074655654 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067577366 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060227165 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067362061 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06637766 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072230582 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06283657 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072189171 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067318158 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061923035 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066197017 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066082406 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059803992 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060404269 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060962135 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071878923 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065833415 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061362416 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081801507 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064324435 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.07190004 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074373835 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069652016 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063931985 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.06085838 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.220524112 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.073586367 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07467746 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062529144 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067509305 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.059740572 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068780125 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058053368 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067967228 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.06740944 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067322007 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057712345 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058383779 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073561518 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07404875 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063469752 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074459805 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067662275 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059176535 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080032391 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.067745639 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059729775 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070300755 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060426766 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057836037 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057483591 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059555924 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.069984003 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058072173 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060283848 seconds)
  done (took 41.659915794 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102578175 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060621046 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060940852 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058174279 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065231764 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059425877 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058260705 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059282106 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059311361 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060340165 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.05844593 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058809973 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064055521 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073188424 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065655248 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061751054 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058151472 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060026792 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058414754 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059465696 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064515651 seconds)
  done (took 2.714638958 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064697673 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.061958129 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061679567 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062234597 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06134923 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058787438 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06307622 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058576208 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06242802 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059166598 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06231869 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058455265 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.058744793 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.058774602 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058696407 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.05981655 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062192754 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061367364 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058332923 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061867648 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.05984654 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062442815 seconds)
  done (took 2.736237401 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062891468 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.058912108 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067636571 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.05765477 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057325823 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061074596 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058026706 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063014999 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063062351 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.062812103 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.06783719 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059993748 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.057979199 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064396737 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058068875 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.058996335 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102144591 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059130249 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059119017 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.05781362 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.060535443 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067662225 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.057815435 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058028855 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063107374 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061343397 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058600232 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061637151 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059288183 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063855718 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059719381 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.05820821 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068068818 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.06727907 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063256786 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063271563 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.059934034 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059191647 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058093686 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058210446 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067305648 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.059755515 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058628743 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060717644 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.06842371 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058745597 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058228774 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068335814 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058044564 seconds)
  done (took 4.420389963 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072586796 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108074373 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064713009 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.090868363 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070155135 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063456019 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064093162 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091152564 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059123052 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.05950966 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071028092 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.070767304 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060508027 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.061684213 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.063948988 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06061865 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061736613 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060274502 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063335445 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.060569536 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063456393 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066296412 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.07111769 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071096469 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.061941056 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06064919 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060676386 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062149497 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.070634356 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.063756988 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062252442 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063318628 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071850508 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.065304833 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061007089 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.060929119 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072032419 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061582643 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06144053 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060004381 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061146861 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062484035 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066568276 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072327646 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061524973 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066408297 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061411057 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060186471 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071769747 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.06150126 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.064762167 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072669305 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06248039 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064356291 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062711579 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071387859 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061761968 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060938919 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063850994 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071734943 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.059979001 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062119634 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072888395 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061738193 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064926855 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072781761 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067213922 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062752529 seconds)
  done (took 5.997773109 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070765839 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.092881263 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072304852 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073318563 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068565454 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068448273 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06835521 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068717806 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068131721 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.070925327 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068725739 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.132462845 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065517188 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.069715668 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.06831994 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.068348395 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069401868 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069146713 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069928281 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.0689879 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069054386 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073469265 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.068769292 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073326306 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073082257 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065679712 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.068693947 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.06886776 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073815507 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069101595 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07386551 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069438317 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069178987 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073697223 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073344509 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069399372 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060168194 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069319513 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069591931 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069391656 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066035795 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074442894 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069456842 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06604435 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069421325 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069869717 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074404946 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073774862 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070783175 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072514472 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069565785 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074392986 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069351412 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069488063 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074338354 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077008415 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074202231 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074418931 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069819069 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075373121 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074899117 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077671331 seconds)
  done (took 5.873337737 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075504572 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063632142 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.076321663 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.057942739 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058542403 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06846683 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058715211 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059023759 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064226517 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.063976606 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06542446 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067725024 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069343572 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066100552 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067603886 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069064324 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067372053 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067423375 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064213478 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06780391 seconds)
  done (took 2.737681462 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063273485 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063286236 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058480623 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073811596 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.058811515 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06621818 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.058779559 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058898632 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058810963 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058855123 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063882355 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063432445 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059132058 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066625484 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062273106 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066525924 seconds)
  done (took 2.393067667 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064286808 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.065849642 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.093213344 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060405586 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061496422 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.05919566 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059701913 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058397474 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060561169 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072186147 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059905019 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061438584 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059353947 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058718419 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.058730279 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061317791 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06042143 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059422946 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059363155 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.094776301 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068353574 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060419137 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.061854823 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060882617 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061529854 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.06750596 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061549079 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061641161 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059735383 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.061780651 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061361139 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070404463 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061556211 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063081431 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058766821 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060092518 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060154409 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062166972 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.061991156 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.059907176 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.05886903 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061419294 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060222411 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060437019 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061032279 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.061905913 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.060991625 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070705513 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061005575 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062123779 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060243881 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062373557 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06137441 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071677192 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062547267 seconds)
  done (took 4.859451708 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078646599 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063672657 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057766117 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057666194 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.062982584 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06424808 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064516495 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064250696 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064503065 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058044047 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064007464 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063754058 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064264237 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06418792 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064142993 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063707969 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058066676 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.063802613 seconds)
  done (took 2.557718562 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068401008 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063192069 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063404857 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059385801 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.059804305 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064222238 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058388949 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059747031 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060202897 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060001153 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06013674 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.059585757 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059519017 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060333032 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064040333 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060027878 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059470488 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058635417 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.05980062 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058083364 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063615145 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058727811 seconds)
  done (took 2.734469346 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.119224282 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.08253713 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.159411754 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078417839 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088297423 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070052737 seconds)
  done (took 1.997714921 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095395046 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096461415 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063588969 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063250134 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067269089 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065910176 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065879922 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066056828 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068941176 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071856161 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0661457 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069222936 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068865278 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07047344 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067417146 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068237958 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066466888 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066192112 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063824894 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07436011 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067023514 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069806164 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066666393 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066803177 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066880569 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071608738 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0698441 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072382908 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066565076 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069970003 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069029531 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066911138 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070052302 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072527655 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064282489 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069721459 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066820371 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074163288 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06956262 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072206817 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064277291 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06894293 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070496581 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070137027 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071348978 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067893157 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070769958 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067354107 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067465317 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07859651 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06911683 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072042336 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069034623 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070990903 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070454619 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078612461 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073266647 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072147219 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069712112 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073907523 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07251854 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069275242 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072373787 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073493154 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069786674 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074724285 seconds)
  done (took 6.045346151 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105452406 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064177392 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068752313 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071330158 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070804695 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066216172 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066340042 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066206533 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066373449 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064480405 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101865406 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066601897 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070746002 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070794787 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067339075 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066633772 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066441697 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071319105 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064447938 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078069055 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06702646 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071466511 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071390447 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071626067 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072437687 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068407965 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066736171 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066889147 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067585059 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067217654 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070380226 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067500489 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071802075 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064495649 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071541297 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06701962 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066742823 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070357687 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067374862 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069068823 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072097996 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075181921 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067543501 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068130932 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07347653 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067383387 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067321321 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064831792 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067159057 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064767085 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073130798 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073113756 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073294222 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072262822 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067597731 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067545394 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067462864 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068108615 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067817612 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069263351 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072504614 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067578203 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079173483 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067798772 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067628008 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072630049 seconds)
  done (took 6.063875751 seconds)
done (took 125.735147457 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.259036281 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.223078521 seconds)
  done (took 1.869114603 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074569669 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.268582896 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075801434 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.071802268 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.132380913 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.132064769 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.107469507 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070065792 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.071991336 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069550867 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.168560356 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.107802147 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07063337 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070016957 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.093401896 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069579489 seconds)
  done (took 3.072725447 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.121126644 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.2094587 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080185596 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067780999 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.150983553 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076333923 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071227522 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074508401 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075506318 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068855277 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.116820413 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082341464 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073145167 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074158723 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071016247 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073020959 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074002196 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076136026 seconds)
  done (took 3.056720229 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103671095 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.11152772 seconds)
  done (took 1.633859255 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160794768 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.108292247 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146367403 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.616968444 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.138946796 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.142400712 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.146272213 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.141875445 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.113070564 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.139986257 seconds)
  done (took 3.270603633 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106620341 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105281153 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309252995 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101189674 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080707408 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075034834 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072456482 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077175928 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072650906 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074197035 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120391963 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073003194 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.069970793 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122240269 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.096745393 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10459808 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069424646 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076763582 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078338094 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068924695 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073388325 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077672896 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.176130498 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076546034 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099115277 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073193141 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074641908 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072751616 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072656113 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076401855 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076789184 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099502536 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076366411 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08284153 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074297158 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.095317161 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069928629 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098041596 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072964034 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070842035 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073497939 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077324178 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070515676 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079480715 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073098584 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075632591 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.07839039 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069263514 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073478946 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072792625 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071071222 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074334626 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074385224 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075929249 seconds)
  done (took 6.112526451 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.122448847 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108973251 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067403597 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.116378158 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109354176 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068857199 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.124078816 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103803805 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.121284369 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067608813 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067553646 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066716206 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074269828 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078011445 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.118692485 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.112878234 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069903093 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068096864 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.111808317 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.11238847 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067266198 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124044935 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.114848561 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.116067842 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.070492999 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068972379 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066959973 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067938706 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075156593 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074818747 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067040756 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07704158 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.080578352 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.080298459 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068366145 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066956056 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066602667 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075109364 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076371902 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076636393 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074187378 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066691145 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070399272 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072044917 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069207629 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066361682 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076166403 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.07537112 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077338501 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068509999 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067894474 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066994967 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069203749 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075379518 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074338321 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075697102 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077782085 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068878606 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068142929 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068673744 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078415783 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075717908 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074987487 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068459125 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076462843 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067307151 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077370553 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.079940442 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068975951 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068690889 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067927054 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067796356 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068449528 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074013041 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074164377 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068159401 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069736522 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069501546 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077505688 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076535851 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06874396 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078200813 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069649217 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069680196 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069402802 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07004996 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.080048215 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079211123 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070757712 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070528208 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069973937 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070212893 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069071858 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.080098915 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.230052494 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074439006 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075095732 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06693357 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075159842 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073710211 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066644887 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072353522 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066084443 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066297599 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066165286 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072145712 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.071886848 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.073799824 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067387788 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06610969 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072850885 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075549447 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06635728 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07185036 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074621137 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.072413942 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.065708966 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075768422 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066651192 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07473249 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06617176 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073935488 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067421447 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072751988 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066371729 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066159946 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06695956 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075259474 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066624468 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066036024 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066280616 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.065967357 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072276129 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075945273 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067031369 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073166961 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074086719 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068675401 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076264605 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067041068 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075900888 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067063474 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067541156 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066351155 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077995821 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06687368 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067823061 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069753101 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076229748 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067092989 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076374194 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074641318 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067347167 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07694058 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075960368 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.073563779 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.076540399 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067867828 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067272056 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066891452 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067238688 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076769107 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077813358 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068682703 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067673186 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074560884 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.076774051 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.06715092 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07378538 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073651987 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074501766 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068024498 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067659428 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077548832 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079299704 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076411501 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.079086787 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07720012 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069326207 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076605607 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079281313 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068890428 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082183926 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068691713 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080991917 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.081213858 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077061498 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.081425966 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.238186156 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076852638 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075520512 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076824175 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066055374 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06624149 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072781826 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066407938 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066384285 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.071787647 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066591106 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068058406 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078528837 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066455517 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074689012 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066649809 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073626646 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066014567 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066711396 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077098846 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06617859 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066485077 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072852674 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066459028 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.071949156 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074817437 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072038501 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.065854006 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066227193 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076028999 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075788429 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066452621 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065896982 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06649789 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074320643 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073600408 seconds)
  done (took 18.433196486 seconds)
done (took 38.884108626 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170582464 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.11313464 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.224877911 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.206017805 seconds)
  done (took 2.237200156 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10122111 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.062937908 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.107052889 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.117021446 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.064226399 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.10375812 seconds)
  done (took 2.016942823 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.20376473 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.177825857 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.255255377 seconds)
  done (took 2.093022771 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367726637 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.15235443 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.259800186 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.514118605 seconds)
  done (took 2.850735858 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.136970136 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.133270598 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075762079 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.14709077 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082643526 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060489304 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.144698099 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067251091 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.096936769 seconds)
  done (took 2.469348285 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.141240585 seconds)
done (took 13.266804578 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.153463996 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.285461318 seconds)
    (3/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.361652759 seconds)
    (4/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.287202892 seconds)
    (5/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.153822942 seconds)
    (6/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.101090035 seconds)
    (7/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.271763554 seconds)
    (8/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.06825498 seconds)
    (9/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.329009149 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.127250429 seconds)
    (11/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.310926324 seconds)
    (12/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.200509422 seconds)
    (13/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.190801826 seconds)
    (14/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.173963671 seconds)
    (15/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.296066132 seconds)
    (16/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.085104081 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074624149 seconds)
    (18/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.129871816 seconds)
    (19/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.240863472 seconds)
    (20/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073825493 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.24956091 seconds)
    (22/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.085281259 seconds)
    (23/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.239085475 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.076746073 seconds)
    (25/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068318603 seconds)
    (26/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.145070117 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076435214 seconds)
    (28/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074249245 seconds)
    (29/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.089191032 seconds)
    (30/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.121175974 seconds)
    (31/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.139701871 seconds)
    (32/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.288658201 seconds)
    (33/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.07444049 seconds)
    (34/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065429365 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072662254 seconds)
    (36/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.072392333 seconds)
    (37/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.208489904 seconds)
    (38/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.111663666 seconds)
    (39/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.191233371 seconds)
    (40/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075663204 seconds)
    (41/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.127946515 seconds)
    (42/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.202983696 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.086162149 seconds)
    (44/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.214851957 seconds)
    (45/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.10927626 seconds)
    (46/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.220848725 seconds)
    (47/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.080237106 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072301881 seconds)
    (49/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.224543301 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.101443544 seconds)
    (51/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.089406067 seconds)
    (52/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.169537896 seconds)
    (53/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.149457753 seconds)
    (54/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.315406819 seconds)
    (55/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070795466 seconds)
    (56/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.06804639 seconds)
    (57/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.21672076 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.080254601 seconds)
    (59/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.151357492 seconds)
    (60/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.27784653 seconds)
    (61/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.069381824 seconds)
    (62/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.328256267 seconds)
    (63/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073946181 seconds)
    (64/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.199295772 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.084313236 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.070946948 seconds)
    (67/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.082435447 seconds)
    (68/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075196503 seconds)
    (69/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.076501369 seconds)
    (70/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.078846976 seconds)
    (71/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.072237279 seconds)
    (72/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076855109 seconds)
    (73/341) benchmarking ("sort", Float32, false)...
    done (took 0.137663528 seconds)
    (74/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.074982159 seconds)
    (75/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.228000795 seconds)
    (76/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.072328239 seconds)
    (77/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.06378544 seconds)
    (78/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066008163 seconds)
    (79/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.141164985 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.086558866 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071906699 seconds)
    (82/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.0681343 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090587251 seconds)
    (84/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064315624 seconds)
    (85/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.07134001 seconds)
    (86/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.070596958 seconds)
    (87/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.246908033 seconds)
    (88/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.171494019 seconds)
    (89/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.07389354 seconds)
    (90/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.089597939 seconds)
    (91/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.149225296 seconds)
    (92/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.162107833 seconds)
    (93/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.06495369 seconds)
    (94/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.196897765 seconds)
    (95/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073332635 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.150415721 seconds)
    (97/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.162105122 seconds)
    (98/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.126893308 seconds)
    (99/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.200546481 seconds)
    (100/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065443405 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.084279386 seconds)
    (102/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.210008556 seconds)
    (103/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.188347517 seconds)
    (104/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.065299012 seconds)
    (105/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.174838788 seconds)
    (106/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077360201 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.102716003 seconds)
    (108/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.173246551 seconds)
    (109/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.065614676 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071808038 seconds)
    (111/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.230450905 seconds)
    (112/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.211198372 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.12086438 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.088267414 seconds)
    (115/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.064782791 seconds)
    (116/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069909874 seconds)
    (117/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.064483446 seconds)
    (118/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064076172 seconds)
    (119/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.064616757 seconds)
    (120/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.224157616 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085625196 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064878323 seconds)
    (123/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065058276 seconds)
    (124/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071603421 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075633546 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070615141 seconds)
    (127/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064813261 seconds)
    (128/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.069481449 seconds)
    (129/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.065373354 seconds)
    (130/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.076091253 seconds)
    (131/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066205689 seconds)
    (132/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.063341504 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085949804 seconds)
    (134/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.150690912 seconds)
    (135/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.148847404 seconds)
    (136/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066767259 seconds)
    (137/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.176602819 seconds)
    (138/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065831596 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073873538 seconds)
    (140/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.0654089 seconds)
    (141/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.072054327 seconds)
    (142/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.199692243 seconds)
    (143/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.234781598 seconds)
    (144/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066515438 seconds)
    (145/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.151696412 seconds)
    (146/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066858053 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.205891588 seconds)
    (148/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075302913 seconds)
    (149/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067215848 seconds)
    (150/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.219515033 seconds)
    (151/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077585101 seconds)
    (152/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.067362396 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.24484424 seconds)
    (154/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07560492 seconds)
    (155/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.063944791 seconds)
    (156/341) benchmarking ("sort", Bool, false)...
    done (took 0.140303306 seconds)
    (157/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.072641213 seconds)
    (158/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.152367121 seconds)
    (159/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.084616176 seconds)
    (160/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.08531565 seconds)
    (161/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.072527828 seconds)
    (162/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.173673344 seconds)
    (163/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.07812027 seconds)
    (164/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.211446405 seconds)
    (165/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063752018 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070548612 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072892236 seconds)
    (168/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.07581929 seconds)
    (169/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.063671584 seconds)
    (170/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.142320497 seconds)
    (171/341) benchmarking ("sort", Int64, false)...
    done (took 0.065450843 seconds)
    (172/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.186183779 seconds)
    (173/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.0661021 seconds)
    (174/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.083690523 seconds)
    (175/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.145639778 seconds)
    (176/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.143482558 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.150438145 seconds)
    (178/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065955565 seconds)
    (179/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.071986096 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063120484 seconds)
    (181/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.064275044 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082128505 seconds)
    (183/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.064787972 seconds)
    (184/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.06411637 seconds)
    (185/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065701802 seconds)
    (186/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.189729388 seconds)
    (187/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070705259 seconds)
    (188/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.068370444 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072527791 seconds)
    (190/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.063535561 seconds)
    (191/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.196314969 seconds)
    (192/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266004496 seconds)
    (193/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.082478955 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089356955 seconds)
    (195/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.078501925 seconds)
    (196/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.062467793 seconds)
    (197/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.064401807 seconds)
    (198/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.064516758 seconds)
    (199/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.064919348 seconds)
    (200/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.193665038 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064625283 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086121851 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.163454306 seconds)
    (204/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066049475 seconds)
    (205/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.064928339 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.18489995 seconds)
    (207/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064896585 seconds)
    (208/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.064187971 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.155605708 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131097698 seconds)
    (211/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072285512 seconds)
    (212/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.069677103 seconds)
    (213/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074477287 seconds)
    (214/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.065408055 seconds)
    (215/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.06461574 seconds)
    (216/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.141762592 seconds)
    (217/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.064771514 seconds)
    (218/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151637292 seconds)
    (219/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.067989335 seconds)
    (220/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065721823 seconds)
    (221/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064770755 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062765313 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093434767 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109608423 seconds)
    (225/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068552015 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.189675247 seconds)
    (227/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.080258291 seconds)
    (228/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067392067 seconds)
    (229/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072322647 seconds)
    (230/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064642357 seconds)
    (231/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071606808 seconds)
    (232/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.066472592 seconds)
    (233/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085872711 seconds)
    (234/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089866617 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.100021913 seconds)
    (236/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066527464 seconds)
    (237/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.065740277 seconds)
    (238/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.064798534 seconds)
    (239/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066156999 seconds)
    (240/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069863775 seconds)
    (241/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067196923 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065087091 seconds)
    (243/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.065962862 seconds)
    (244/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.1569151 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.065953329 seconds)
    (246/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.176911301 seconds)
    (247/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074094713 seconds)
    (248/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06699605 seconds)
    (249/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.065922238 seconds)
    (250/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068904643 seconds)
    (251/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075887911 seconds)
    (252/341) benchmarking ("sort", Float64, false)...
    done (took 0.13999937 seconds)
    (253/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.06691592 seconds)
    (254/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095418371 seconds)
    (255/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.067332111 seconds)
    (256/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.067304593 seconds)
    (257/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079057857 seconds)
    (258/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077634398 seconds)
    (259/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.069423192 seconds)
    (260/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.261717401 seconds)
    (261/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.072638097 seconds)
    (262/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.177635733 seconds)
    (263/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064685057 seconds)
    (264/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071524854 seconds)
    (265/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066184809 seconds)
    (266/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065671788 seconds)
    (267/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068019146 seconds)
    (268/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089985278 seconds)
    (269/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.113787785 seconds)
    (270/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071415892 seconds)
    (271/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.085708232 seconds)
    (272/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070934866 seconds)
    (273/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.06837193 seconds)
    (274/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.064112023 seconds)
    (275/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.063712385 seconds)
    (276/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.065072994 seconds)
    (277/341) benchmarking ("sort", Int8, false)...
    done (took 0.146535445 seconds)
    (278/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.065277453 seconds)
    (279/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062129033 seconds)
    (280/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.070732317 seconds)
    (281/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.066268903 seconds)
    (282/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071207134 seconds)
    (283/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069684636 seconds)
    (284/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.064820357 seconds)
    (285/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.158901971 seconds)
    (286/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.07526956 seconds)
    (287/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.174171832 seconds)
    (288/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093454672 seconds)
    (289/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.062564598 seconds)
    (290/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.179900342 seconds)
    (291/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.064879486 seconds)
    (292/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.068082845 seconds)
    (293/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.065237259 seconds)
    (294/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.142370815 seconds)
    (295/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.065282055 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.119793123 seconds)
    (297/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063326344 seconds)
    (298/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.06999063 seconds)
    (299/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061838618 seconds)
    (300/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.06513928 seconds)
    (301/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.216527163 seconds)
    (302/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.075134428 seconds)
    (303/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.066582023 seconds)
    (304/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066761701 seconds)
    (305/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064739766 seconds)
    (306/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.062646904 seconds)
    (307/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.159218456 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091505329 seconds)
    (309/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.06509987 seconds)
    (310/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.062798149 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.14070643 seconds)
    (312/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.066544307 seconds)
    (313/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.083314309 seconds)
    (314/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.064844275 seconds)
    (315/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.082191728 seconds)
    (316/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073930527 seconds)
    (317/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.06452077 seconds)
    (318/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.076195153 seconds)
    (319/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.063949773 seconds)
    (320/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068705178 seconds)
    (321/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.071866309 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078329557 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064461689 seconds)
    (324/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.064714672 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.13176546 seconds)
    (326/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.065417644 seconds)
    (327/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064721683 seconds)
    (328/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.064621676 seconds)
    (329/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.064600824 seconds)
    (330/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.06659554 seconds)
    (331/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081025131 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064638498 seconds)
    (333/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064260913 seconds)
    (334/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065277795 seconds)
    (335/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070805117 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.087577185 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093316325 seconds)
    (338/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067476195 seconds)
    (339/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066621133 seconds)
    (340/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.063380542 seconds)
    (341/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085479321 seconds)
  done (took 38.747748342 seconds)
done (took 40.227796905 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.124931064 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077226821 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075089077 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.071727891 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075500186 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076365611 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076297358 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073240612 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077602074 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074410875 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.107284782 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063146974 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070554417 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.079617223 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.071829994 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078616901 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077905485 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.077836823 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064427106 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078621969 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089549598 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076378873 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072475634 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078214594 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064277257 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072274037 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12106536 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083867476 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069582013 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073396443 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071129502 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080513229 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071702193 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071119279 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073202767 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.068774602 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.07368441 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070195118 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.12125908 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069088632 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.06423311 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076558512 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071308893 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071755945 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073114679 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076914158 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069234869 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079217003 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063263259 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074762901 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12165316 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069451107 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068771183 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072407038 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069661021 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073474766 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068924737 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075410959 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069744497 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075612989 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073587853 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071719112 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063777625 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072467983 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071009628 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071182865 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062608616 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069260473 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063838735 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064018751 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063213438 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073311773 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071623084 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069161412 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063225471 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063989104 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063291415 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075695879 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071202766 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072937183 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064541395 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069323032 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068813436 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064495827 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070067226 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075600498 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063754504 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065898219 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063724339 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079168121 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070923628 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064588017 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076294899 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070003938 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069911393 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064458376 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063800904 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070589106 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.07275753 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064916379 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063356252 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070044084 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069319297 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074502483 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065978814 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071295734 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.0710718 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064457647 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074316519 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072583233 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075004187 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079165132 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075782659 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080281798 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066928068 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066205416 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077415696 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.22920524 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070258759 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071292364 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.06838887 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071090181 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063851793 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062286182 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068513881 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069085217 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063503463 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063569274 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063334666 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071532954 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070039529 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061983663 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.062868712 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072273928 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071524353 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.0623025 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062436298 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071416442 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063381865 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068613504 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068276802 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071724325 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063415255 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064449999 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062413272 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062532926 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062163813 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068141541 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068598611 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063597116 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071400059 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070069875 seconds)
done (took 12.702352589 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067864314 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10658382 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.118099742 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.112308577 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077071136 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065155642 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067631583 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083636199 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067251504 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089640223 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089085951 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.08534814 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.130506967 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062789206 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064160248 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06474346 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.06215288 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075917833 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.114096139 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088223469 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.106480854 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063934479 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079972521 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08422678 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.076955783 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083155247 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065929044 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066358611 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.068063231 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.081602036 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090162198 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064248354 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065331568 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083786194 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080460549 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073228658 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06532567 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071508372 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065407396 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064251603 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066738457 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083082516 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071438971 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071632614 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065654866 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065150972 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064501439 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071975222 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078484887 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070639533 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077258986 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.080818721 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06605509 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064392759 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062833215 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074142807 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065474185 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065325236 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065059097 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064374334 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065016477 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067220471 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069876584 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.074870249 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068549898 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.071837852 seconds)
  done (took 6.544083818 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083672126 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.09205656 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.077747932 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.077866195 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063553345 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064355471 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064399622 seconds)
  done (took 2.125174768 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068218172 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.105767679 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.113283405 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.114420928 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.123539456 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.113228303 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065686337 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097080607 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063752714 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.107476578 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.121170163 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.116304058 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067555886 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076539391 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064692761 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.116294658 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066672291 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072695683 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.113406591 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.118143342 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069176129 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.09513897 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078400276 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065616353 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.116130407 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.107835187 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067205218 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065614119 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067592458 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064694399 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066730875 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.093921736 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.109540046 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080329876 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065906001 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064775561 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.10654263 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06590684 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.10495993 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072081608 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.107302184 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067459938 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067536664 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064846605 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065937927 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.11140774 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.065901779 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064617123 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064311774 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.109209682 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064469162 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.108398365 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067503035 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070179063 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072080148 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07110684 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072386344 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065432688 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.111254759 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075297659 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067186725 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.121406457 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.120265691 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.107372231 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.122729817 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075167525 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111755047 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.108103887 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065224706 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065149109 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065822026 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.122039221 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069285056 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068446657 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070785596 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073297776 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.116102368 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.127208851 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.128799986 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.08144651 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069863608 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.06713089 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.239039248 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.123078628 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069497825 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065856971 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.066267959 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064151962 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069009324 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065877505 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.068975575 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064031401 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07445217 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066843008 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.06608256 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.114840994 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064372062 seconds)
  done (took 9.977926231 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069669644 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066690887 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065224534 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065053024 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065292532 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065079552 seconds)
  done (took 2.013098003 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092380447 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065381617 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077326743 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067860179 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086929824 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.110394093 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.109546678 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067174467 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081629912 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.0763372 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.110410746 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.111494679 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.111827749 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066446232 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.109353885 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066752807 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.110934806 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069875571 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077153853 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067406405 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079295581 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066903492 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067185729 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.118493502 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068431791 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066655913 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066415934 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.084803223 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076475009 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.06705437 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066905983 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067955691 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07521865 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067040837 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.112599191 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.074850446 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066019655 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070267519 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067595605 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067801786 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.114760559 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06724091 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069717295 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070661482 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.068990794 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075642546 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070616274 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069839955 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.112830505 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070530579 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070168262 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066159813 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067791627 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070473443 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074779582 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067222179 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070397669 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.112841813 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067234648 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.074905294 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066232453 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068388407 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067188359 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067759917 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071019999 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070707514 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075098991 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067459885 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067434872 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066214262 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070689104 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.06729368 seconds)
  done (took 7.189525181 seconds)
done (took 29.42812732 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.546606474 seconds)
  done (took 2.124415202 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.972199917 seconds)
  done (took 2.594240562 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.526861496 seconds)
  done (took 12.148624262 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.401127077 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.484556573 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.761360938 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.13972748 seconds)
  done (took 3.437428331 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.876445326 seconds)
  done (took 2.508153052 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239794053 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226323687 seconds)
  done (took 2.113876203 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.434899428 seconds)
  done (took 2.066820139 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.219424226 seconds)
  done (took 2.845081567 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.239216942 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.16334008 seconds)
  done (took 2.0348266 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.630195642 seconds)
  done (took 2.255145132 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.737493657 seconds)
  done (took 6.367127862 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.328292393 seconds)
  done (took 2.007228036 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.239364763 seconds)
  done (took 1.865644387 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.60656241 seconds)
  done (took 4.227498753 seconds)
done (took 50.233365057 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086478225 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083714972 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083352158 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078736735 seconds)
  done (took 1.934383286 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075957852 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068661943 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070842069 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071387011 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068537131 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070203895 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071023899 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.068327281 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.07007739 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068195787 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066324733 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.067859852 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070743628 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067632365 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070159821 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071835732 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067854818 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068146505 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.069703047 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067693204 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070464778 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067827883 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.065970318 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067344471 seconds)
  done (took 3.285293333 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079420999 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070167048 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.072724428 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068456281 seconds)
  done (took 1.929146963 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077562152 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074191337 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082201869 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087355166 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073708722 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074890749 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081530742 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081344015 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063235247 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.083971102 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065409396 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064392977 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064629149 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083388562 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080827106 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060412437 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061513223 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076287736 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.075656964 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077122108 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066130064 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063105997 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073713377 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074429178 seconds)
  done (took 3.401464674 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.08296749 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063490876 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.085007758 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088220371 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089591659 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063285963 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078403475 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.089967745 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125639297 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063407198 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072094149 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063350879 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102487063 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063384347 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079042959 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.107919026 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.110396111 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067081488 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096555484 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063732398 seconds)
  done (took 3.298328866 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078321889 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.06767506 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068281184 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063951752 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.073921654 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070231268 seconds)
  done (took 2.070361167 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069251035 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.065841394 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065289361 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069879422 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065479693 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065402076 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064920689 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064443596 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065451727 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065379999 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064833183 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065105985 seconds)
  done (took 2.425906275 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.216345234 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070766217 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068189131 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064081378 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065626293 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06463137 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078420296 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066544059 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082049567 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065128013 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065029452 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.066951392 seconds)
  done (took 2.608752888 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105604283 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108830675 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140918554 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112958865 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114068192 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092956561 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.164962317 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092536991 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.157881591 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.135481193 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115538782 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092925128 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086574635 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069009933 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098449603 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118796168 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137932721 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071169193 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111373746 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.216622804 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131423021 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.133581638 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146103389 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115215179 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090704851 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145381286 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095485945 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100955552 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123174803 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127891626 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118149123 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097196893 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070170043 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069274077 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149788136 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.107058017 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123088765 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.091826488 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105219778 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088741988 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108537425 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069676863 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083371193 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112737415 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085541952 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133784867 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093604702 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117576988 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082796813 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.313204715 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124611861 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137349204 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083886171 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103265082 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133904087 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108804793 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130636403 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103097734 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07935187 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115284531 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.10134534 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096380782 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104760614 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077580624 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173206362 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087723067 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109962336 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108570826 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.092546272 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093811704 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103955158 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133695624 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125765316 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.125640876 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139649385 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094981228 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120279787 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100062798 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.12803805 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1034349 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071698992 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121812846 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129358034 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100660141 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102565502 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132332573 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092057441 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076883907 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.100910298 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119790134 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080317697 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115047139 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080521099 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111249836 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139369422 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100065168 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114871281 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123453035 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.254529473 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150957438 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107488122 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071563078 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113728869 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109373197 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152008646 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092738293 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073990714 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098355732 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09989044 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149601046 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104302111 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077112237 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105835514 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135684234 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091003412 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.213029352 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093031749 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139308819 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109485307 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084926163 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07256481 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090174312 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117465433 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107531762 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110818541 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09289029 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.08327051 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085300227 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113984181 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092587664 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079300018 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112727989 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098444474 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073664864 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086728673 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075164938 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141657734 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077563628 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138033929 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127189871 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076554803 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107834855 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098672846 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109844555 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097425269 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119911315 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143100178 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.115634799 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091031928 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.095804001 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110930648 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.152574281 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.134691904 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.271042296 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075884145 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100605058 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110700895 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095702865 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123069019 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09296499 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103306519 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099635085 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136520507 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139770508 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095705063 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097820775 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103758811 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.11843828 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074089925 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151859199 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100261923 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115303328 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082172934 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137872458 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111065108 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087160327 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086127776 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098370895 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.102958679 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107141365 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14296851 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094933408 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071524595 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091945627 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143389491 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0759464 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10861276 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090067669 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091095263 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117784584 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.093671036 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080094005 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067378882 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128583162 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161192938 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.06954031 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115367254 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110381648 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103998246 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.123907025 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.06921755 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123546731 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145500651 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123611285 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151791356 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.340591768 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115687591 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115681642 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.11077114 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104858568 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077400755 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125331698 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131119218 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092400031 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088439986 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131101305 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116354797 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.132220881 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113168697 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115198411 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102142841 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105625443 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099580157 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100784845 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140385197 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120909559 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.123786401 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085816388 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104852464 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118893549 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135823721 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080580094 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141110834 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.08418835 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119375897 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077080923 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123114283 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.076651829 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.107719794 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078395885 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101310526 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068845953 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073406378 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143954885 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113361655 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109206917 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103685895 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.140406796 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.138963347 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078972217 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108588028 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118815795 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10326609 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120923416 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113540441 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.268255885 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09299494 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106142517 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083039426 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.07860248 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111742736 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090656543 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121037208 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083303514 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073700387 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135134232 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100761153 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091589199 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075969797 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103947889 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120465213 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090155475 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084250655 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115046527 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102869037 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137370324 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088944793 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.09456927 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121303347 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077966387 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.08941122 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.066942637 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.082941634 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.073877539 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.12736049 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074419713 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115470446 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067529133 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130105282 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08634529 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091750507 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100981895 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108950695 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127365913 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094002489 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139865956 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088318056 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119813854 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107379873 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094708268 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088642969 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103221384 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100816555 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126292317 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097090717 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125707137 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147442935 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104154533 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144995465 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09227444 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128226858 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113099706 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.30728934 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109563199 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163399399 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134245079 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108484877 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10880088 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073586347 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094198583 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101823952 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109139147 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168592671 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12191692 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070088394 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103880863 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092765564 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106601283 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10088386 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079451545 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140464557 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099351773 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085801955 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108269404 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.0883848 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102011426 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074080393 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099117379 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.105382539 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095028237 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09644696 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11738088 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129025716 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11192906 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143737004 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.09956314 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091079746 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119016369 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110660549 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108600439 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085165425 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085749188 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138337555 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122788754 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128423005 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102193544 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111107808 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115355694 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101675302 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12770604 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109589211 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.13433044 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083341971 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.079973307 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.243773838 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071449179 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121014428 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10463315 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108455055 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095917391 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070059635 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100363922 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103028314 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069417802 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084837484 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092344418 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093295124 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089318566 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103442143 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.109731419 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088718146 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100571597 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095969298 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142406255 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099337494 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085285821 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139947706 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145742562 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084888663 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089318968 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069587479 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077129365 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11021497 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147726737 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152947317 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078165224 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086020199 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085252065 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085498061 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070350009 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087219107 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087506281 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105276363 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100990307 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112497325 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105517434 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074497272 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101552139 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09865847 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093001154 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108378674 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122004182 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.128940469 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.144372717 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117061258 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109765716 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075995435 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080252801 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075667729 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080175314 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102935917 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079359389 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077696672 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.320394556 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090683162 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102454934 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105330883 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085853087 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073144851 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133135963 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067304177 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130655632 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.06928353 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080717696 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080838538 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07675233 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090200406 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133107569 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107557953 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107573984 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105208646 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100823788 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156528603 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154150703 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078640925 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140048298 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073130067 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073678199 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07376456 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108302702 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087492452 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11355482 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141763732 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09014326 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101120395 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077037739 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143121055 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.0979843 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10436714 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085556215 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078232513 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14307167 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078500565 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.079797208 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088832518 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111830915 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071840979 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103576509 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084979511 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079133352 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166698539 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.711671657 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093185962 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075506167 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096588859 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.145665181 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136546304 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101663427 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.289828253 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.117386531 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09841114 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093387375 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10434068 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.18836189 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073272784 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0916092 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100663866 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094368202 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098599867 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096095909 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084331577 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089330388 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084614907 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076682218 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104196277 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085176191 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093728967 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108295749 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080697704 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085046363 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12714219 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.100360778 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.079633719 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085143608 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103446338 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086460854 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100406815 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068276416 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111660626 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090012925 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117149529 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.096756841 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106975512 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127574149 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093480203 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136956598 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107029046 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12263371 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086562559 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.076979453 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125994951 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.089645294 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077075025 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146567028 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098198276 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091633069 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104574464 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096855347 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113716491 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117789697 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114778554 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098596701 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080271274 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105525846 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.106993721 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.263752131 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077886876 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072477223 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074666836 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104375556 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083173286 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081265735 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112155219 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092642532 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104855625 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101229 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.12004932 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085473078 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09827499 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108522559 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088627164 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106778238 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098729199 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125187571 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169932174 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121342931 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126228995 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130472273 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074954316 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.072716726 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066974158 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114679657 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079492983 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.08797886 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079834425 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133291379 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081773578 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111981493 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.242178682 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079874641 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094313587 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095759086 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068394332 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082221975 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106747112 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086329358 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07889896 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118476146 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082200731 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128517406 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110076968 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100779654 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096644364 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081397424 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115654951 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10540167 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131612602 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098739058 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075273064 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125640235 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104314225 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142355353 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074698452 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084211153 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1380508 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.280060329 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128426322 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078607648 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147331382 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141677124 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098098385 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13088115 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06916918 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085511773 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087356702 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123695248 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081067775 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107503179 seconds)
  done (took 68.130689578 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.146587793 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.174596873 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.121912539 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.132185345 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.289827032 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.299161019 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.152612221 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.123188671 seconds)
  done (took 3.239292756 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.070246765 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081733826 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079272646 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.245716673 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096529523 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066143971 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071462073 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080295613 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065604359 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06531661 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099666456 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065731984 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065780066 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.522859602 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065575648 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071278661 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.06622187 seconds)
  done (took 3.667295036 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.356359804 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.59975767 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.318988603 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.758575128 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.168286622 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.724223189 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075654534 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081883638 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.940657178 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.405266248 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.161518024 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088434128 seconds)
  done (took 21.472229622 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077662211 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.122207472 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.120972412 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072533704 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072079786 seconds)
  done (took 2.245209889 seconds)
done (took 121.36014533 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085226514 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.171295147 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067164661 seconds)
  done (took 2.054006635 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.123779614 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.120875111 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.119249201 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.120866821 seconds)
  done (took 2.274910915 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076047161 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074591134 seconds)
  done (took 1.940873683 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227524004 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.219073201 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089930073 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083988638 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078993752 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078915211 seconds)
  done (took 2.038325946 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072727568 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069445185 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069411618 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.06953361 seconds)
  done (took 2.064003039 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.173251277 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065656027 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067617827 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069287352 seconds)
  done (took 2.16052958 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087244587 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085831334 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114557752 seconds)
  done (took 2.07852116 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084709121 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082505547 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076971982 seconds)
  done (took 2.035559901 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110904599 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095052091 seconds)
  done (took 1.991607829 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08048542 seconds)
  done (took 1.869724611 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093058399 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096602602 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.186373813 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.151296957 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.187755739 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.175206023 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074951139 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075364505 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071347672 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07034425 seconds)
  done (took 2.966749847 seconds)
done (took 25.883503635 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085602832 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.194041795 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.31779782 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085324444 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.65254833 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.313148062 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.731243721 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09111707 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098126755 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066715522 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083389751 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.631671018 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.730655933 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.151229619 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.717674014 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.140915695 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.562050996 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067540478 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066115247 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066680699 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.715288716 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068504182 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067127821 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067556951 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.558383223 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.332478718 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068551566 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.137493069 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07065154 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074881782 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.313785698 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068411162 seconds)
  done (took 14.158594672 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.096337696 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125084053 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071521693 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08213024 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068610531 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.06845124 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070533613 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067118838 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109358414 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.074023039 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088201734 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067249977 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071545676 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068410994 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087115071 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066920751 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.06905936 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067544523 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066804485 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067331647 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085736717 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066514136 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06741487 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067810699 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067449995 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081083857 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068214828 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066994813 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066926944 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070840359 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071953355 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068238817 seconds)
  done (took 4.204953943 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.128541688 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128171876 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072081421 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106427133 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11588259 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071081538 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149398585 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089519393 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11266231 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067646664 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084042584 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067021759 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102038647 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.06844246 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087236766 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066817772 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069431694 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067540791 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066567463 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06753091 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085808136 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066773944 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067114849 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067452596 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067338109 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082202038 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067892295 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066841996 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066670078 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070759171 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073636017 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069709442 seconds)
  done (took 4.446379472 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071092618 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.07089831 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.076466988 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078508244 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064843218 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067136385 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067878431 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064785324 seconds)
  done (took 2.365602879 seconds)
done (took 26.984421631 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080453253 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066051998 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068423814 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085389406 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071783783 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.112210758 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062969197 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072543428 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069139147 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069468054 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.070881979 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065408367 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.067902664 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062748657 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069497038 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.063767108 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.115259166 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068334905 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.112130851 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.113441112 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066451321 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069274499 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072400297 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.113180414 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.113863265 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.11433035 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073046757 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070205443 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064537054 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067074511 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.173128035 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.187634028 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073921894 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.12026191 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064761806 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064260779 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068488789 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066950204 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.117098153 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073537458 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066678835 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07311565 seconds)
  done (took 5.308696528 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.193505769 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.196528834 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.189354744 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080411 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091588896 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078269366 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.196007153 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076749291 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074265305 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.195106771 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070341772 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07421836 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076503275 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067326915 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074196677 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070517025 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.075867498 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068627621 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074957166 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.074577051 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.195223087 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068485991 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078524802 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075434522 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.070263278 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077800929 seconds)
  done (took 4.493145303 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074265913 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089144639 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091973113 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145350243 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109029017 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08180544 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080606986 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091939346 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099663099 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066592399 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070715561 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097567435 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095447105 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073247007 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106010011 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084660759 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079267562 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068158187 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072837067 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.10043718 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089086236 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08456773 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098875688 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087088371 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066497684 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075675347 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073252185 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.081829894 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073881816 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078731812 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070082289 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069733125 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066756719 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.077653233 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070029318 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064146379 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088740779 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07974591 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081442396 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10613459 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076734183 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.118132393 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.094095906 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13157775 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066318478 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068692782 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070580905 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079330193 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069255074 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098331373 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082681962 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066732902 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085329773 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068446778 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068205469 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082658202 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068269001 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068396516 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078322934 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073055265 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087594889 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072533852 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088153884 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06667577 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.07813406 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068084209 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068451651 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065691497 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.100855775 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.0744499 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.116905629 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068102077 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064513301 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078850551 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.07949898 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07427808 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066583384 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085953049 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078704968 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07090101 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078011537 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069233807 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070216405 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103211005 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065333568 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064302913 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064558546 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068613009 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07000796 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067354351 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079546962 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068210052 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071483407 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082471873 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067403711 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067611072 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069219912 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068202204 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066237462 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077630345 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.07167097 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069423714 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081499709 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068681688 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070867952 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082251669 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076464102 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067131706 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.06857096 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070691645 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070731308 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073412198 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072325545 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070648734 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073553775 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076759274 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075454356 seconds)
  done (took 11.038276185 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.211923517 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.197227473 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068727473 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.194202291 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075298014 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.127685105 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.19557374 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.135421941 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067440927 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067852179 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066183057 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.142795773 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.13561472 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.14665615 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.11807651 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067404745 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093341854 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.146433066 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.199836174 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.195598445 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093106011 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074914026 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069521795 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068857283 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068978004 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077876933 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083317609 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076395244 seconds)
  done (took 5.14100198 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075677074 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082255635 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070170747 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090536859 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08318292 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066552023 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068657968 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067567186 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083175611 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072159045 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066345683 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.070935846 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069589657 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.066977627 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067145963 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072549376 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073239524 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065319053 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070146608 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070799256 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077314974 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.153943713 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071187321 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069463691 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069190108 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.068190104 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073785369 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.074682787 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066008842 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099664419 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063542887 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072557085 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.087863824 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.069891856 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066983561 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067432483 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066847758 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066765538 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.06730971 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064774982 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064858817 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073056213 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065705606 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071741044 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081502002 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075850727 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068306906 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069158812 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.068991216 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063580826 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069843181 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070508021 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070160663 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077594486 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070990537 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069257368 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068526427 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096574956 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.07307609 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066818162 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066919485 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06517828 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068323523 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074600877 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083706805 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068558731 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065667586 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067598081 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074590223 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.08141937 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066456519 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072356722 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063659331 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066931376 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069466933 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069936587 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068845867 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065315593 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067031078 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067108093 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067962243 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068162988 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068048778 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069879568 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.06482962 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065355154 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067870993 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068420025 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072431601 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065810013 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069582394 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069065586 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066235054 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070493585 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073453375 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.0707915 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087912459 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07535254 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067883761 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065142245 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082461863 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069066708 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066483808 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071290325 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072054823 seconds)
  done (took 9.423683788 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098369877 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067701218 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086474492 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097934486 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.07647297 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072789427 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081574001 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067220472 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08792045 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065158009 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.074994401 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064190165 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080004862 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075751564 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067757991 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076676016 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068607461 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087064804 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.08124628 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064646002 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075326677 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078581075 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078789415 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084686237 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084177452 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085545328 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078876919 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068571152 seconds)
  done (took 4.057447978 seconds)
done (took 41.257847605 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.885957481 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.090542765 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.891452363 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.406302333 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.037185992 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.903677324 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.02212085 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.881051484 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.189386968 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.963817709 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.740091906 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.54036094 seconds)
done (took 69.444271825 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.034008685 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.043020919 seconds)
    (2/2) benchmarking "String"...
    done (took 2.124491031 seconds)
  done (took 6.026408927 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.325124491 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.886750905 seconds)
    (3/3) benchmarking "different"...
    done (took 1.929724099 seconds)
  done (took 7.958312694 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.165936587 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.423485171 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.163103825 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.880945703 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.890167465 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.385064945 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.039157034 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.524342038 seconds)
  done (took 33.131809597 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.894346966 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.176935791 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.234833889 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.317747413 seconds)
  done (took 21.527961924 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.327578035 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.279184978 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.281991307 seconds)
    (4/4) benchmarking "different"...
    done (took 2.341491387 seconds)
  done (took 11.145422361 seconds)
done (took 91.960716165 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.886072731 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.179976976 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.928622861 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.056292729 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.987038138 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.987312689 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.897632911 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.913942761 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.887365861 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.892676048 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.8962905 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.886666992 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.886432712 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.929289122 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.899302392 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.951167418 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.159342554 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.021515701 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.938573303 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.687424227 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.254577164 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.902147148 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.918626762 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.96596934 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.334037154 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.960246115 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.337375394 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.917412674 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.49222087 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.903486431 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.894298283 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.892558556 seconds)
  done (took 208.465354862 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.888799554 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.699521321 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.728063088 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.918384638 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.221731515 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.231469719 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.742326146 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.249707057 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.892639836 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.911725313 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.905016179 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.893346005 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.921816554 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.437396627 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.923003068 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.913708008 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.75959572 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.664517482 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.923335875 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.833482797 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.898556585 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.407342103 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.397237329 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.699017763 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.918804593 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.925873812 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.895322472 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.902720631 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.375881698 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.712110779 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.9201479 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.915506738 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.247967801 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.120251304 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.901475626 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.898867188 seconds)
  done (took 181.629215097 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.109790588 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.899257787 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.936213574 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.997776811 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.87364392 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.721667704 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.908179241 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.895286678 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.887423893 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.897723404 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.891867882 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.958234533 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.622411518 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.917662878 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.894701964 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.898770774 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.93428783 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.90512696 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.892558746 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.88622067 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.523022307 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.247308844 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.005906904 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.900762169 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.90399014 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.019552533 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.916525177 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.888004431 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.999478875 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.892568038 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.025229537 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.006430697 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.904425907 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.968105703 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.900076496 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.086786303 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.89416162 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.888125288 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.894345876 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.943195228 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.897898428 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.977294576 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.996486789 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.904729306 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.913774766 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.362156543 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.447493154 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.898855433 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.890794496 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.894599993 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.895641008 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.894157385 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.308493924 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.896206647 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.928098222 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.370577372 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.892394149 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.890636729 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.889552094 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.896606926 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.895652185 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.898023794 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.928938386 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.54874232 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.722949517 seconds)
    (65/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.893531147 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.264451277 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.644394766 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.893355036 seconds)
    (69/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.88806673 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.685581272 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.950618705 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.901595344 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.074281474 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.8988616 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.897823637 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.889009686 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.893363978 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.812213207 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.811911687 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.895087524 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.000788795 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.895866851 seconds)
    (83/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.894798255 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.894247809 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.348671832 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.977583193 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.07639526 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.912441866 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.957287187 seconds)
    (90/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.897312811 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.896086113 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.89070976 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.919283828 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.034709135 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.896373885 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.8900257 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.901140126 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.639360275 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.899366172 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.299762443 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.276927483 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.991012958 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.333971958 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.851456103 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.896950418 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.898432383 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.912954427 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.894077449 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.893542254 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.899677002 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.894636306 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.893616503 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.896263826 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.895056401 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.887745739 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.912458206 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.913423034 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.892840951 seconds)
  done (took 422.973982569 seconds)
done (took 817.072228413 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.555493447 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.666447302 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.467153793 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.520460212 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.480295326 seconds)
  done (took 14.51907795 seconds)
done (took 16.340948891 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.91837331 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.91865049 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.909931856 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.926470905 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.919938432 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.914040803 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.926877582 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.931612776 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.930247399 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.912716368 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.920519147 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.916323472 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.922537847 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.92750258 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.93908959 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.930177178 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.92098811 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.906115835 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.921581267 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.929684359 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.918957063 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.91703381 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.917593395 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.92245461 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.933854364 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.918689808 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.917598683 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.927484888 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.92038137 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.924686018 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.932427938 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.925936826 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.926693825 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.930062975 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.93155282 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.933462003 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.921497335 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.934427156 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.919916278 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.93519857 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.931655557 seconds)
  done (took 80.710747521 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.904949972 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.068345877 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.182525952 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.950215959 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.903039333 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.177742129 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.98155552 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.08122445 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.072035854 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.179114695 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.197494764 seconds)
  done (took 24.533311767 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.909109446 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.078872922 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.191060657 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.949493336 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.910136999 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.188167237 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.97887771 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.067196262 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.071164039 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.185578195 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.240983022 seconds)
  done (took 24.620085184 seconds)
done (took 131.697867471 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.45401453 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.954580214 seconds)
  done (took 6.237274132 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.901408919 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.917185906 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.082849753 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.89874771 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.902220074 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.914010301 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.899112483 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.909253076 seconds)
  done (took 17.258560864 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.89987113 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.91200081 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.904144779 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.904626673 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.899311186 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.899346507 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.90030694 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.902767163 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.90191545 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.9000053 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.899486226 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.902553461 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.904357606 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.905302536 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.904441353 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.900390486 seconds)
  done (took 32.271319294 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.905369114 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.902094558 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.903826219 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.901340796 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.903508095 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.908481604 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.908056224 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.903089335 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.898591553 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.898423288 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.905835073 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.901746239 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.901581874 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.900737041 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.904658861 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.909146768 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.902008578 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.900236969 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.902782419 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.901981412 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.905554837 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.917565785 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.910029118 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.903570752 seconds)
  done (took 47.53671941 seconds)
done (took 105.158048363 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.480706886 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.910370874 seconds)
  done (took 9.221310868 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.910233208 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.907757195 seconds)
  done (took 5.746335378 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.903142709 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.902064746 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.904738593 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.906871996 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.904566283 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.913387628 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.899960057 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.905240099 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.904207958 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.903225703 seconds)
  done (took 20.897263026 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.906229938 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.919462171 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.89929853 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.899006586 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.901227292 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.89957816 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.900068663 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.908207198 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.899470857 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.899280126 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.902993876 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.897584011 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.914432632 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.899411458 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.901277522 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.901535199 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.925992591 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.912560674 seconds)
  done (took 36.120654019 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.901332155 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.901001349 seconds)
  done (took 5.630627046 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.90021033 seconds)
    (2/7) benchmarking "second"...
    done (took 1.900627675 seconds)
    (3/7) benchmarking "month"...
    done (took 1.900097978 seconds)
    (4/7) benchmarking "year"...
    done (took 1.903578076 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.901641219 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.898951632 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.900216022 seconds)
  done (took 15.139060111 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.900815329 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.051733066 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.095560662 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.373546691 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.903453927 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.903589746 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.54490178 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.921395369 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.90369276 seconds)
  done (took 20.427865327 seconds)
done (took 115.01945254 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.685328404 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.901144051 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.532584994 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.998311068 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.958560104 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.223035456 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.908990776 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.417915816 seconds)
done (took 44.454177392 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.98093495 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.897258615 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.940156015 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.93838424 seconds)
  done (took 22.614357627 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.908181417 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.546206723 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.933319894 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.993419918 seconds)
  done (took 23.310710497 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.398514924 seconds)
    (2/2) benchmarking "read"...
    done (took 2.421597952 seconds)
  done (took 6.663688047 seconds)
done (took 61.406223396 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.902199944 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.90031936 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.916209322 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.90133011 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.903030739 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.902442496 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.903584353 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.903600394 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.901132158 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.900623702 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.903628638 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.903161434 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.902439577 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.903005364 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.900896035 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.904136215 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.902078624 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.905104299 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.906078308 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.904464957 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.907798609 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.90242669 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.903055239 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.909856436 seconds)
  done (took 47.525389033 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.904351615 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.903044404 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.903873807 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.904027785 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.915430277 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.901857944 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.904951138 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.945063132 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.917878069 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.90253248 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.904484751 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.905081151 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.901900379 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.904369563 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.903801913 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.905620252 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.902016422 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.903536036 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.903848342 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.906032947 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.903829874 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.902920928 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.902983092 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.903998819 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.909737441 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.904377147 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.905583386 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.905993807 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.909931733 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.938624342 seconds)
  done (took 59.066088286 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.907174994 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.904672232 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.904387467 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.906197704 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.906501786 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.904754632 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.907368176 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.905139875 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.906141425 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.907829191 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.902352457 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.907169439 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.901155054 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.919472097 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.904267562 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.903389248 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.905060316 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.904585933 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.907165352 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.905818365 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.905329435 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.903895538 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.905259651 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.906822805 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.90888972 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.905704073 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.912399199 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.910088883 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.907105549 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.904883635 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.910219116 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.908950954 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.906788401 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.906725288 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.904828427 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.905696898 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.904104698 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.911253322 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.915907301 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.906427208 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.907216163 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.904532304 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.907092344 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.905583802 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.907354825 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.921353146 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.907339419 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.906945182 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.907119453 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.909695401 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.926743616 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.907985591 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.906787152 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.906961685 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.90543651 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.908067127 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.90972255 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.907557904 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.907375295 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.909840216 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.906261964 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.907929538 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.90936837 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.906088979 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.90662292 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.909140621 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.910055266 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.906323217 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.905021495 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.909557343 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.908309747 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.90871668 seconds)
  done (took 139.184712841 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.908058766 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.922575679 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.90741408 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.907009267 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.908225235 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.909101085 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.909661541 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.909114771 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.910818519 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.908971315 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.906627927 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.908686786 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.90815451 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.90790106 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.910185235 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.914902954 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.910286679 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.91564416 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.917766536 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.907813223 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.912073084 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.914911299 seconds)
  done (took 43.875135824 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.913842113 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.908257274 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.910094877 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.90890518 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.909677534 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.91101118 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.910862898 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.910037099 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.911537592 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.913014811 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.91087875 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.911094973 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.908632082 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.913136766 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.910102508 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.909823319 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.909267905 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.91104886 seconds)
  done (took 36.230070418 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.908250786 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.908345089 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.910866655 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.914214996 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.910965006 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.910815277 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.913205662 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.913586417 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.933657264 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.910278335 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.916884245 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.924816113 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.9122253 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.913020776 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.913339069 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.913652617 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.913309366 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.911703267 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.912597529 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.914473494 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.92372772 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.912645293 seconds)
  done (took 43.955149745 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.91172001 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.909578209 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.911692529 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.911762671 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.911743664 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.911994677 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.908743193 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.91212392 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.911473169 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.910176548 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.915514828 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.911573273 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.911993414 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.913932476 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.91196921 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.912650058 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.912672935 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.91645618 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.913753076 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.909480908 seconds)
  done (took 40.084539503 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.90994845 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.913121937 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.911436179 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.913727968 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.913583966 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.910070361 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.912254046 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.913243351 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.91724303 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.914401262 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.912664546 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.9132387 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.919104693 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.914013456 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.912099508 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.912209517 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.911208039 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.912718239 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.91178274 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.911281542 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.912130457 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.910535089 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.915722776 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.920702962 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.914934198 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.912370792 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.912177332 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.928150825 seconds)
  done (took 55.430612483 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.914581462 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.912674451 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.912977655 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.911495227 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.913821809 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.917437742 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.917459078 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.914143373 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.914676107 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.915442443 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.9155986 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.915228394 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.921053044 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.918180542 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.917991241 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.931904749 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.915939924 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.917115608 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.91662135 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.913301061 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.914574151 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.913593062 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.914303074 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.915038434 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.915228881 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.914284237 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.916373396 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.920025794 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.915670167 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.914015429 seconds)
  done (took 59.324038203 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.934927599 seconds)
    (2/2) benchmarking "in"...
    done (took 1.940323393 seconds)
  done (took 5.719823519 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.912000016 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.919954003 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.915299173 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.916055235 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.915214793 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.919270571 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.91800529 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.917615127 seconds)
  done (took 17.177927633 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.917183809 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.917931703 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.918628861 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.921091483 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.914463354 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.922883263 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.916842646 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.916088428 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.919810359 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.919119713 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.93311287 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.919096862 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.925293948 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.923766656 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.919956264 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.916777837 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.917703068 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.917485327 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.917350919 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.917293887 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.927261974 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.916212196 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.917143362 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.914997234 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.916332489 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.918352966 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.930938771 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.91981446 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.919306971 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.91888848 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.926924008 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.918537753 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.918496429 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.919255881 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.92168704 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.918163321 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.924401105 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.916823317 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.917086949 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.917817221 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.920187934 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.920416451 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.920385659 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.924563081 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.918296379 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.921434963 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.916905866 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.916439359 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.930241135 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.922244279 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.927035286 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.920454965 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.919415221 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.918918735 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.918667861 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.917872257 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.917755807 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.922055825 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.926029804 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.924785426 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.925902006 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.944209369 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.929667129 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.91803111 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.919791694 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.930512927 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.951906279 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.919047488 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.921149204 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.923434064 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.925087616 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.919019864 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.920008242 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.91899566 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.935692617 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.927081714 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.921414717 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.917869971 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.920380974 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.937193108 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.922274715 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.921758068 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.921097251 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.918529402 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.931799006 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.950235148 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.919592326 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.923646845 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.936436824 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.921645695 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.925395058 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.922712241 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.926990693 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.921273295 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.920365732 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.928244199 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.921464959 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.92748742 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.921952467 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.931548805 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.92271792 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.920687971 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.928382493 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.931165502 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.920743799 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.921108 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.9210881 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.923089187 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.930558336 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.922954984 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.918248345 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.921514985 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.925050485 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.925382902 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.920865821 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.925179018 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.931073477 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.930635513 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.922715445 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.929142676 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.929260257 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.930021711 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.948169551 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.949745083 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.921191541 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.927156815 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.930813376 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.936934594 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.926322901 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.924196265 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.926086342 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.920614657 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.922797425 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.923306592 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.924889173 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.92130922 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.91921041 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.922610531 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.923495235 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.923727019 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.927245172 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.924779679 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.926914817 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.92538065 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.926787368 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.921792895 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.925368926 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.932130667 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.92338211 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.921984886 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.924214544 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.925105049 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.929981759 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.924239112 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.957848586 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.92333118 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.925974673 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.924799873 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.927660844 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.923553675 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.924709513 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.923721412 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.927320503 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.922968883 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.921771291 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.923705083 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.924663781 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.921866823 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.923547205 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.926714887 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.929490727 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.9242668 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.931590288 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.923917775 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.928388665 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.924106413 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.923641457 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.927607555 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.926678761 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.938808976 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.932040817 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.942409317 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.929877444 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.933520948 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.922237496 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.930466746 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.925274487 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.924106549 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.924920204 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.925739973 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.927419206 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.933330994 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.948389594 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.939720841 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.926670649 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.927417198 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.933089238 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.929795774 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.933782576 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.925761667 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.927529323 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.932716162 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.927375645 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.928938548 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.926483287 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.930701579 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.930405731 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.927974685 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.930029972 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.926562511 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.923557313 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.93205641 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.926312508 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.927466621 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.924770594 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.926331437 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.929074093 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.951527746 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.942157838 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.941541862 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.92497334 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.923403215 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.930558155 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.926116976 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.927328793 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.930133075 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.949064845 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.924811205 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.927424162 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.93659991 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.931827265 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.928104501 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.930830061 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.930048062 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.933146165 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.932747101 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.931599368 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.937674318 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.933049727 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.9279468 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.93341833 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.925414806 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.930053746 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.928306131 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.934938663 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.926448722 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.929883143 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.928076905 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.928442086 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.934378674 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.927487484 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.932171595 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.92837576 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.931130781 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.929347799 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.931900239 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.929059015 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.930591013 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.936037272 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.93390032 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.93013416 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.935246766 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.931555174 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.930953903 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.932542454 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.929018661 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.945467499 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.942175362 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.928710957 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.927702568 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.929263345 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.93238883 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.928792395 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.928798435 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.935225061 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.93205545 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.935420506 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.936735796 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.931935696 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.930100005 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.935489309 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.928445966 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.932378108 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.934679621 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.929935728 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.928093318 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.930281597 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.932296255 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.93040103 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.932781307 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.933059134 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.93085893 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.931822663 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.930848146 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.941894877 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.932899257 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.931100997 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.937553093 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.939836134 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.931739056 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.932333013 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.931795806 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.930404551 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.932678124 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.944846207 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.935073559 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.931970705 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.937611657 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.94946821 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.966091043 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.938926649 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.932064993 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.943740263 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.929248737 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.931634639 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.93041068 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.936064135 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.94013242 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.932127411 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.931106147 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.941465695 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.945969017 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.933222881 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.93696229 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.931777036 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.934657428 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.933033715 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.934081921 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.935952652 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.937662729 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.93829427 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.931876038 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.932050201 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.931067803 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.935464074 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.932922581 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.932777092 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.936318205 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.9321535 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.932573155 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.930194751 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.934774583 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.93044403 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.931800836 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.93202386 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.94068045 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.930903552 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.936382557 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.936051045 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.933107406 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.942996471 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.952758259 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.931386842 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.93385451 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.933745258 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.937641823 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.932543713 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.932358955 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.935412823 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.932400651 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.936464552 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.946509612 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.939014893 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.939808241 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.934045077 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.931675234 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.936382663 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.945276848 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.96474077 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.934525015 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.934189287 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.938600562 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.940405023 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.940154228 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.941337402 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.939983754 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.945776309 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.936021452 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.935890299 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.937596934 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.952255753 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.933507509 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.933315781 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.933814948 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.940092288 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.938548577 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.933944358 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.936936126 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.960269064 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.93685442 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.945703586 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.934844823 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.939001551 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.933717957 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.936890163 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.935608131 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.935428874 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.93525321 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.939029157 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.934748742 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.934264693 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.936424106 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.941502385 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.936107615 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.939292654 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.944593067 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.932843764 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.938728111 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.940424645 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.934891489 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.937576295 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.934741723 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.93545904 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.942374139 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.936267244 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.943548811 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.94083872 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.947128546 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.940747675 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.937990886 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.937483738 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.942497484 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.937822189 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.938695767 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.93963268 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.947843012 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.940314325 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.956564444 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.946570197 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.938845838 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.939702158 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.944664959 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.945722617 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.934617606 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.939206797 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.937473802 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.939239747 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.937633806 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.938625241 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.937912082 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.941616131 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.94413709 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.940127479 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.939460296 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.9367099 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.939652188 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.940685195 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.939331378 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.942935222 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.945051892 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.940725297 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.940183942 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.935808073 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.939342222 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.943268115 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.936983209 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.937579927 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.939414251 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.941385896 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.943336396 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.936706702 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.955146246 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.942011829 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.938436424 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.950238831 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.938435019 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.93989445 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.93947695 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.942419528 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.950758008 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.941003005 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.93949317 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.938375917 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.943265724 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.937513983 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.937480358 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.93969733 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.94044928 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.94810934 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.958215585 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.93935688 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.953144097 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.943806249 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.945583992 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.944536085 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.945371067 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.940807821 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.94287346 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.938664683 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.947591996 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.952864121 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.942451734 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.944874407 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.947853295 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.943187601 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.940730292 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.941313933 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.940736051 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.945508509 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.950951405 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.945634286 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.940542917 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.944079897 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.938965187 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.94389919 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.939969362 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.942551998 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.940884351 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.941284109 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.943241164 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.953301819 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.949936299 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.943929252 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.944143882 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.939534742 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.945238098 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.954143107 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.939219191 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.940200475 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.941156681 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.943014054 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.945336635 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.951456087 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.953351633 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.942529076 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.94025811 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.947251829 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.964551712 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.94330449 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.95382886 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.980772619 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.943925078 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.939616184 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.944452343 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.944245078 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.945252833 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.947620378 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.93938631 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.951350648 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.942827271 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.953789279 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.957168896 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.944096439 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.947435952 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.944652383 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.944931653 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.953235044 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.941791228 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.953017348 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.944448071 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.943630525 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.944958397 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.94506759 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.941852937 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.944240681 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.944087794 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.945352382 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.961811226 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.941113753 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.952923894 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.942706542 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.94554806 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.959419822 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.958054739 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.943359389 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.943746352 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.942493778 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.952561533 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.948228521 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.945321364 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.949300642 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.958846132 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.95375559 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.969446361 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.947755517 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.943728031 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.943188303 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.943530004 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.943065236 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.958278814 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.959606089 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.94615113 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.947345027 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.949780714 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.944390987 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.953856165 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.950767827 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.943676435 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.952953036 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.944315026 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.946194189 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.944763307 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.947287073 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.951161665 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.955353404 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.942246875 seconds)
  done (took 1154.815304048 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.949105954 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.946791939 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.945252759 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.947755091 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.945232538 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.94952763 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.947429407 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.949124556 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.947554439 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.948159337 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.944698055 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.949717901 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.946810363 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.945885518 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.94646093 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.945869134 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.945981563 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.943381445 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.947450263 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.943913447 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.94729318 seconds)
  done (took 42.760379852 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.945404131 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.946804377 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.9476703 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.950191378 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.949303449 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.947656241 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.94612667 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.94655267 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.944181779 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.946856973 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.949580803 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.966140646 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.947687813 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.947232605 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.949013207 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.946869217 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.951141025 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.951243128 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.948670102 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.960739644 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.946697849 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.945113904 seconds)
  done (took 44.757631338 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.948172133 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.949734577 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.947445396 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.947020575 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.950375083 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.948488709 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.945578231 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.950319083 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.950835816 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.951662353 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.956509052 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.956488806 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.948304234 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.953316239 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.949445252 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.946550508 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.06805102 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.948598976 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.949014085 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.946001036 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.951764848 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.957420102 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.947396989 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.953386834 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.951501533 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.9485557 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.949758249 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.953420211 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.952645343 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.951559001 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.952892745 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.94973408 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.951087916 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.950002 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.949260256 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.956649035 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.952435619 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.948452267 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.947596152 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.947569021 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.960998915 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.976816298 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.947096271 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.948572337 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.956025865 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.947628615 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.946726247 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.956304684 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.959629056 seconds)
  done (took 97.61161484 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.94713593 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.94927144 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.95122042 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.952836204 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.952253222 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.951511703 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.950427452 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.948490468 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.952045074 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.948746312 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.947413658 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.949241254 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.9506035 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.953124143 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.948236383 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.948631656 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.950921733 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.951498379 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.948113031 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.948536867 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.95187047 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.952414006 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.951530178 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.951515427 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.966837929 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.950349555 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.950614733 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.949368709 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.952347661 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.949914034 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.948459842 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.953521262 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.949555616 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.95775529 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.953421089 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.95269043 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.954004337 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.948813328 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.949983607 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.951872236 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.950450387 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.952175751 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.956391954 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.953683148 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.965626672 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.950963146 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.951091638 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.953483607 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.951730004 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.950150851 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.955894221 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.953984089 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.954691431 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.951217674 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.951696926 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.9531293 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.952253697 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.951492469 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.952172984 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.953107468 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.952129866 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.951796556 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.953778324 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.952914899 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.95277163 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.956499214 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.956524705 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.95514114 seconds)
  done (took 134.622229596 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.954151022 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.952339534 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.949913564 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.954597042 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.952042577 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.953513264 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.952465025 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.950229939 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.952880424 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.950616519 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.951740402 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.955191 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.951115808 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.954069484 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.956037163 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.951061277 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.95450525 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.95179688 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.952342931 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.952350748 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.953721237 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.953863154 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.952463162 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.953554374 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.954622057 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.950958056 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.95428971 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.952465293 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.953828211 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.955727518 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.951413323 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.964672391 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.95747314 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.957440418 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.954226402 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.954848461 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.955206444 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.954955571 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.952753365 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.957192028 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.955869278 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.954804463 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.953722051 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.972968475 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.957487569 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.965863204 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.953054816 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.954976524 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.954751919 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.958149681 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.951857406 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.955368535 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.956443265 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.954125686 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.958998096 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.957314522 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.955767258 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.955840084 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.960166437 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.960753982 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.954632274 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.955401773 seconds)
  done (took 123.089922036 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.953833429 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.95491424 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.957067748 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.955116289 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.955822899 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.955104408 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.955221647 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.956203931 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.958978139 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.956815347 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954367388 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.955671616 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.957475645 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.954890761 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.958237597 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.958603722 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.953975079 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.958594767 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.95775875 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.967342325 seconds)
  done (took 41.021650753 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.966504877 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.960499764 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.956499161 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.956873543 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.958369924 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.957405306 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.956602059 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.955494826 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.955876178 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.958113103 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.956751656 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.958469488 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.954706286 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.957249845 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.956337846 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.955238801 seconds)
  done (took 33.20613888 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.956342895 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.954969701 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.957918421 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.954428328 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.958379044 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.957960893 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.956552053 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.958643475 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.957035311 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.956594607 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.955376237 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.965572118 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.96217681 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.956066636 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.957602001 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.960610636 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.956869399 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.959883542 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.958050414 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.957785471 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.963938087 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.9576567 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.95903378 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.957639411 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.956312759 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.957296791 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.960819506 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.961082641 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.960878592 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.957138295 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.958987333 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.958610925 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.960100787 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.959350709 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.959017027 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.960867359 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.974808521 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.958361175 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.961855977 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.959728723 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.959157269 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.960377443 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.962866471 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.960620855 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.957971007 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.962180836 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.960280736 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.957363298 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.962922371 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.960189178 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.960575871 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.959108672 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.960712723 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.964119135 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.961075161 seconds)
  done (took 109.658151189 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.960042507 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.958629787 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.960263639 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.957701226 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.961208138 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.963183538 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.958275948 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.959230091 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.961023908 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.961108905 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.962433872 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.964231881 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.961327014 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.961146517 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.96237211 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.97279163 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.958576427 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.960796236 seconds)
  done (took 37.191488425 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.961423749 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.962711685 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.961225319 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.962589539 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.961506532 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.959917918 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.961042091 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.961671745 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.960097851 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.963472356 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.962173169 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.966535822 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.961854341 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.963211189 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.962788713 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.960701694 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.96146051 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.962548566 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.960202519 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.964214109 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.960814065 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.961795978 seconds)
  done (took 45.053206403 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.959370733 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.962479084 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.996198185 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.989432361 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.988603057 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.007222654 seconds)
  done (took 13.793348454 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.981543455 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.962419802 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.96228526 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.963450616 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.962398493 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.965292745 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.963630526 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.963730323 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.964432375 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966558592 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.963945378 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.962384415 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.962816372 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.964446293 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966266203 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.961812312 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.962119927 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965274737 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.962563504 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.963639102 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.96252601 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.963594469 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.965705255 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.963091758 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.965567632 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96632061 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.962723953 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.964647663 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.962890644 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.964533635 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.963965824 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.963114184 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.965102864 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966761536 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.962803193 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966526672 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966729068 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.966953439 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.964187598 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96606315 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.967252376 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.966384768 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.964672107 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.963196644 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.962965479 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968034508 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.963938888 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.96499047 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.965145739 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.964720401 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.966113307 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.963232383 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.96629567 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.964908821 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.963200792 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.964597968 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969327336 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.982368616 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.965313058 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967021101 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.967588112 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.963564083 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.964841063 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.968349858 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.964517231 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972187766 seconds)
  done (took 131.603995881 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.96728114 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.967512461 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.964207493 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965113187 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.964668305 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.963816795 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980842454 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.964102391 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967836162 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.965892042 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.966431436 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970495848 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970644933 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.967780215 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.965775016 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96481437 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968188659 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965565544 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.968476023 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.967703082 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.96750085 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966493968 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.965272448 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966712512 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97222423 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.965586203 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966983206 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.9691011 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.966517291 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970452511 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969213129 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969135398 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.968841241 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.965916754 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969564938 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968051958 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.967291648 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.965610361 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.967801799 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969512622 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.965332855 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973110705 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966891288 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968441547 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969961415 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968518508 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971240026 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.967302744 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.96638064 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970240671 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.97004635 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968904041 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.966752932 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966599196 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971074969 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.976723144 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968717308 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971307781 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969019229 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.968992244 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969639307 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97022169 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970383536 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.96801889 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969018207 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970791412 seconds)
  done (took 131.810010778 seconds)
done (took 2690.400900515 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.046478995 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.097106213 seconds)
  done (took 16.043066688 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.103580615 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.070819252 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.127496702 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.073966728 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.976075961 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.98831934 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.976007907 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.969687468 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.056050331 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.969493527 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.972557328 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.981142073 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.971171496 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.973358392 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.968947225 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.968114866 seconds)
  done (took 54.086959902 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.975654533 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.979208987 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.970643728 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.969009003 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.99586647 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.066800011 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.998202666 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.979127169 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.99105727 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.02624526 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.000683866 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.981643995 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.985768824 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.979040414 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.078696639 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.030804872 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.042612308 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.064908139 seconds)
  done (took 38.016099595 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.071672041 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.983756407 seconds)
  done (took 10.960290587 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.972826589 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.991296312 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.97420773 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.989405027 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.983526697 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.982484931 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.993659194 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.977413738 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.010796357 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.001075004 seconds)
  done (took 71.800910049 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.976174299 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.975631065 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.293763385 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.985915429 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.983194913 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.002699859 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.974878039 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.005299275 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.977981347 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.966940396 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.98200044 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.304378195 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.9881071 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.975877983 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.389997056 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.993832157 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.980663933 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.007331548 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.01240125 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.978783112 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.980219531 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.982653355 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.219923211 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.708012653 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.975133558 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.98747046 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.983892843 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.97010855 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.974968224 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.970887225 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.975893883 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.971149297 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.980944125 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.981365587 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.999555289 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.980636178 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.660478749 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.996438721 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.984957816 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.061080818 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.033653512 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.983188961 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.976089599 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.984455866 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.972182536 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.980855601 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.699572257 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.049733147 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.979639023 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.150768486 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.410311124 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.996033727 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.130402423 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.115390247 seconds)
  done (took 139.473794439 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.974201006 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.424707249 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.123744242 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.980066797 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.323244805 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.185613585 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.718673788 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.02044378 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.977490315 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.1802825 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.136304893 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.096402477 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.97615539 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.977936172 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.980598352 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.974762371 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.148129869 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.046066359 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.976776577 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.975260573 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.033633346 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.212067218 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.097442232 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.97848351 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.995720083 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.193298638 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.027686356 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.09459537 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.361927492 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.974724867 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.041092104 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.975561681 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.977893388 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.997025878 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.018309475 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.080472772 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.074750983 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.980583889 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.609767966 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.975197724 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.572804925 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.178997581 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.086971857 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.107950325 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.216430759 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.186909443 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.644899633 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.974235033 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.704874122 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.139355954 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.185350039 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.193488796 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.071011632 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.995076104 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.559413195 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.980239309 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.990907896 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.211618496 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.138874456 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.111262555 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.97499828 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.996115958 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.976502001 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.212396761 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.977840989 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.086522474 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.980694479 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.979925345 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.090691966 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.102371637 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.13220196 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.1996296 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.009960893 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.210049925 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.95606306 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.186765417 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.041070837 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.211583935 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.982332639 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.978672568 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.070140123 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.416987604 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.126424693 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.227051262 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.282903245 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.017367819 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.503912414 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.976534184 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.196338889 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.12476946 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.198307839 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.230559255 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.033759738 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.825363863 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.981115154 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.978298033 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.259959994 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.104027048 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.982046241 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.510734153 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.220894581 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.568174524 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.018677766 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.407374058 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.085775517 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.979079066 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.596760734 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.98011248 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.192937484 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.022661932 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.979733222 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.981972922 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.130864647 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.690863549 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.985907412 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.061877019 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.040080327 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.978928825 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.140025857 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.980997214 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.231181434 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.68608543 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.215215276 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.979379275 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.017823153 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.146890419 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.230830756 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.994583225 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.36111367 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.217470479 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.074242219 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.193398186 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.492838811 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.98221605 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.279225788 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.006335946 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.983143219 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.148959907 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.896340829 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.145018227 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.982516062 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.228070649 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.000226559 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.034856857 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.981589373 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.227438062 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.015188381 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.02969871 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.985151074 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.112218543 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.98665427 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.025813297 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.143026333 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.002765585 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.98184507 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.836140947 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.982640931 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.133543906 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.211499153 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.998582137 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.050973207 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.371789559 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.991748197 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.085611983 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.006268196 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.402945136 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.48951336 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.141737345 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.603859221 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.228124679 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.986341077 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.213106873 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.155189112 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.984146971 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.983439106 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.747946438 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.415552205 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.981600694 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.139217546 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.193686494 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.34929411 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.191578503 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.989267047 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.036392431 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.985055882 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.299413566 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.512890121 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.214903719 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.984679005 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.983612026 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.992153184 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.988516544 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.184371379 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.020077745 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.615863601 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.126883941 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.250408809 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.196178703 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.288195166 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.041805407 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.983501529 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.297809929 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.986361756 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.048288894 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.984363628 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.99639766 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.223891931 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.990609073 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.194749954 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.330726896 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.086502749 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.031631756 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.986654519 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.989646039 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.953271607 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.149512071 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.103243265 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.985700979 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.247294131 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.03029781 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.103660606 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.177866003 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.257070568 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.95503145 seconds)
  done (took 911.137644026 seconds)
done (took 1243.417577154 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.990763162 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.986053216 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.986792262 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.984204048 seconds)
  done (took 29.858618661 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.987152291 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.98539708 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.986638266 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.986918036 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.983943712 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.989023007 seconds)
  done (took 13.853207178 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.98500376 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.984925523 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.984355282 seconds)
  done (took 22.866161014 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.437549944 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.286335271 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.072495674 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.141819675 seconds)
  done (took 10.860349812 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.987628852 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.984768904 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.982299602 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.983595206 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.982673276 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.983931595 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.984505741 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.984604645 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.983698933 seconds)
  done (took 19.778098668 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.425719329 seconds)
done (took 105.558321015 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.113990107 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.261814435 seconds)
    (3/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.431249008 seconds)
    (4/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.431135439 seconds)
    (5/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 6.987533091 seconds)
    (6/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 4.562699193 seconds)
    (7/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.33471373 seconds)
    (8/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.053326391 seconds)
    (9/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.394605849 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.408539807 seconds)
    (11/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 6.989950968 seconds)
    (12/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.00044686 seconds)
    (13/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.991479714 seconds)
    (14/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.527127813 seconds)
    (15/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.433224886 seconds)
    (16/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.106155523 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.009537077 seconds)
    (18/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.771136668 seconds)
    (19/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.121857935 seconds)
    (20/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.014614009 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.142978731 seconds)
    (22/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.519007732 seconds)
    (23/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.125483 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.024426674 seconds)
    (25/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.129728996 seconds)
    (26/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.285721488 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.023044872 seconds)
    (28/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.004416694 seconds)
    (29/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 6.987339737 seconds)
    (30/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.531571078 seconds)
    (31/341) benchmarking ("map", abs, Bool, true)...
    done (took 4.635106019 seconds)
    (32/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.319783336 seconds)
    (33/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.003605338 seconds)
    (34/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 6.989056021 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 3.714215646 seconds)
    (36/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.136546547 seconds)
    (37/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.98423524 seconds)
    (38/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.000524891 seconds)
    (39/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.655980663 seconds)
    (40/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.891633587 seconds)
    (41/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.666114705 seconds)
    (42/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.508447412 seconds)
    (43/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.121892277 seconds)
    (44/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.047540138 seconds)
    (45/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.922742157 seconds)
    (46/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.002372156 seconds)
    (47/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.04454201 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.292318455 seconds)
    (49/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.495468105 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.856637362 seconds)
    (51/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.464022001 seconds)
    (52/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.227685649 seconds)
    (53/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.070879301 seconds)
    (54/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.895240031 seconds)
    (55/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.141856132 seconds)
    (56/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.432808042 seconds)
    (57/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.272155227 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.443298708 seconds)
    (59/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.521645283 seconds)
    (60/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.110688281 seconds)
    (61/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.271100966 seconds)
    (62/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.262452601 seconds)
    (63/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.011832513 seconds)
    (64/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.396374184 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.313388527 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.462995327 seconds)
    (67/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 6.998828439 seconds)
    (68/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.029523003 seconds)
    (69/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.303809786 seconds)
    (70/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.123879516 seconds)
    (71/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.15289924 seconds)
    (72/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.296778523 seconds)
    (73/341) benchmarking ("sort", Float32, false)...
    done (took 6.662868951 seconds)
    (74/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 6.995242335 seconds)
    (75/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.477962306 seconds)
    (76/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.166641829 seconds)
    (77/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.363720599 seconds)
    (78/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.767669043 seconds)
    (79/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.136999593 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.380663526 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.014424748 seconds)
    (82/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.140901705 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.169793033 seconds)
    (84/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.002536 seconds)
    (85/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.113694382 seconds)
    (86/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.440448096 seconds)
    (87/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.193099156 seconds)
    (88/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.113228626 seconds)
    (89/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.187600184 seconds)
    (90/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.143121878 seconds)
    (91/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.024024762 seconds)
    (92/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.362443763 seconds)
    (93/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.522780489 seconds)
    (94/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.627269835 seconds)
    (95/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.003530461 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.012623195 seconds)
    (97/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.105193855 seconds)
    (98/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.290154675 seconds)
    (99/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.204649712 seconds)
    (100/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.41174026 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.331840403 seconds)
    (102/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.916063008 seconds)
    (103/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.993007268 seconds)
    (104/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 3.369057255 seconds)
    (105/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.341750716 seconds)
    (106/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.966658804 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.397157344 seconds)
    (108/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.359634694 seconds)
    (109/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.408148716 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.012844945 seconds)
    (111/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.989291211 seconds)
    (112/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.542144033 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.132505052 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.415274272 seconds)
    (115/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.148807187 seconds)
    (116/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.267757386 seconds)
    (117/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.198027921 seconds)
    (118/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.380444289 seconds)
    (119/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.547638697 seconds)
    (120/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.392664458 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.161270535 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.41929352 seconds)
    (123/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.17434182 seconds)
    (124/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.123754682 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.415827164 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.302524009 seconds)
    (127/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.503025322 seconds)
    (128/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.17128772 seconds)
    (129/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.298933009 seconds)
    (130/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 6.995369038 seconds)
    (131/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 8.673029429 seconds)
    (132/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.257241521 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.215076118 seconds)
    (134/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.242338251 seconds)
    (135/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.138144598 seconds)
    (136/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.148688302 seconds)
    (137/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.224286173 seconds)
    (138/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.222024235 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.021414486 seconds)
    (140/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.120796805 seconds)
    (141/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.231278199 seconds)
    (142/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.341798941 seconds)
    (143/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.993292315 seconds)
    (144/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.854136486 seconds)
    (145/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.107552824 seconds)
    (146/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.460714992 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.143083296 seconds)
    (148/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.133300463 seconds)
    (149/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.43878579 seconds)
    (150/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 6.994690706 seconds)
    (151/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.322501052 seconds)
    (152/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.263751855 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.335810818 seconds)
    (154/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.299856676 seconds)
    (155/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.107013255 seconds)
    (156/341) benchmarking ("sort", Bool, false)...
    done (took 2.230253956 seconds)
    (157/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.158054643 seconds)
    (158/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.882715662 seconds)
    (159/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.578308164 seconds)
    (160/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.284381275 seconds)
    (161/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.151721636 seconds)
    (162/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.117773701 seconds)
    (163/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.704249334 seconds)
    (164/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.004001537 seconds)
    (165/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.427382904 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.019050225 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.011474049 seconds)
    (168/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.96855473 seconds)
    (169/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.004328271 seconds)
    (170/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.113297061 seconds)
    (171/341) benchmarking ("sort", Int64, false)...
    done (took 8.533707886 seconds)
    (172/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.138133598 seconds)
    (173/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.586692249 seconds)
    (174/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.11926118 seconds)
    (175/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.034083068 seconds)
    (176/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.516031303 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.092785252 seconds)
    (178/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.324607707 seconds)
    (179/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.130693624 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 4.86332382 seconds)
    (181/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.257223796 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.172710578 seconds)
    (183/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.004723478 seconds)
    (184/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 5.465610898 seconds)
    (185/341) benchmarking ("map", abs, BigInt, false)...
    done (took 6.999002232 seconds)
    (186/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 3.115744854 seconds)
    (187/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.035645538 seconds)
    (188/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.317007827 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.029550228 seconds)
    (190/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.191957801 seconds)
    (191/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.542322443 seconds)
    (192/341) benchmarking ("sort", BigInt, false)...
    done (took 7.000542597 seconds)
    (193/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.180908097 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.117732063 seconds)
    (195/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.293020272 seconds)
    (196/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.128972415 seconds)
    (197/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.122472846 seconds)
    (198/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.000668447 seconds)
    (199/341) benchmarking ("map", identity, BigInt, false)...
    done (took 4.87350378 seconds)
    (200/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.171209054 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.329043524 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.60069514 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.001575457 seconds)
    (204/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.002700613 seconds)
    (205/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 8.621644355 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.079375516 seconds)
    (207/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 4.982266166 seconds)
    (208/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.470194642 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.005790209 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.166663389 seconds)
    (211/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.00959389 seconds)
    (212/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.541670347 seconds)
    (213/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.016854965 seconds)
    (214/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.543537033 seconds)
    (215/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.327895961 seconds)
    (216/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.113900849 seconds)
    (217/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.436993642 seconds)
    (218/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.001918 seconds)
    (219/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.002978131 seconds)
    (220/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 4.485510342 seconds)
    (221/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.269557907 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.015134124 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.119810601 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.144624068 seconds)
    (225/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.14654681 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 6.999953304 seconds)
    (227/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.159898231 seconds)
    (228/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.75322732 seconds)
    (229/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.142870747 seconds)
    (230/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.146933228 seconds)
    (231/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.020116303 seconds)
    (232/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.995035037 seconds)
    (233/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.377870184 seconds)
    (234/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.020868161 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.884659219 seconds)
    (236/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.3765617 seconds)
    (237/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.142012833 seconds)
    (238/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.344081263 seconds)
    (239/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.289439252 seconds)
    (240/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.274289507 seconds)
    (241/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.606029102 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.410712225 seconds)
    (243/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.537493368 seconds)
    (244/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.008044777 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.474015843 seconds)
    (246/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.151333503 seconds)
    (247/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.018381978 seconds)
    (248/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.511883792 seconds)
    (249/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.29144148 seconds)
    (250/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.082266147 seconds)
    (251/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.00297702 seconds)
    (252/341) benchmarking ("sort", Float64, false)...
    done (took 9.237368071 seconds)
    (253/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.168449859 seconds)
    (254/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.042034625 seconds)
    (255/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.601009388 seconds)
    (256/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.23639329 seconds)
    (257/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.852547882 seconds)
    (258/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.4195981 seconds)
    (259/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.796859554 seconds)
    (260/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.530753556 seconds)
    (261/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.333306218 seconds)
    (262/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.157769313 seconds)
    (263/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.062140029 seconds)
    (264/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.030233565 seconds)
    (265/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.999499633 seconds)
    (266/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.012216496 seconds)
    (267/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.068145907 seconds)
    (268/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.015009184 seconds)
    (269/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.127633687 seconds)
    (270/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.003750645 seconds)
    (271/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.598234815 seconds)
    (272/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.020125429 seconds)
    (273/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.134549765 seconds)
    (274/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.50868688 seconds)
    (275/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.342883859 seconds)
    (276/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.007654841 seconds)
    (277/341) benchmarking ("sort", Int8, false)...
    done (took 5.723552634 seconds)
    (278/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.270338529 seconds)
    (279/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.111244445 seconds)
    (280/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.018520267 seconds)
    (281/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.304635384 seconds)
    (282/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.029070191 seconds)
    (283/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.201031862 seconds)
    (284/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.1362601 seconds)
    (285/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.415909529 seconds)
    (286/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.690395345 seconds)
    (287/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.272199148 seconds)
    (288/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.012090114 seconds)
    (289/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.26462006 seconds)
    (290/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.198554412 seconds)
    (291/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.224202755 seconds)
    (292/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.124835878 seconds)
    (293/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.243515157 seconds)
    (294/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.007295424 seconds)
    (295/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.00528448 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.110473778 seconds)
    (297/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.159174307 seconds)
    (298/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.025044473 seconds)
    (299/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.018698219 seconds)
    (300/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.000864386 seconds)
    (301/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 8.551767578 seconds)
    (302/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.011679409 seconds)
    (303/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.392089544 seconds)
    (304/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.021943836 seconds)
    (305/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 3.96742504 seconds)
    (306/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.100081119 seconds)
    (307/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.003477637 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.17221461 seconds)
    (309/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.256336694 seconds)
    (310/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.170344766 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.154429564 seconds)
    (312/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.006569228 seconds)
    (313/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 5.053009437 seconds)
    (314/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.141238478 seconds)
    (315/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.328246956 seconds)
    (316/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.01984469 seconds)
    (317/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.195741566 seconds)
    (318/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.004082782 seconds)
    (319/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.499382347 seconds)
    (320/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.029399883 seconds)
    (321/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.021280329 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.221787745 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.357038729 seconds)
    (324/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.014429373 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.168399118 seconds)
    (326/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.131107458 seconds)
    (327/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.012645054 seconds)
    (328/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 4.78736394 seconds)
    (329/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.175528438 seconds)
    (330/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.162550623 seconds)
    (331/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.139265549 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.301884812 seconds)
    (333/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.016939128 seconds)
    (334/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.022217076 seconds)
    (335/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.020997103 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.882227646 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.998540397 seconds)
    (338/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.103639672 seconds)
    (339/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.00266161 seconds)
    (340/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 3.580664416 seconds)
    (341/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.01975395 seconds)
  done (took 1180.819994321 seconds)
done (took 1182.873002602 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.02433451 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.004706829 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.57542423 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.017880005 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.002837388 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.005886301 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.548443841 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.039052876 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.011584102 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.552861955 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.019912221 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.006563471 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.010120523 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.020751329 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.009625909 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.012568295 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.009282412 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.02945846 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.020117387 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.007304328 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.084684827 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.0055239 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.001638914 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.048740665 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.003212193 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.01229159 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.022123225 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.07212158 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.068588882 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.006348483 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.012609213 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.400602985 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.066405099 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.008800165 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.008852758 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.011050796 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.007464333 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.011414223 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.020725431 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.014467089 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.00367231 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.01507913 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.008268094 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.004037115 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.00187525 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.002725667 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.004976224 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.098878642 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.013266466 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.414734337 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.076045839 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.021171012 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.070227628 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.005205699 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.007272198 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.005042585 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.071059348 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.009685078 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.005887276 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.411367866 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.116414532 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.011892481 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.409748092 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.079946591 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.015761891 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.013193124 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.003488321 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.023657379 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.399487038 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.603780038 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.041977866 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.027992399 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.005100005 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.009465266 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.01558005 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.549423632 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.021405196 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.682571966 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.03832748 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.012951885 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.01251013 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.007911706 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.006063192 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.015025772 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.03102818 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.00686901 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.010138904 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.011770685 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.016077311 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.403009854 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.062976016 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.57522512 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.022311602 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.024942065 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.029505104 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.68434616 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.037248378 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.022755759 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.005712062 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.401781188 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.057960033 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.026004923 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.007399004 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.01098444 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.101033078 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.024209926 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.025855791 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.006052162 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.027354212 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.017112794 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.007394306 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.019785955 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.028453131 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.024627625 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.014182705 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.003937107 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.019169462 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.010505992 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.023837724 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.01630581 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.011967482 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.015123672 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.006566562 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.052011106 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.030208362 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.013148863 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.102603268 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.010897318 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.101170458 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.015753178 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.012587732 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.007774734 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.414247483 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.063742899 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.030193844 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.012209692 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.033814181 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.029762046 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.017826425 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.009672391 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.014585642 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.010731097 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.057615105 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.00931656 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.033791325 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.055719373 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.016603145 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.0147006 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.025100817 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.023834728 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.029608862 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.012489044 seconds)
done (took 317.238102926 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.071450701 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.477015069 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.085319171 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.012633166 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.08686692 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.074935272 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.014218857 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.009912876 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.010344735 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.483887879 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.012074418 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.012147565 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.514493238 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.012181407 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.066815531 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.011770872 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.012526611 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.289986562 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.013070203 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.074098398 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.02600589 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.019599363 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.014046392 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.448409315 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.01071353 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.021551377 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.074041238 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.012628945 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.314752091 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.019481706 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.030307181 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.291258382 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.075831123 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.017690365 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.01486189 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.012894554 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.092514714 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.018528525 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.069178941 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.073214152 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.085030215 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.021520545 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.031769281 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.04266562 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.021519814 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.014068465 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.015806068 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.020877988 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.014878635 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.017237319 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.313397358 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.014976584 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.015663743 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.016340969 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.015196483 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.019689769 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.0136281 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.019462038 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.075868382 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.016941055 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.071162762 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.481599168 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.465730211 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.016151278 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.031038911 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.016785792 seconds)
  done (took 160.831295103 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.103699832 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.115927535 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.106079142 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.021595693 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.075044473 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.097735795 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.024899275 seconds)
  done (took 16.48563979 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.023241356 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.015942272 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.046018788 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.042921792 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.013689322 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.189846167 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.027992429 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.016754342 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.049592151 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.017870672 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.381421615 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.046699719 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.020319017 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.020730987 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.029595084 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.058344585 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.019008112 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.014500108 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.122474458 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.09206289 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.019260533 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.017835195 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.052324473 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.029761384 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.018634297 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.019149939 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.017395209 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.028888053 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.01839361 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.01832933 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.016272779 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.032850264 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.017729263 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.007557334 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.018964432 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.017613218 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.016789604 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.020294966 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.020263833 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.407346901 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.017864642 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.019440034 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.018062041 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.017996569 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.018102314 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.045141224 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.019379329 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.017406971 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.019303977 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.019680382 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.054119695 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.023437358 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.019061003 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.018091973 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.05575383 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.019737539 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.018221121 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.019954267 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.019928351 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.01725788 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.016099405 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.092401565 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.049494062 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.022002738 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.050659932 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.061700409 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.020041658 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.020132693 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.019706353 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.045359012 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.018214765 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.062528029 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.018772847 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.112401693 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.017469547 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.201037861 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.047291904 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.022502609 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.023121821 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.983097521 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.029265574 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.020636785 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.023683667 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.044073877 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.020330554 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.021875783 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.021196603 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.023102027 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.029658596 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.019246317 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.071834168 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.020968185 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.022962008 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.116037296 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.018092094 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.125936354 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.050234984 seconds)
  done (took 203.068785241 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.025356864 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.022108493 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.035113077 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.023035575 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.021799814 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.026498651 seconds)
  done (took 14.100972093 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.023087114 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.024231738 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.02283576 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.019799712 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.020340655 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.018432093 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.018793754 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.02437697 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.024232614 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.023172515 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.037571506 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.019303782 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.020353124 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.020602731 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.021947658 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.022986086 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.021418843 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.02074968 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.020261852 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.021008862 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.221622057 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.022253607 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.020222408 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.023819155 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.02777557 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.020682314 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.031197588 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.021900232 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.019974438 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.030737961 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.025152809 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.020429931 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.025872667 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.033148679 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.029124777 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.02549475 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.026962644 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.021137309 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.022190803 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.024404422 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.019917261 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.022757444 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.022187284 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.022418141 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.028274387 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.03018716 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.026390945 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.032544066 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.023974115 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.024811519 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.023410566 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.02337069 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.020927273 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.02114605 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.028294562 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.032070382 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.026301587 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.024100824 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.022413522 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.038127217 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.027385432 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.022047785 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.026645203 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.027806765 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.024207613 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.022044672 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.025993066 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.026676849 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.025089431 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.027416885 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.032513171 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.026211895 seconds)
  done (took 147.913744581 seconds)
done (took 544.350164635 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.049821579 seconds)
  done (took 8.996400968 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.082365857 seconds)
  done (took 9.164524097 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.326374787 seconds)
  done (took 14.303338274 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.066686442 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.06812676 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.031534498 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.031750211 seconds)
  done (took 30.170661862 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.215455408 seconds)
  done (took 9.171516432 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.039199287 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.0258381 seconds)
  done (took 16.111883642 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.162972663 seconds)
  done (took 9.120363384 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.408227682 seconds)
  done (took 9.44155006 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.037196141 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.045026294 seconds)
  done (took 16.079900053 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.025733228 seconds)
  done (took 8.981736531 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.525615532 seconds)
  done (took 10.563378133 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.032554097 seconds)
  done (took 9.019284978 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.111463346 seconds)
  done (took 9.069397538 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.74179037 seconds)
  done (took 9.701173789 seconds)
done (took 171.841807924 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.056848217 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.037441874 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.028352816 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.025783287 seconds)
  done (took 30.098134569 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.066537519 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.066927892 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.068420912 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.076246474 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.055038935 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.052398323 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.068235895 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.065458694 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.055059982 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.082506849 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.066305126 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.086283538 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.072542193 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.071225349 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.07192599 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.086791065 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.088066872 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.067446131 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.058008857 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.069124833 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.085967111 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.084650079 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.024914941 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.02700057 seconds)
  done (took 51.576438292 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.23521426 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.097065886 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.193045439 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.083049999 seconds)
  done (took 10.558415624 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.029797043 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.100161797 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.086322079 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.071933561 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.084540347 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.19504068 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.086270708 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.234591351 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.205821059 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.204616028 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.029996949 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.043134424 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.045198515 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.087192547 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.197072137 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.039138172 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.046780905 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.20732523 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.10169175 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.227428387 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.029026621 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.08694522 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.088565443 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.086961154 seconds)
  done (took 52.566596626 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.041051012 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.041547173 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.038142108 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.029024418 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.031294291 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.028914186 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.04532499 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.032154338 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.057966391 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.033112204 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.029729408 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.035690493 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.029476616 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.029618609 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.028795148 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.050106645 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.049596315 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.031351082 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.031925829 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.042598268 seconds)
  done (took 42.689932342 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.026423332 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.268261213 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.256145726 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.194687105 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.026009713 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.032131992 seconds)
  done (took 32.755646701 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.045548129 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.054310134 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.036649946 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.071936202 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.101935398 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.040842364 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.121652625 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.235132636 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.041883602 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.116060095 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.057766396 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.040768307 seconds)
  done (took 26.929823846 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.030846912 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.031648242 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.032856117 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.045641293 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.042805125 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.039888366 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.047149866 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.028721543 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.04876982 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.054786425 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.042957123 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.047420134 seconds)
  done (took 46.448362432 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.194995715 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.334905684 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.364498617 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.70497012 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.563284525 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.097319918 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.445359094 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.54142069 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.085147641 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.106992612 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.516266659 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.065888543 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.537753798 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.982711525 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.034095298 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.402470835 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.035683818 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.967430282 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.458498519 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.104277099 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.037451754 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.03051415 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.035290894 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.553047793 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.343760327 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.038067426 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.216283734 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.055074114 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.029339022 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.23490711 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.031495011 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.076880731 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.167998531 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.329895464 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.549603849 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.12401176 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.12174719 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.05814884 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.088235081 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.068601246 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.046829324 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.049638725 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.032049521 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.048217069 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.279898261 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.033024166 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.045652049 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.623003361 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.989272056 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.148562234 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204171505 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.716607736 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.075661746 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.997271531 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.169301161 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40086433 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.042153552 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.027402233 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106595553 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.067367663 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.203871677 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.113883319 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.200389493 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.986462655 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.484215589 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214968532 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.035099407 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.040429326 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.317227454 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.409025124 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.151040265 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.163753724 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.826636244 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.03745865 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.037901924 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.096859401 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.153296252 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.049238357 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.761297408 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.544509266 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.987246899 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.138536809 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.665527215 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.041423212 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.032245462 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.046976555 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.884869435 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.988605905 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.119884635 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.074410399 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.381786251 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.034645713 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.036075377 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.063412149 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.040929747 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.988741341 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.617648376 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.112076826 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.987338413 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.586192259 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.035170254 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.01253656 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.052179524 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.052789318 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.429464692 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.080683443 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.765381287 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.685560072 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.374819555 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.622753579 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.045433999 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.849515687 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.13076649 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.117427621 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.034070807 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.785921397 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.00970394 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.127759245 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.207942675 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.036977506 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.990826217 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.06124944 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.171478859 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.035988539 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.072920767 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.035582355 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.047862772 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.03484765 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.043557964 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.617223932 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.062906336 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.553694637 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.147318665 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.035768019 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.981313318 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.062587078 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.512638201 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.154740395 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.07941388 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.453862453 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.62485983 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.51315788 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.993975031 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.877506055 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.516490307 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.140263279 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.119558625 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.65352638 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.196085378 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.118331762 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.034671774 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.196983471 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.04651029 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.041577932 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.034672728 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.730177936 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.862351974 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.084140854 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.035001226 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.990262963 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.047667097 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.220979209 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.707850205 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.082164517 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.048611093 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.119895914 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.338514198 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.036665969 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.990724295 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.452364758 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.271306002 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.539411882 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.387544775 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.686678225 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.122421578 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.052396803 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.220819822 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.126430783 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.700616278 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.653671367 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.418217268 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.491756331 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.054086756 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.042934869 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.103088104 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.430030719 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.062796444 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.753939187 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.000541126 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.536513977 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.076491283 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.49471252 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.990954818 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.049723642 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.503964601 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.043261654 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.60119252 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.284120549 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064581779 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.0512818 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.040299369 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.047461808 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.307224954 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.162076608 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.116788387 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.118471443 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.994280111 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.479535372 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.085395923 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.042393624 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.037977401 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.246013571 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.000826395 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.079245241 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.059792928 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128025643 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.899622033 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.742469681 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.042947488 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.045916693 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.517126364 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.049779055 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.040322245 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.079321506 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.971632167 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.081072114 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.0876349 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.154862771 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.562709004 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.147061688 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.122468485 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.039995843 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.047675966 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.322792926 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.057012885 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.304774231 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.537993655 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.646541567 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.731900879 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.141395463 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.706338468 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.066037254 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.044889693 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.600325378 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.084912403 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.044598786 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.175188196 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.741753281 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.169248527 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.078667398 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.137649775 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.055296062 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.521048537 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.630763059 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.073274797 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.969440804 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.150973926 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.042550348 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.376915817 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.802990765 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.061122595 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.047385086 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.054283305 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.205522195 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.179562351 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.446734465 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.540477305 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.737341562 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.997924374 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.065014069 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.140940436 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.376156152 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.042415542 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.082527651 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.652120622 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.68623016 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.805391996 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.606220954 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.266770695 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.763190483 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.486899076 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.14493167 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.058287118 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.966765237 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.233297983 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.006046499 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175996931 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.995506644 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.841673128 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.346111025 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.071942767 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.516356987 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.080822309 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.554637387 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.455622022 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.08120319 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.181059905 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.079423909 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.043837683 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.112925741 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.043255744 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.977338376 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.175041918 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.051273898 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.443615623 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.092765722 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.091095633 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.053284851 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.604530743 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.077438864 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.051742276 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.792519606 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.07458955 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174689267 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.129863112 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.112626276 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.103406799 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.047278075 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.079473612 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.617871936 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.520373086 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.132335423 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.619310876 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110112036 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.770667596 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.047119603 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.228788694 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.052368907 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.64217333 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102289884 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.436090835 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.051375945 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.210874552 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.372487829 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.14234142 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.054459433 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.001473644 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.62551159 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.110766464 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.529578897 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.054271876 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.800121728 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.529382073 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.06486206 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.569415071 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.028414246 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.054885102 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.261949439 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.741788154 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.718634879 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089985974 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.052225798 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.179181723 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.236584206 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.139862055 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.825798742 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.06412114 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.077880097 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.240503531 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.198533234 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.001179143 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.576888632 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.802670862 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.317356284 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.08388432 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.18883843 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.181187778 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.190958481 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.096058357 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.130478749 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.776722057 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.525267343 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.15383214 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.002368405 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.051596353 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.732873174 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.77862114 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.138403643 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.392856205 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.492825313 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.14926938 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.108118387 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.055799374 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.525203093 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.738779641 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.74560376 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.377201957 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.562881008 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.632207929 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.798113865 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.777804745 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.236348088 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.172421383 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.458689222 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.970787811 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.436162677 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.382287223 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.061627378 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.001534648 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.193775435 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.059708688 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.124726564 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.783317822 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.330938896 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.117788933 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.903977185 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.629040447 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.078120292 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.08124228 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.088867306 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.079933847 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.071656043 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.054154029 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.577508746 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.436147749 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.070451924 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.010225854 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.804280463 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.005782206 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.237944137 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.026089333 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.099354143 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.864510833 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.134285485 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.21302431 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.587504603 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.114020867 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.098381492 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.004747131 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.123290358 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.038180871 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.698621953 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.814139348 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.081266667 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.057051217 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.187952738 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.039484424 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.101519038 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.061401935 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.366415117 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.735041153 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.551837883 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223518674 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.408451128 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.344295788 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.019320885 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.155105853 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.286867802 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.006942535 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.1193056 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.03677764 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.107040101 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.129436266 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.054159389 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.060279425 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.294908905 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.18627184 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.203212439 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.204610216 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.061634795 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.080655051 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.160328357 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.194277616 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.06060529 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.064607392 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.146839304 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.194698356 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.056488014 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.015616135 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.239403025 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.137505755 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.441812772 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.135819417 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.647177742 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.061234928 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.699099473 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207918022 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.561876617 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.061230379 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.167903302 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.133480171 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.056634097 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.54789945 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.69363833 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.194380311 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.309754408 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.996325462 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.077361211 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.11080607 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.059839603 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.072406137 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.659428212 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.490042869 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.05676843 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.509235308 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130000612 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.065614628 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.789271695 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.535013315 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.059819533 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.834775716 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.017849931 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.527899909 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.664983947 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.067409279 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.194901118 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.064919398 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.01153739 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.05854357 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.14326403 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.566866572 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.075832128 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.590122134 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.18683222 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.198391814 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.07012565 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.062040037 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.069335067 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.242593412 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.652644459 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08212995 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.322060907 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.196516791 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.066660382 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.585532772 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.74839854 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137930695 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.111436734 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.052856602 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.413566522 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.835762785 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.078913364 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.601254436 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.362911725 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.062587038 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.289292813 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.309259198 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.059237456 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.221531184 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.166956022 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.308990997 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.324374347 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.625925096 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.162283852 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.086752246 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.189622815 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.069114545 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.592064398 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.510481433 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.145751092 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.059898259 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077217647 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.061961089 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.132361264 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.031001359 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.240638219 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.316273883 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.083560757 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.576101696 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.063130065 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.011194396 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.062584305 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.090751952 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.063034656 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.011723477 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.926534326 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.885678505 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.229623947 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.382974775 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.01014305 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.197058563 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.052450876 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.016072357 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.541406208 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.061867304 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.439467 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.012976663 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.065546809 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.012788089 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.192120986 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.291792914 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.391384336 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.064560958 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.021630208 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.072780738 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.063907802 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.068565048 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.149215344 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.062131353 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.305136118 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.513334413 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.323042563 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.229801462 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.902458438 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.89663697 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.032448455 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.107246888 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.061461014 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.61460169 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.18446608 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.260216146 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.886039827 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.041121552 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.604677782 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.087124896 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.756593319 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.070856277 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.06691903 seconds)
  done (took 2397.614543063 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.122262826 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.193099597 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.12334051 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.11544167 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.128093283 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.151135206 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.112193974 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.092896532 seconds)
  done (took 59.024688959 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.061930126 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.075318503 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.084527252 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.062479306 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.066224993 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.079036842 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.277265768 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.103177954 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.064178729 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.076324787 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.063169402 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.071621915 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.078393078 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.066140303 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.074815493 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.317136145 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.092519624 seconds)
  done (took 80.761547841 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.105539747 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.941188302 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.069826143 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.299224756 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.071707288 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.346861881 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.068555216 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.070233074 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.091719259 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.729664553 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.074874428 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.088486491 seconds)
  done (took 89.952066657 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.065113856 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.06692667 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.065876499 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.072567867 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.072178012 seconds)
  done (took 12.339732406 seconds)
done (took 2935.401119352 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.284264804 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.192639658 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.164919493 seconds)
  done (took 6.343170332 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.126449312 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.191621246 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.257032082 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.204215049 seconds)
  done (took 10.789359819 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.359261189 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.546855633 seconds)
  done (took 6.896047343 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.597542437 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.065551444 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.603895891 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.069920811 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.070918201 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.075410992 seconds)
  done (took 23.227012039 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.069277282 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.069133112 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.067194522 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.066811654 seconds)
  done (took 10.270225367 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.065587773 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.097551107 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.068386189 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.08103683 seconds)
  done (took 22.300322131 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.2281877 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.32908624 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.815876022 seconds)
  done (took 9.36258877 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.872149087 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.448669022 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.860930973 seconds)
  done (took 10.173791102 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.012231015 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.0862771 seconds)
  done (took 8.093660219 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.224857198 seconds)
  done (took 4.216779283 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.548246868 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.548723993 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.919453688 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.926102821 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.080609408 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.377193758 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.430512192 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.379708935 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.75615453 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.588291695 seconds)
  done (took 28.547249033 seconds)
done (took 156.765385954 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.903237847 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.47816169 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.241294909 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.097167848 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.166772388 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.243810095 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.14059772 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.869366454 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.337546094 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.339704683 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.109428633 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.168105717 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.131234301 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.470400103 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.136507224 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.426490584 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.480020384 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.885889191 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.051464167 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.471024182 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.146306079 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.625454306 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.792697987 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.617165667 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.481444158 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.201376375 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.09804951 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.435690612 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.314958341 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.098944485 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.210458279 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.726919557 seconds)
  done (took 183.890355777 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.070741179 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.074302447 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.074210171 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.074264511 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.017826694 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.071550848 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.077663247 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.071517222 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.765604079 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.767484356 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.073775329 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.019794121 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.07686124 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.07535803 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.074218548 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.075674065 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.97732255 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.074687456 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.075286547 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.074707554 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.074628218 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.890638858 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.074543748 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.887996088 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.976684281 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.07384591 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.073099168 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.074698453 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.073006146 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.073935554 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.080225971 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.074123322 seconds)
  done (took 219.094913021 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.07073699 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.078483742 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.07638442 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.07729204 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.078062232 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.076114711 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.089977034 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.077008821 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.077147079 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.078177009 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.0773768 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.074936137 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.073877035 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.077536588 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.07650207 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.079155255 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.076747088 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.075205437 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.078319265 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.075996979 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.080448529 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.076799273 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.077003222 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.078005995 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.075730335 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.076628891 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.075612974 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.073740342 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.077006819 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.077047455 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.074304182 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.076101881 seconds)
  done (took 228.469872533 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.373852625 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.076090122 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.074412981 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.844883338 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.07522917 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.072920052 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.841057223 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.372058931 seconds)
  done (took 22.736493928 seconds)
done (took 656.208077636 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.79768347 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.988985243 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.246918967 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.108389179 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.697297609 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.170250646 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.097730603 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.198196912 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.862409265 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.21410768 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.577938944 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.108127647 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.984114026 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.13775752 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.249968472 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.176442617 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.503845436 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.813128014 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.278935638 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.921762792 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.341355092 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.071979892 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.217709368 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.921108921 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.597483325 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.113862993 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.211218112 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.51080452 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.108639055 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.367605164 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.158698406 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.511495956 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.129061757 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.105888996 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.169980176 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.157158516 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.425122987 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.12019071 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.241423982 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.849211245 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.913403604 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.734708484 seconds)
  done (took 112.108818292 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.083656339 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.081172363 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.082512042 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.083570659 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.081409182 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.082127712 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.084244865 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.083522963 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.097912065 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.083267798 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.082539848 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.083187202 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.080883995 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.082446097 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.081843763 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.083817865 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.083630142 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.082896256 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.084466705 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.084385687 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.083469102 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.082549485 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.077568664 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.081008032 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.082342937 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.083912878 seconds)
  done (took 56.1883608 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.079042502 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.292937435 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.441078817 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.116031751 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.077122305 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.08165898 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.119598565 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.087227754 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.079699937 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.079978216 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.187905908 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.086947865 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.095018726 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.437190065 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.115725887 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.082062846 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.08049731 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.081996586 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.304892779 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.101413593 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.12673354 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.109292519 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.121044648 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.10022038 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.083400357 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.080723401 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.088260001 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.579919118 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.094737762 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.187479351 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.188395086 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.150737919 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.543192861 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.455417709 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.15812535 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.090522089 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.078262902 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.2349543 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.096730246 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.081197116 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.120484156 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.092546497 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.438468443 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.722396988 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.111472671 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.082345895 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.56128287 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.247996187 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.139173621 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.09727307 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.446687276 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.119036975 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.078144866 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.081243101 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.124221267 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.093152886 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.08260988 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.424286507 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.099319586 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.122328006 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.092605582 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.083643469 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.308136773 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.094075943 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.295085617 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.097020006 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.092230055 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.086788854 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.442271257 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.118571253 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.713669779 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.106808718 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.08098165 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.189955556 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.30353204 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.598983496 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.101941185 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.306304125 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.567075427 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.133312056 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.092904514 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.546251423 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.138582731 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.096523838 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.081233621 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.08517185 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.091219086 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.14131143 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.123243007 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.644175578 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.719702188 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.448872385 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.135797294 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.100951598 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.08400674 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.421770424 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.095776098 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.079509611 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.434585425 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.743621338 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.106524637 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.094294115 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.695972611 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.109399793 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.132019608 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.099663285 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.451152516 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.120284076 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.12892139 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.08306521 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.106120399 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.085186164 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.12233527 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.097054966 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.082250369 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.689669061 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.259865418 seconds)
  done (took 260.544760592 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.089017358 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.085151279 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.085147454 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.08578698 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.084952159 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.087645521 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.083660982 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.085438847 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.087119666 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.080579846 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.083269491 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.084234957 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.090480188 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.097273093 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.119245182 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.086127501 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.878148783 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.082442814 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.085980008 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.09253565 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.797987767 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.09195931 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.085451325 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.086383053 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.088446721 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.086339238 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.088081296 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.110814449 seconds)
  done (took 174.005873619 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.083859116 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.152961843 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.098599664 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.153641468 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.099030563 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.085358294 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.118717418 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.108307745 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.093993085 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.086367094 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.08643811 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.126214872 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.094989463 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.192644143 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.132949379 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.127950255 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.193720065 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.095702234 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.08676634 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.084916036 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.153691864 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.103079282 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.125294706 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.169291878 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.102021299 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.153472638 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.1072213 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.088082643 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.088422753 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.212552091 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.111463397 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.127700045 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.136052468 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.114752238 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.218993806 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.215466573 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.199651221 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.128193447 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.096029387 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.086326941 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.088168809 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.09374311 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.15600549 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.102125379 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.089907659 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.222137165 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.114903886 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.08762067 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.110369198 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.089324422 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.105200099 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.112365054 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.134298573 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.226940093 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.152668219 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.119024875 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.121558923 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.113301297 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.088483077 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.190613253 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.104046868 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.213830071 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.114917502 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.093509141 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.090141642 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.094486409 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.157640569 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.133249081 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.199790408 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.100326044 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.192756394 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.16683403 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.103042489 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.091115048 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.088512558 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.15900781 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.204722893 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.166797996 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.174594062 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.141183711 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.106965644 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.088494255 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.0961083 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.130046743 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.100922706 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.216698341 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.216111404 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.099359191 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.088189784 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.090089175 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.090878104 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.124172949 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.171587008 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.141631385 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.212606172 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.13829757 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.141018121 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.102021416 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.108729321 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.098395821 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.132490063 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.105930412 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.111900757 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.567668609 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.144581401 seconds)
  done (took 225.995326532 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.50655041 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.149209335 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.176051746 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.357599605 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.510309944 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.385016114 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.144498836 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.157047361 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.158048801 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.297621437 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.201155038 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.211520583 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.140593792 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.121935491 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.144203911 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.1525116 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.186536397 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.524406137 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.267911976 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.111325 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.151279295 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.426832611 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.46927872 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.531696514 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.198382126 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.608564697 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.81704538 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.256775652 seconds)
  done (took 69.392003936 seconds)
done (took 900.229166847 seconds)
SAVING RESULT...
DONE!
