cset: moving following pidspec: 263408
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.752169654 seconds)
loading group "shootout"... done (took 1.148787211 seconds)
loading group "string"... done (took 0.655657025 seconds)
loading group "linalg"... done (took 8.506079122 seconds)
loading group "parallel"... done (took 0.162848942 seconds)
loading group "find"... done (took 2.983623922 seconds)
loading group "tuple"... done (took 2.060278729 seconds)
loading group "union"... done (took 14.235344544 seconds)
loading group "dates"... done (took 1.420465126 seconds)
loading group "micro"... done (took 0.211290934 seconds)
loading group "simd"... done (took 4.641542165 seconds)
loading group "io"... done (took 1.356573029 seconds)
loading group "random"... done (took 9.541685591 seconds)
loading group "problem"... done (took 1.594296807 seconds)
loading group "array"... done (took 24.9862182 seconds)
loading group "misc"... done (took 1.815499809 seconds)
loading group "scalar"... done (took 42.172814437 seconds)
loading group "sort"... done (took 3.21201958 seconds)
loading group "sparse"... done (took 12.775607144 seconds)
loading group "collection"... done (took 18.385232182 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.439427924 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.112944222 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.161121059 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.110188861 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.229989212 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122952964 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.126437164 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.091496742 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.196857653 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139958573 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.136152664 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.421555183 seconds)
done (took 5.710269543 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.304559653 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.239712125 seconds)
    (2/2) benchmarking "String"...
    done (took 0.161381873 seconds)
  done (took 1.551997178 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.090514859 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057400615 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064181106 seconds)
  done (took 1.359654597 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.062935066 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.137972237 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.063538498 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.063773535 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.063792517 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.063554795 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063579556 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063363849 seconds)
  done (took 1.669051621 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071295257 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065346496 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063689349 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.06560537 seconds)
  done (took 1.414841962 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065212305 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118004057 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.061873846 seconds)
    (4/4) benchmarking "different"...
    done (took 0.061796055 seconds)
  done (took 1.456188137 seconds)
done (took 8.98527959 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.157971613 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.772831781 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.851149504 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.14468972 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.310123609 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.343570751 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119779401 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.201381094 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112924913 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074576852 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.149632609 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079976784 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.480018094 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.474601276 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070730123 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.184679251 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.624440532 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.083952232 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.113869782 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.318984779 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.080604967 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.081939906 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086984631 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071053934 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.154997306 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.177757394 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.627992487 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098062151 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067155523 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.193322248 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069605824 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.073531182 seconds)
  done (took 10.631157529 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.114308814 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110372914 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.06596522 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.101228492 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092271747 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067970429 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07258785 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.065921941 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.084994423 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.130939358 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088728953 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.12163439 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.06551318 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.066847854 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.09724508 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.161700016 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081801022 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080282193 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066178612 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079085906 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.092152558 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07791501 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.075760188 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.075351275 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.111221195 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.134603685 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.088888563 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.108442747 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066450225 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077944136 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.09418816 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.107036515 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066557078 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064423984 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.107008237 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.084111554 seconds)
  done (took 4.429735808 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.024278794 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09322465 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.105300876 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096445418 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110031524 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.093983256 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.146012388 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12001812 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097736023 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072349748 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.175618459 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.669429546 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.094964453 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.07061621 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.146384132 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.360182468 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.920045685 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.094069193 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066746333 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.06718058 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096945046 seconds)
    (21/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063274722 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068347929 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.139628065 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066131751 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175795249 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.643493312 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.19086078 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072378632 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09537004 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063493719 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.137996592 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092193815 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.067668081 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.582291098 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065376103 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062308603 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.084071427 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.09155682 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064531712 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.065432857 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.075889234 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063583921 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.116469609 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079319529 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.545340208 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068195207 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.627171778 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.331509241 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072238778 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070436708 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100575252 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066277459 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067163664 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.661405903 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.148625332 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066271197 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.289494359 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069633251 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066904348 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067818652 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.098673248 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066390615 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06749584 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071552546 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.084381762 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.019651223 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.151385016 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.086363024 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067644072 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.42249683 seconds)
    (71/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.115824176 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072970551 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068703719 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06992535 seconds)
    (75/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.063911621 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.137706761 seconds)
    (77/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.098149171 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066322751 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06571466 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.248463284 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.094680211 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088005844 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068284137 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065323129 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064380729 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.577119652 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.977681881 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068606887 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069097678 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.504529026 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063908921 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064488706 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066201868 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.087037499 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065234561 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.061920767 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.062757168 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100090802 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.06758745 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.592129202 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068278969 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.486915346 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069383485 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100582733 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122147574 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066617798 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.103734746 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066662264 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063722968 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072229555 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064433705 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063251251 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067978445 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064336667 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065357105 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067543961 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068364879 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066667067 seconds)
  done (took 23.348699529 seconds)
done (took 40.581332125 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.394560489 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077356741 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.07679523 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.076774222 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.076228358 seconds)
  done (took 1.894993235 seconds)
done (took 3.194315822 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.254525228 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077343852 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062707662 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.203659199 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.08690767 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.178026806 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.218748596 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.169358595 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089440252 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088589327 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089079173 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.344931564 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.233359374 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089847385 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.162320829 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.236011762 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091604076 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064095833 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089170134 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.090526808 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.090406716 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064400431 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.090152112 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.091283272 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.162465117 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089303293 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063110712 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.163031114 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.091719737 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.168453144 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.091861749 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.090615746 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.091776121 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.163820489 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.092971779 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.164647905 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064143374 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.091532849 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.093336055 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.096736837 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.093838711 seconds)
  done (took 6.364057869 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.0766714 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079309997 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080676836 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060013544 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.068968219 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079225475 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060180289 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.078919712 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100280488 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079717864 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079665467 seconds)
  done (took 2.142978569 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070514215 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079766457 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081514937 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059752099 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070737541 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080119393 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.05982643 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079603446 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082590591 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080669861 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081087204 seconds)
  done (took 2.062990827 seconds)
done (took 11.788923683 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190308177 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.087620904 seconds)
  done (took 1.489833975 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.257514962 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.508015389 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 6.025357576 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.125044731 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.102863253 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.118410654 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.240116288 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.099425375 seconds)
  done (took 8.870431684 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.126625982 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.06523788 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.065622804 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066837243 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067857358 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065583052 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065517291 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066069052 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065262396 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.06751582 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065326015 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065412303 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065102054 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067779545 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.06747306 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066873774 seconds)
  done (took 2.472883984 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.100425467 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.06681865 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.095582238 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.059423393 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.06913035 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060509564 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068739218 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070016112 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.067614778 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.067777491 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.069537746 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.067951145 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.068653698 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.068834151 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.069886725 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.070274452 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071097134 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068174723 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.070634405 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071670149 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070895906 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072661796 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073337744 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070392005 seconds)
  done (took 3.058655915 seconds)
done (took 17.12310374 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176600543 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072378964 seconds)
  done (took 1.473660624 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093955171 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091844245 seconds)
  done (took 1.43186987 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072096334 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058056964 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.073866399 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.066854707 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.058744008 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058856965 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.073782969 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059094278 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.058670838 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.058709327 seconds)
  done (took 1.8877104 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062847881 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.064842145 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.062922111 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.06125768 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.063463828 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.059392834 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.061920851 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.059866773 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.066005879 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.058968336 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.062429359 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08027371 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064534353 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.080892508 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062312761 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.062407482 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064225834 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06285606 seconds)
  done (took 2.409848819 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061489728 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059580587 seconds)
  done (took 1.368185427 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064023071 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059128528 seconds)
    (3/7) benchmarking "month"...
    done (took 0.060896729 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060558111 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059198841 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058721084 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059100519 seconds)
  done (took 1.668323889 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.427978182 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.193148808 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.425991993 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068524632 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.081138493 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.266088589 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062944261 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066890889 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066947829 seconds)
  done (took 2.954631605 seconds)
done (took 14.448402945 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.08344757 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.18168678 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.110732834 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.416309666 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.077582812 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065198743 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.094473852 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.209967271 seconds)
done (took 2.505879908 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.283689405 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.206540332 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.25632164 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146397694 seconds)
  done (took 2.866699903 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.418960525 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.167061644 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074810624 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064990191 seconds)
  done (took 1.991634316 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065521495 seconds)
    (2/2) benchmarking "read"...
    done (took 0.068984864 seconds)
  done (took 1.398380561 seconds)
done (took 7.809206198 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072681443 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.058820948 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.064580522 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.060467056 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.060470746 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.059970417 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.060717069 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059056184 seconds)
    (9/24) benchmarking ("zero", "Float32")...
    done (took 0.06173446 seconds)
    (10/24) benchmarking ("one", "Float32")...
    done (took 0.061313656 seconds)
    (11/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061118492 seconds)
    (12/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.089247642 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060622256 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060483695 seconds)
    (15/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.06474156 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060893932 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.060519723 seconds)
    (18/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.060107699 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060799128 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059958787 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061539522 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061833388 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061010383 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062632999 seconds)
  done (took 2.791745555 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079256634 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063064372 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.063935218 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063531944 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064147298 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.06407481 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064056138 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063021297 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064166693 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063010642 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.0650085 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065178307 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.062960244 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.064465474 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06310174 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.064528655 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064169359 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063706726 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063691777 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.064746618 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064210849 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063592726 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065302916 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064929516 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065372391 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065360667 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.06443535 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064700817 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065656813 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065499423 seconds)
  done (took 3.220133406 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067070102 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057595827 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057522114 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067490816 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057265914 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057569463 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058135173 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057373127 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.0585059 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.058944325 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058143789 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.05754295 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058213191 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057455361 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057442177 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058142882 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.062996724 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077869542 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.057878343 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.057582598 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062368965 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.057837103 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.057624719 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.057745039 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058387606 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058535106 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.057974171 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058892435 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058430316 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.058958694 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058324611 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062915532 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064768128 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058764222 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068679554 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06338232 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058305606 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064878036 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059153384 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058242133 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058224105 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058766778 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058718879 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058677735 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069080736 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058660559 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059643801 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061704188 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.05894248 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058768946 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058487786 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060084245 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064276041 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059979484 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058361447 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059530919 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058311557 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059201552 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.059116921 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060209285 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059508156 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062988584 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059877918 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.05930408 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079510071 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060145254 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069199303 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.05848473 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059133885 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062577985 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.05885606 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077646838 seconds)
  done (took 5.646622738 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072180869 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068143432 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.075903686 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067177458 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061421436 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058616328 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061634488 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058543036 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067465972 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.061949161 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058543635 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061450282 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068050204 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06255367 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.05958747 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067265399 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062031332 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061031578 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.05928513 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062378714 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060260171 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062300576 seconds)
  done (took 2.69752734 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.143571179 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064839524 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106339841 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.067798837 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066075241 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067259473 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063865308 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064078656 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064311878 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064522198 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064380467 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06402032 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065947405 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064523317 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064581811 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064862351 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06482498 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066305914 seconds)
  done (took 2.576002975 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076817425 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063783222 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089738577 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063100519 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.063356437 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063282779 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066885441 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.06727709 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.064025115 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.063849167 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067114268 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063221555 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063625473 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063658826 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063293869 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.063625645 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064661358 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064093071 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06850261 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067353485 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067480187 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067924432 seconds)
  done (took 2.747294132 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078279698 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062589631 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.07820599 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063904733 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057773237 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058313358 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064485209 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.062962927 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064362643 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062497831 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062855786 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.057985744 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065848274 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063798945 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065453064 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063206345 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.062713376 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063078552 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062662041 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.057968245 seconds)
  done (took 2.561772504 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.097895713 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060504284 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060464939 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066909372 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061143016 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060708608 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076658362 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060380957 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060489301 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08416963 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060472642 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060583972 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065391204 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063322946 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.060456846 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065023979 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064934894 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065378948 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061442574 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061533131 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084935319 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06125745 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065879381 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061200249 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061309707 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061802323 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061797447 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065008929 seconds)
  done (took 3.122906472 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065338653 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061641045 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061834486 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061505035 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06198072 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061241975 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061388107 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.06434785 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061312665 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061747409 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061237675 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061529713 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061212683 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061216469 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061212059 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061119547 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061238158 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061682567 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062333397 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061725748 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061296019 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061514293 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061582884 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062597233 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062752072 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061769133 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062146759 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062435506 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061838543 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062039495 seconds)
  done (took 3.153551737 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073156937 seconds)
    (2/2) benchmarking "in"...
    done (took 0.06894145 seconds)
  done (took 1.429537827 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061841852 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.074894395 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057399483 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070288487 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.065790042 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.061748785 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067818262 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066125292 seconds)
  done (took 1.810485516 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092743121 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.115096896 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059408272 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06002025 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.090638361 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126193069 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.100452284 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.07185009 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074677368 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062777788 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.059871065 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.100497498 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059016261 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07302601 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060442445 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.068900359 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06757735 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078303514 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073115313 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.05817959 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072698805 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060701642 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059899014 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061135844 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06067745 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067556755 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076427459 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07281055 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068776334 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058342795 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079275192 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058772245 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060116782 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068884667 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.092237791 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059137586 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097004733 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060162655 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064497654 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058745895 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071713837 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080387964 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073690123 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077393932 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060463613 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.060665195 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058518785 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060738599 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063068546 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.0685866 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058745325 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066785891 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058725763 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060349296 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070057425 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059455761 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064078503 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068780856 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07322709 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07002108 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.07171948 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07487008 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068656934 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067709334 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.059916508 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07945602 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061135538 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073768194 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075165342 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060588392 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073184364 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058864713 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058176462 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059070913 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094177101 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061186034 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060662145 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060061334 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.06193528 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06242124 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070921662 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066085699 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069194817 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06445026 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077486768 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070482814 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.06068467 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.06893406 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079846505 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065101251 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061294274 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078704354 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065141754 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060426703 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079936481 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072030986 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063903027 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.06319776 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065562222 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076309445 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063064303 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060579873 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074946797 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.068344409 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.251223528 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063345459 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067423417 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058820714 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069980187 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064447081 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06039671 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057440218 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063097206 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.058955062 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.056903125 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067855831 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058252514 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072922189 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065081226 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073263532 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074001382 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069113862 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074382274 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058025968 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060475969 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.07686718 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068082804 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059087345 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076328616 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057437127 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.068909777 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057801922 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059260185 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.067699105 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057080824 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059744258 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.057960941 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.06331283 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059213115 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059699531 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064771269 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068558897 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.0712288 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059236112 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067430215 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058516494 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074317575 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.068944669 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063723402 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061428744 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059423934 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071507871 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066291124 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069015031 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.05919202 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060701151 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060208725 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070743986 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069359974 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06091866 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067229562 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064181235 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060032961 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059517495 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06028082 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063299332 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062315341 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060056951 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067686096 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068691725 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073908766 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066858759 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068907457 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058743739 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058924744 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060919051 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058728268 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064057812 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069003992 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075191316 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071147292 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081130162 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059799371 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069676401 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060811926 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.07680133 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073750246 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061325423 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064137754 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058485203 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060948242 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069186356 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072398555 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075314189 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07810822 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066328423 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066169182 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060713251 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076981372 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060959298 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069856735 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070995022 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06682905 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060643857 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062445239 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070353847 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065621894 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061327186 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076946158 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069241983 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061006165 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076626525 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061805285 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072844205 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060933979 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066290697 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067681572 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063667989 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071908592 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.235551966 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058309806 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059173713 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074588536 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060117984 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059797541 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.06724538 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.073985506 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063281771 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067615655 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069706458 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068848438 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063206836 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068489795 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059168773 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068218827 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060873705 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070032399 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.05803418 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076445351 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057183251 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073885643 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058307127 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069426187 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059517236 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.06836857 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059090298 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075528284 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059765423 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.058880885 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070498108 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057321877 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068251576 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057745361 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.06386793 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065083642 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068036412 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059787746 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067927532 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059524743 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068234852 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063844875 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066975917 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067928263 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063326386 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.0580445 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067580671 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070217763 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.0676263 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060262022 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060256582 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059523394 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.068900593 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060362756 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060261934 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068282767 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065129802 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065713481 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060675332 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061010467 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.060976175 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068330307 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069166448 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080651606 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068249378 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.06708061 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068877976 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059044927 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075752945 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059433218 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067473004 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058476556 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066105764 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069191528 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.05940367 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078728431 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06063282 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067438889 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071797441 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068126398 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063357041 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077798596 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062993859 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068270402 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068080501 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065438869 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067354624 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061674556 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068591986 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069697841 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070690892 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060687868 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068868707 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070735678 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062731598 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070846471 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062745596 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070003688 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.06301747 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059968219 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066398671 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073817125 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066310559 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066560984 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061755782 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060838907 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061354075 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070139712 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067079734 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.07085707 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077916005 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060470232 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062723277 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.06144063 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065587541 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081445789 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.234501943 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068230425 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064009651 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.057757074 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.059774304 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.059856374 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058478144 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061106343 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057386844 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057744906 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069436292 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059814355 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063025913 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059120047 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059159718 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068596383 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.0619782 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058568198 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065171421 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.057905337 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.063747271 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057298952 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059259614 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063116457 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057455014 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062331769 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069255005 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075245182 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065477839 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.06846687 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059344697 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066708223 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073930172 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065338486 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059192174 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.067914471 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057307367 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077049777 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068250825 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067478083 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.06820013 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059674819 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075422871 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063521343 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069153974 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074371797 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059992048 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066351989 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058439591 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075151169 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063881622 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058432607 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067264708 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067179036 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065068818 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07125758 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060091814 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067808933 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064209654 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063746785 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061399291 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060797601 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068509082 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.07590191 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060009628 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064446391 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067833763 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.06863907 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064226605 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071796229 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067840621 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060594122 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061084028 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063389105 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.06118139 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072773881 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060396503 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064429319 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.0641818 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058715015 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066441561 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076248106 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069152959 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069490677 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058952678 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058534816 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.077907727 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064072617 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062981821 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068663116 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070768071 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072549553 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069484965 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077113148 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061617513 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067127071 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073820632 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061662971 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060634131 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064939647 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06234389 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070509508 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071579113 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068820081 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063374998 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071068099 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074938428 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06201411 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065899969 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068113213 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.0623532 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072547284 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070129239 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070722489 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063089884 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061048436 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065502735 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.229441607 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067799474 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.0681826 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059694673 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065222716 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.07232808 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06639421 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061000902 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057604855 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060978035 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067665393 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.062848872 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.05768529 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06353515 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062368511 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065872071 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068193749 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063183554 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057611997 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075150045 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066437385 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067807016 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059774583 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060327662 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058788116 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057723834 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069556039 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057572875 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059785383 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063700389 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059719658 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076914423 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067702386 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074741345 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059160009 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063179609 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057739455 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068045075 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063224721 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058568295 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069609406 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057584309 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074017793 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070185335 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.064714591 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.05867824 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06529755 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067949804 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074754207 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069099058 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068479901 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062169031 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069209842 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060609084 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070311792 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058528676 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.057923645 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069536194 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068045462 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072257329 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059124546 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070354516 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061612932 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068274804 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068005152 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060933375 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060991379 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061020027 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069284656 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064186292 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069371877 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064604094 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077112962 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060277222 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070770856 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069389081 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071157782 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074451508 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072615159 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.06798007 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060159691 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067273784 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.06791475 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.060741283 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065114939 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062610935 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082197168 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061583428 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061347648 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074718552 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067570624 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060453566 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068159045 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06612696 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071742031 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062032223 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071844432 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066803238 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062029598 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066038503 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066053219 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059633281 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06032427 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060757528 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071126733 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065871952 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061759685 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082519071 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064009829 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070923633 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073586679 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.06881465 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063489841 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060681606 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.220163381 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.073425913 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074977701 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062595705 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06831503 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060679516 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068420714 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057268911 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067309294 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066626795 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067180778 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057681718 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058407494 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073616016 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074027386 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063305416 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074589458 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067805641 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059427694 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080250535 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068595362 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059289748 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.06934455 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060024421 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057516696 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.05741788 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059674541 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070141864 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058012182 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060218841 seconds)
  done (took 41.640144618 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102143258 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059644674 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060964416 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.057917992 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065110836 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.05945602 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058663036 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059621085 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.060024678 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060547507 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058341542 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058296115 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06350887 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073011939 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065917846 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062719142 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.05889462 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060070686 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.05836375 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059398798 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.06456655 seconds)
  done (took 2.718744305 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064570534 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.061908436 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061606803 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061668003 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062035761 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059409293 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06271655 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058485201 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062219891 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058796797 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062298277 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058523107 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.058864365 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.058971436 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058740539 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059816345 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062269033 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061290204 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058366322 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061682464 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059847701 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063091406 seconds)
  done (took 2.709707576 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062854537 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.05938226 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067562009 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057488784 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057318131 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.060531998 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.057696419 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.062953707 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.06310494 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064047063 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.06859401 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059529065 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.057808094 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064395274 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057799661 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.058950436 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102336722 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.05926918 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059105396 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.057632503 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.060603235 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067492055 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.057840102 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058261913 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063159663 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062430795 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058889754 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061004341 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059009278 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063301402 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059472157 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058105309 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.067903935 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067424735 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063319976 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063340704 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060133206 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059388844 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058359569 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058252813 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067391076 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061041538 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059232469 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060050245 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068170994 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058468906 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058338668 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068175104 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058062549 seconds)
  done (took 4.420380451 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072846499 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.109534276 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064549068 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.090455147 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070014731 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063440822 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064374451 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091782531 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059326485 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.059597675 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.070760361 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071143688 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060626406 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.06176844 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066292191 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061652247 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061918318 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060762386 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.06357636 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.060835589 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063985779 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065816333 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.07081444 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07147882 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062057017 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060482279 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060584275 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062022322 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.070567639 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.063997623 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063130193 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063346085 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071803261 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066346657 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.060763758 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.060897644 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.071841235 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061767463 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061423443 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.059968138 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061097517 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062540251 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.0661046 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072377801 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061617651 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067258984 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062438612 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060174271 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071754938 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061239143 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.064752063 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072350683 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062487475 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065046701 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062955229 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071468005 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061435938 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060313679 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061627828 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071626774 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060463875 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063464296 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072498711 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061158671 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064676402 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072340686 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.0667146 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062492652 seconds)
  done (took 6.014457423 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07097 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093759508 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073607803 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07291358 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068578037 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.06859155 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068390537 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068303166 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068147735 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071269313 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068391705 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.133046338 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065738213 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.069791763 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069157248 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070002402 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069389221 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069288749 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.068969752 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069038468 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.068880376 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073296422 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.068881868 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073359151 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073228207 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065663275 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069271483 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069108787 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073854204 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069757219 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073564037 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069171769 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069143068 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073970396 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074653561 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069483041 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06074815 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069545895 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069834341 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069541839 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066185758 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074453211 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069638637 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066891989 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070272861 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069509131 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074390543 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074082714 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071067742 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072455178 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069669175 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074356573 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069254582 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069859945 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07453575 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077266043 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074502699 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07547442 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070727861 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074616422 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074619157 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077731647 seconds)
  done (took 5.892100634 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075359086 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063714266 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.078181019 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059031696 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058546186 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067583083 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058379063 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058327671 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063991618 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.063946289 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065333134 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067453645 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06913962 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065326065 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067521871 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069649833 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067372262 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067603181 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065707198 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069528789 seconds)
  done (took 2.741054738 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063016612 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.062893516 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058464924 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073729112 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.058609457 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066106715 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.058893835 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058846576 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059928824 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059508979 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063682051 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06332131 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058837928 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066653876 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062274661 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066446411 seconds)
  done (took 2.390265015 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064287984 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066181588 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.093905262 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.059973133 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061466067 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.058906526 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059655627 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058513605 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060583142 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072289333 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059576313 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061425096 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059617482 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058651937 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.058670545 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061353338 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060352078 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059879136 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059877407 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.094794009 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.06795766 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060225011 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.061962642 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060321902 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061335469 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.067599952 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061092667 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061367112 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059641392 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.061737303 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061654687 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070477034 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061657448 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064063827 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.05955661 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059847577 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.059997346 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.061963284 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062018927 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060787172 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058957389 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061535127 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060094106 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060301399 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061104827 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.061852674 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061042951 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070479791 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060344621 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062829164 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060744573 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062090331 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061336218 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071559714 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062522897 seconds)
  done (took 4.862840513 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078974505 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063679516 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057832793 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058472605 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063467634 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064193803 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06404179 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064167199 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064899812 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058270718 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064225845 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063295286 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064167484 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064832913 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065013285 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063961313 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058110059 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06388826 seconds)
  done (took 2.560589326 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068234174 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063368994 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063493189 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059489114 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.059710876 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063905103 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058500687 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060927081 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060224539 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060141438 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060019959 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060548992 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06004862 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.059833462 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063719466 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059965493 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059580004 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058598587 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.059751792 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.05826041 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064345457 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058947359 seconds)
  done (took 2.742252273 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.119077111 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082442009 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.158586395 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078619126 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088556983 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070091439 seconds)
  done (took 1.9960686 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094868645 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095736218 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063412567 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063356971 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06741932 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066073156 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065979844 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066157537 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068866044 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071554041 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066072792 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069860862 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068970526 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071469798 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068177902 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069218473 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066794084 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06678911 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063957775 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074226389 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066916819 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070085887 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066986183 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066495687 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066530368 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071158414 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069843776 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072878885 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06763709 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071079013 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068755963 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067220996 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070318945 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072775171 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06434736 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069757186 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066758929 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074269481 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068554664 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07205612 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064461113 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069164632 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071396536 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070416212 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071045511 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067858293 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070151762 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067409292 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067382643 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078680144 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069158307 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072109587 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068946253 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070678194 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070444592 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078493096 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074088156 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073034779 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069489795 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073751187 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072476865 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069318038 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072432735 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073617833 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070395784 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075513012 seconds)
  done (took 6.054093166 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104262648 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064360637 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069000275 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071987008 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07116853 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06648885 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066800475 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066402455 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066323804 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064044487 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101566237 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068596738 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073283383 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071724673 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067155601 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066770792 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066859935 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071481233 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064756418 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077916811 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066802638 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071452088 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071402083 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071925476 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072595394 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06868044 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067802521 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067174451 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067030752 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067116073 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069737546 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06705866 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07202507 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065054618 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071971307 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067322092 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066900842 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069758426 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067055193 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069075289 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073078716 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075485868 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067283506 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067461824 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07339584 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067558818 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067421024 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064927771 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067471383 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064894277 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073261616 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073297977 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073116132 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072251523 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067654029 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068401076 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067578836 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067569623 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068128186 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069309285 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072537174 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06761068 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079318924 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068136982 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067714358 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073739147 seconds)
  done (took 6.077532073 seconds)
done (took 125.838727638 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.259295227 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.223504339 seconds)
  done (took 1.873568235 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074496633 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.264006111 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075371136 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072036661 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.132861666 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.13134671 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.107900327 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07056833 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072178745 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069743046 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.169002072 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.107909342 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070178337 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069948944 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.095293291 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.070528496 seconds)
  done (took 3.069310097 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.120819971 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.209600636 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080137139 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068406576 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151089377 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075272493 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071168806 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074363939 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.0762845 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068765897 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.116671355 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082475737 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073218047 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074334817 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070970515 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074083554 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.07444492 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075332294 seconds)
  done (took 3.067505545 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103480585 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.111511816 seconds)
  done (took 1.639293687 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.163249892 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.108373077 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146289861 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.616188687 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.139432553 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.142609825 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.147876271 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.14328058 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.113216043 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.140539491 seconds)
  done (took 3.279627135 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106471494 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102225545 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.304979435 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101288762 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.079901033 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074726059 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.07272453 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077344049 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07302893 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074401207 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120356431 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073010701 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.0701019 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122608337 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097307157 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104398515 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.068950641 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076143504 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078110047 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068959749 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073543202 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077653332 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.176259873 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.07674442 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099801916 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073568559 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074907136 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072296545 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072147486 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076508301 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077173089 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099356673 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076320168 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.0831142 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076112235 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.09580633 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070071272 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098845555 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.07301554 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070757988 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072845148 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077069951 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070766508 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079162449 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073239824 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075692463 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078725139 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069266107 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073497433 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072752116 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071649137 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074916386 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.07414282 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07506135 seconds)
  done (took 6.110476319 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.122291188 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109160799 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067767217 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11855186 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.110189141 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068278183 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.123656784 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104371082 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.121521955 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067501588 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067626438 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066916959 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074359858 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078147317 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120065911 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.112822855 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069526388 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067919489 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112245719 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.112586779 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066891843 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.123893604 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.114933015 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.1114872 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06727706 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068239961 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066755817 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067212372 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075126431 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075028884 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067353642 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077383089 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.07972753 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074227633 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066378498 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066619046 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066526662 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075322346 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077590211 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076618563 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.073507244 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066343451 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066636543 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067194077 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067963203 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066165692 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07653779 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076317795 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.076653251 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068279691 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067693868 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067302309 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06930958 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07504448 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07387209 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074857515 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077613771 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068326632 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067620264 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068852955 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078289949 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075796997 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075133957 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068278966 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076367202 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067963286 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078136221 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080507028 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06757976 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068027466 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067912436 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067867157 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06818688 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07415629 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074155758 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068008238 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.07018528 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070233833 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078542823 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076848876 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06901588 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078353066 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068388723 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068835017 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06925938 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07104166 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07985179 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078815217 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070562706 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.07045708 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069828148 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070003784 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069893658 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.081133346 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.228670035 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074275703 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075238044 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067366239 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075608405 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074059553 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066911932 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072450324 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066240578 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066364676 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066391928 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073090304 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072180027 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074014942 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066050372 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065696575 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074534844 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07568465 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066700656 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072592756 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075303169 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.072539088 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.065876637 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075653287 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066342433 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07632819 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067456669 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074636613 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066491127 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072779793 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066594035 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065730741 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066357695 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075491808 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067435886 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066378741 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066388144 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066270924 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072558267 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076720619 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067574923 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073820746 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.07402413 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067475065 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075600227 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067045951 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076301291 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067280578 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067217108 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066294776 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077860552 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066966458 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067777131 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.0701286 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077093485 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067463438 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076192913 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07354892 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067355495 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076844271 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076214402 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074002329 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.076708562 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068049393 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067501336 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.0671921 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067298137 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076716961 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07837841 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069044317 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067487835 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073324893 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.076594155 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067121511 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074393989 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074241504 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074502201 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067954714 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067826905 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077610211 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080283712 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077311819 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.0796193 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077574731 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068906045 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076038129 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079285654 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068978853 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082521887 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069463696 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080546118 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.080746672 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076690923 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.081004969 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.238423006 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076218351 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075056772 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076854127 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066387549 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066475733 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072310604 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06610147 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066481588 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.071819025 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066482117 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067373461 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080274971 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066915668 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075055953 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065902568 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.072666702 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065590209 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066540361 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077397983 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066342525 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066500692 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072521937 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.065971354 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.07191733 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07497789 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072747167 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066285875 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066516424 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075362059 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074904069 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066432471 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066052098 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066672505 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074692255 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073989261 seconds)
  done (took 18.423501301 seconds)
done (took 38.905429755 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169925014 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112284745 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.225287451 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203295455 seconds)
  done (took 2.228386579 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100945121 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063081936 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.108000445 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.116964081 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063422571 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.102787294 seconds)
  done (took 2.015299715 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203233004 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178352091 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.253887739 seconds)
  done (took 2.093674348 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367498386 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.151979007 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.259504978 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.516801775 seconds)
  done (took 2.854651073 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.136369996 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.135243393 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075731686 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.146653171 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082604709 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.06009375 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.145069321 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067788346 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097327139 seconds)
  done (took 2.469929923 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.141416052 seconds)
done (took 13.265421604 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.34931899 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.322334139 seconds)
    (3/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.146431973 seconds)
    (4/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.272574705 seconds)
    (5/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.257233615 seconds)
    (6/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.118883354 seconds)
    (7/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.331422534 seconds)
    (8/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073109215 seconds)
    (9/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.256696264 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.087219534 seconds)
    (11/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.212251396 seconds)
    (12/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.297520859 seconds)
    (13/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.15965046 seconds)
    (14/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.191312729 seconds)
    (15/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.112758971 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.119501218 seconds)
    (17/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.202118633 seconds)
    (18/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.153202221 seconds)
    (19/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.111759986 seconds)
    (20/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.193028384 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074665799 seconds)
    (22/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.161042099 seconds)
    (23/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.073120566 seconds)
    (24/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.265733792 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.077208247 seconds)
    (26/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.184430601 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077552779 seconds)
    (28/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.072098885 seconds)
    (29/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.182882557 seconds)
    (30/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.07738498 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.092625037 seconds)
    (32/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.300000797 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074608507 seconds)
    (34/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.299739142 seconds)
    (35/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.228828536 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.15006697 seconds)
    (37/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065334436 seconds)
    (38/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068226045 seconds)
    (39/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065482578 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.13015263 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072644149 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.088381187 seconds)
    (43/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.09385772 seconds)
    (44/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.079838583 seconds)
    (45/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.076072328 seconds)
    (46/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064757927 seconds)
    (47/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.079615852 seconds)
    (48/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.236199518 seconds)
    (49/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.073790074 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.08675748 seconds)
    (51/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.213049889 seconds)
    (52/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115859738 seconds)
    (53/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.192166845 seconds)
    (54/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.352566611 seconds)
    (55/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.147731529 seconds)
    (56/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07483314 seconds)
    (57/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.155632073 seconds)
    (58/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.149646847 seconds)
    (59/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.20762906 seconds)
    (60/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067091009 seconds)
    (61/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.179002195 seconds)
    (62/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.358387667 seconds)
    (63/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.171752206 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.073721505 seconds)
    (65/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.076461225 seconds)
    (66/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.149861667 seconds)
    (67/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.149808306 seconds)
    (68/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.292469791 seconds)
    (69/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066533971 seconds)
    (70/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.070814019 seconds)
    (71/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.065745914 seconds)
    (72/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.073939716 seconds)
    (73/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.068402437 seconds)
    (74/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.082683681 seconds)
    (75/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.108924078 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066324358 seconds)
    (77/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.22956079 seconds)
    (78/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.077818493 seconds)
    (79/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.140822876 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071960041 seconds)
    (81/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.142704452 seconds)
    (82/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.063405244 seconds)
    (83/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.064344467 seconds)
    (84/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.063321595 seconds)
    (85/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.070962859 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085711379 seconds)
    (87/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.081691318 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.063496677 seconds)
    (89/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.071104888 seconds)
    (90/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.064579232 seconds)
    (91/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.106555243 seconds)
    (92/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.213425331 seconds)
    (93/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.174500891 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.188585098 seconds)
    (95/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.226712972 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133970951 seconds)
    (97/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064857322 seconds)
    (98/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.172835211 seconds)
    (99/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.06590608 seconds)
    (100/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.06486363 seconds)
    (101/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063387001 seconds)
    (102/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.066169003 seconds)
    (103/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.074935909 seconds)
    (104/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.197193701 seconds)
    (105/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066110392 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093252681 seconds)
    (107/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.06462766 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064003061 seconds)
    (109/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.141915241 seconds)
    (110/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.081044483 seconds)
    (111/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071615662 seconds)
    (112/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.081482815 seconds)
    (113/341) benchmarking ("sort", Float32, false)...
    done (took 0.136767443 seconds)
    (114/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094563651 seconds)
    (115/341) benchmarking ("sort", Int8, false)...
    done (took 0.187732378 seconds)
    (116/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075294004 seconds)
    (117/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073458308 seconds)
    (118/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.126463321 seconds)
    (119/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067190943 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.084843375 seconds)
    (121/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.141782876 seconds)
    (122/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071774005 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074787872 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069968484 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131068472 seconds)
    (126/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.176188686 seconds)
    (127/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.069340441 seconds)
    (128/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.217288031 seconds)
    (129/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076742579 seconds)
    (130/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.17571062 seconds)
    (131/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.067574098 seconds)
    (132/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.090098453 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074222641 seconds)
    (134/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.067472084 seconds)
    (135/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.194622356 seconds)
    (136/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067126093 seconds)
    (137/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073233258 seconds)
    (138/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075043121 seconds)
    (139/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068120076 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087805395 seconds)
    (141/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.1643351 seconds)
    (142/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.203745139 seconds)
    (143/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.084084827 seconds)
    (144/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076288431 seconds)
    (145/341) benchmarking ("sort", Bool, false)...
    done (took 0.15024812 seconds)
    (146/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069823186 seconds)
    (147/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.06572149 seconds)
    (148/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066438944 seconds)
    (149/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068379307 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145646892 seconds)
    (151/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.067290438 seconds)
    (152/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.101091723 seconds)
    (153/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.074661964 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.262371915 seconds)
    (155/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.069243638 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089457507 seconds)
    (157/341) benchmarking ("sort", Int64, false)...
    done (took 0.066528438 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.080784285 seconds)
    (159/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.063468055 seconds)
    (160/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.063207061 seconds)
    (161/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072120006 seconds)
    (162/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.203209111 seconds)
    (163/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.154038554 seconds)
    (164/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.178417844 seconds)
    (165/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064803106 seconds)
    (166/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.141303963 seconds)
    (167/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064564971 seconds)
    (168/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.06482903 seconds)
    (169/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066915861 seconds)
    (170/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071165393 seconds)
    (171/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.082484597 seconds)
    (172/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.082168152 seconds)
    (173/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.063823694 seconds)
    (174/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064559316 seconds)
    (175/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074453263 seconds)
    (176/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.072885703 seconds)
    (177/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072141748 seconds)
    (178/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.091160653 seconds)
    (179/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.063777965 seconds)
    (180/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.061859164 seconds)
    (181/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.064308317 seconds)
    (182/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.208703644 seconds)
    (183/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068441378 seconds)
    (184/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.066759031 seconds)
    (185/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.187124435 seconds)
    (186/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.156283481 seconds)
    (187/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.069019395 seconds)
    (188/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072113919 seconds)
    (189/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.08245527 seconds)
    (190/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063548333 seconds)
    (191/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.063586354 seconds)
    (192/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.068632935 seconds)
    (193/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.064609759 seconds)
    (194/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068378054 seconds)
    (195/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.062454538 seconds)
    (196/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072070822 seconds)
    (197/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.21152209 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084894937 seconds)
    (199/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.139304015 seconds)
    (200/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.141253226 seconds)
    (201/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063007735 seconds)
    (202/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151460902 seconds)
    (203/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.160108818 seconds)
    (204/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065694094 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.06438529 seconds)
    (206/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.210676617 seconds)
    (207/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.063766036 seconds)
    (208/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.072861681 seconds)
    (209/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071858734 seconds)
    (210/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.175049683 seconds)
    (211/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071269466 seconds)
    (212/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.064632582 seconds)
    (213/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.180516269 seconds)
    (214/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.065695053 seconds)
    (215/341) benchmarking ("sort", Float64, false)...
    done (took 0.136650545 seconds)
    (216/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.15079259 seconds)
    (217/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.199660682 seconds)
    (218/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067116158 seconds)
    (219/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.064708988 seconds)
    (220/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.070407642 seconds)
    (221/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064444351 seconds)
    (222/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.084657967 seconds)
    (223/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069179521 seconds)
    (224/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073323177 seconds)
    (225/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085308482 seconds)
    (226/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.077302213 seconds)
    (227/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066532335 seconds)
    (228/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.065811726 seconds)
    (229/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065139421 seconds)
    (230/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064377653 seconds)
    (231/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.066809572 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076404324 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074986787 seconds)
    (234/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065772247 seconds)
    (235/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065107358 seconds)
    (236/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.065557979 seconds)
    (237/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.065139159 seconds)
    (238/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072070158 seconds)
    (239/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.066059839 seconds)
    (240/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.065042151 seconds)
    (241/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.06614103 seconds)
    (242/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077508434 seconds)
    (243/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072153315 seconds)
    (244/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069985864 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.102534476 seconds)
    (246/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.151217208 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.187702329 seconds)
    (248/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.092961209 seconds)
    (249/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064637976 seconds)
    (250/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.07747462 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.095634816 seconds)
    (252/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.143369199 seconds)
    (253/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.068028097 seconds)
    (254/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.2268719 seconds)
    (255/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.067443937 seconds)
    (256/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.166926988 seconds)
    (257/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07513554 seconds)
    (258/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.08454287 seconds)
    (259/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.311481953 seconds)
    (260/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.067897012 seconds)
    (261/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066060995 seconds)
    (262/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.077345454 seconds)
    (263/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.066857496 seconds)
    (264/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153531084 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083408372 seconds)
    (266/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.065672668 seconds)
    (267/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.085636629 seconds)
    (268/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.072481635 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064224365 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.064628995 seconds)
    (271/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.06227779 seconds)
    (272/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064252791 seconds)
    (273/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.065695521 seconds)
    (274/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.155054456 seconds)
    (275/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.064944937 seconds)
    (276/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064413486 seconds)
    (277/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.071556394 seconds)
    (278/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064153604 seconds)
    (279/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090634682 seconds)
    (280/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064607423 seconds)
    (281/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.18623245 seconds)
    (282/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068980276 seconds)
    (283/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.159182524 seconds)
    (284/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.062437798 seconds)
    (285/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.064622399 seconds)
    (286/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.063999539 seconds)
    (287/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.064968673 seconds)
    (288/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.073777166 seconds)
    (289/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.064102147 seconds)
    (290/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.063910373 seconds)
    (291/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.063824383 seconds)
    (292/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.064255846 seconds)
    (293/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.09403427 seconds)
    (294/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065079531 seconds)
    (295/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066118057 seconds)
    (296/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.067996893 seconds)
    (297/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.064917749 seconds)
    (298/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093207553 seconds)
    (299/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.063238359 seconds)
    (300/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.063777075 seconds)
    (301/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.083073915 seconds)
    (302/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.063384928 seconds)
    (303/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.089357584 seconds)
    (304/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.064503439 seconds)
    (305/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.07504825 seconds)
    (306/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066050954 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.247845866 seconds)
    (308/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.223602732 seconds)
    (309/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.065479941 seconds)
    (310/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07206944 seconds)
    (311/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064790951 seconds)
    (312/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.070315001 seconds)
    (313/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065259846 seconds)
    (314/341) benchmarking ("sort", BigInt, false)...
    done (took 0.268019971 seconds)
    (315/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078414436 seconds)
    (316/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.080529181 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.120395117 seconds)
    (318/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069739406 seconds)
    (319/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.06527552 seconds)
    (320/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072076409 seconds)
    (321/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.069193952 seconds)
    (322/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.065408805 seconds)
    (323/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.065390165 seconds)
    (324/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065543075 seconds)
    (325/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.06464187 seconds)
    (326/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067179736 seconds)
    (327/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.065183856 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148229933 seconds)
    (329/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.066868297 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.146269491 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09384554 seconds)
    (332/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064857351 seconds)
    (333/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.211638883 seconds)
    (334/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.065999232 seconds)
    (335/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.071535121 seconds)
    (336/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.06980532 seconds)
    (337/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071317415 seconds)
    (338/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.067254724 seconds)
    (339/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.065499529 seconds)
    (340/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064270133 seconds)
    (341/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064893275 seconds)
  done (took 38.771728311 seconds)
done (took 40.257845063 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.12796077 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078472482 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076405774 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072844318 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076151301 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07625469 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076005975 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073548914 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.07817302 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075207439 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.108008611 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063366259 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070784642 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080325521 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072790174 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.0798559 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078364984 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078242235 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064189631 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079495508 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090406488 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077018944 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072589554 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078160478 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064580255 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072572427 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.121545645 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084613787 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069646719 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073526295 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071261177 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.079617039 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071374507 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.07100302 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073496495 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.068840571 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073551393 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070051348 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.121574434 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069487037 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065310942 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076900628 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071060901 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07181458 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072233869 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075664945 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.068993334 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079159967 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063421674 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.07490969 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.121766537 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069425135 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068954321 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073011679 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069691318 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073560774 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068914255 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075308303 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069550214 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.082376991 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076960924 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07255169 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064150315 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07268669 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070968631 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071404521 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062851491 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070130964 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064340182 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064102332 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063320937 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072815498 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071044831 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068970885 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063218057 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063959531 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063358248 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075881791 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071305365 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073120088 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064579343 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069796014 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.070774058 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065286675 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069971928 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075901826 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063809062 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064875387 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063542776 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079023099 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070984322 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064386562 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076131137 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070234631 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07059409 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.065937298 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064819014 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071652773 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073004126 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064608301 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063461215 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070100407 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069353168 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074252728 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065887988 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071099498 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071356824 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064454124 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074377679 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072678475 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075783582 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079618301 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.078030722 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080850573 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067334023 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065619109 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076718694 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.228833568 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069908152 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.072777351 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069171986 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071358099 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064609905 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063027907 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068670772 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.068832242 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063556194 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063501009 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063240539 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071688996 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07006951 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061873274 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.062963868 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071538171 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072425035 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062463014 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062208709 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072704151 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.064360267 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069107283 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068229345 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071662191 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062467027 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063352131 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062126333 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062552781 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062331742 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.06861266 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068785695 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063776822 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071683791 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070170046 seconds)
done (took 12.757538122 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067802923 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106468606 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.116815421 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.110752129 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077608888 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06523858 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067618614 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083729867 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067387416 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08912148 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089378905 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086955506 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.130488197 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062701151 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064263099 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064829693 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062297894 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075920723 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.114821834 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087992231 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.106107176 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.06388076 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080417826 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085091666 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077408544 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083371623 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065768021 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065136281 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067320776 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.08149579 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090415231 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064508766 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065585079 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083808133 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080594249 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073327677 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066855043 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072292019 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065511997 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064327208 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066338995 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082937969 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071410531 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071583597 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065343088 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065304707 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064742953 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072248121 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078428245 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070410554 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07792514 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081379861 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066355475 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066230156 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063409969 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072375886 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064471072 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065415189 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065073151 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064300771 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065101201 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067306773 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069860269 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.074936741 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069061985 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072943707 seconds)
  done (took 6.555584753 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083414967 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092061962 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.07793714 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078449604 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064969632 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064882907 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064597816 seconds)
  done (took 2.128365141 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068135902 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.10603601 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.115118563 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.115532085 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.123177747 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.11206425 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065402601 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097354459 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064133867 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.107700923 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.121418338 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.116574701 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.0683746 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077376951 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065207524 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.116875177 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065471478 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071733978 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.112876752 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.117769561 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069337657 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095289203 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078870674 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066041399 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.117772005 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.108789106 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067519119 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066236163 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067352148 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064726884 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064754727 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.087708877 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.108053603 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079822437 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065595799 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064263553 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.106885485 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066363746 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.105221218 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072355476 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.105875335 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067215868 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067208738 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064934068 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065838576 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.111576698 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.06625839 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064693322 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064537121 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.111207803 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064939225 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.108380144 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067727031 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069946817 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072160084 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071476833 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072414227 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065713156 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.111774006 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07542539 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06699767 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.122198411 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.121200054 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.108334118 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.120869242 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074506392 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111615562 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.108796212 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065544256 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06515195 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065941619 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.122896085 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069684735 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068448199 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070853601 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073454847 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.115804974 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.12717658 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.128912308 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081356228 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06978815 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067012892 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.239513181 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.122909567 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.06964624 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064350946 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065234967 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.0638649 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.06908109 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066073905 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069009039 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064178604 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074761987 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067025287 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066816746 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.115574342 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064698706 seconds)
  done (took 9.984394326 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069460626 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066761676 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.066111851 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065919067 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065743466 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065390007 seconds)
  done (took 2.021099143 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091930774 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065228202 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.078086416 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068608962 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087441669 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.110418783 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.109313027 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.0668099 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081243132 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076194068 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.110138502 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.112568407 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.112470972 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067754761 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.111076705 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066719756 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.111428746 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068821931 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076230033 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067145219 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079192243 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.06668847 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067052675 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.119011671 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068062458 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067666484 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067732813 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.085046766 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076821089 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067301091 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067047145 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068147237 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07470052 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067158143 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.113529792 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075127651 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066150748 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070392368 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067839958 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068755017 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.115406294 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067834372 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069884193 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070476648 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067175013 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074761832 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070392174 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069778887 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.112914437 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07048041 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070346115 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066108725 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.06870289 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070726249 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07491728 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067694664 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070546117 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.113285772 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067606336 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075097182 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066031007 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068083726 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067346803 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068082616 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071271916 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070947914 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075682485 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067688347 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068456266 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066799458 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071017255 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066564467 seconds)
  done (took 7.200364285 seconds)
done (took 29.473756494 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.548720126 seconds)
  done (took 2.129439958 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.973604013 seconds)
  done (took 2.597519937 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.268740437 seconds)
  done (took 11.897860829 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.401130493 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.485306267 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.758761442 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.139929268 seconds)
  done (took 3.439717921 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.872556809 seconds)
  done (took 2.511523153 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.240093607 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226224116 seconds)
  done (took 2.126456847 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.433116589 seconds)
  done (took 2.056872247 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.219563044 seconds)
  done (took 2.848306022 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.239564393 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.166576803 seconds)
  done (took 2.041491595 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.630525619 seconds)
  done (took 2.259931546 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.744588407 seconds)
  done (took 6.380020778 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.326552104 seconds)
  done (took 2.008763601 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.240464114 seconds)
  done (took 1.877647738 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.60151205 seconds)
  done (took 4.224853931 seconds)
done (took 50.04654435 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086044708 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083599314 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083527087 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079942392 seconds)
  done (took 1.935306132 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07529471 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068502037 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070870884 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071270821 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069241514 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.071014316 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071551478 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067863528 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.068845606 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068282216 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066552672 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068169509 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.071062524 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067707812 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070142722 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071637969 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067998502 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068620801 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070154489 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069195501 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070986154 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068062338 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066013541 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067614561 seconds)
  done (took 3.295517022 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079788509 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070363226 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07287842 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068458982 seconds)
  done (took 1.924816731 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.0772059 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.075008937 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083112145 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087490758 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073632942 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074360492 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081477187 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081430797 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063437021 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084672064 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065845329 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.0646287 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064512316 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083206775 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081487325 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061042307 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061605555 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.081166371 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.078404893 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078115392 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066364176 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063246318 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073968602 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075275847 seconds)
  done (took 3.411075909 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082889294 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.06349958 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.085116008 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088487763 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090096963 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.064089998 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078426389 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090318314 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127486654 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064059811 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072316147 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.064726087 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.103527187 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063778916 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079386899 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108305853 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111319395 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067433887 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096291541 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063949068 seconds)
  done (took 3.315318775 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07823442 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067778626 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068199688 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063458778 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.07443449 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071315212 seconds)
  done (took 2.071153014 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069474906 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066252757 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065157596 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069800912 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.066640908 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065897649 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064991442 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064243149 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.06411156 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064751221 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064742817 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065301903 seconds)
  done (took 2.434578152 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215196431 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070541585 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068613254 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063641921 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065488188 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064778151 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079376902 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067998958 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082199001 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065151258 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065820533 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067512978 seconds)
  done (took 2.621495704 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105743218 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109764026 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14258174 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113392214 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113781637 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093115603 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.165164785 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092401989 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.158461079 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.135685011 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11600164 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09264279 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085409765 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068116673 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098260939 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118784866 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137934267 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071604452 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111390447 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.21736619 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131884454 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134058647 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146484203 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116197887 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092005184 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146359697 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095546702 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101649437 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123546514 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126463486 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117370173 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.096573187 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07016336 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069505675 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150808256 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108034525 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12380272 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092481562 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105392062 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087986141 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108145867 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.068735234 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083087388 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112246495 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085774812 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133934169 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093124821 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117922549 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082819081 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.312267815 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124748252 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137988842 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083621538 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103020575 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134582461 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108908109 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13048542 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102819018 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079413564 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115261022 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101584697 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096966364 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105497819 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078445448 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.17327529 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086794187 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.10866667 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108839009 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.092819256 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093266621 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103987588 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13401353 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12694091 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126574745 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139011301 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094807172 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119656053 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100452993 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128164069 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10374949 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.07156585 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122339318 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129823437 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099835672 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101773327 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132558833 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092446657 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077001717 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.101309833 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119980679 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080546796 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115272196 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080333357 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111070211 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139180681 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099916456 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114001505 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123493378 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.25451691 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151453623 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105886818 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070754437 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113729488 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108877396 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151484615 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092413112 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074196489 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099632418 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101000839 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150819434 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105771969 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077662927 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105817353 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135786665 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091338136 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.213784012 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093620126 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140654404 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108016305 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084468171 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073006269 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090674026 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112637728 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107357472 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111488398 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093756943 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083807688 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085464955 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114193279 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092901111 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079482564 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112938994 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098344237 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073461994 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087438993 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075400418 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142328352 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077503385 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137255595 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126235001 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076664016 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107957759 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098270718 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109642177 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097849064 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120264678 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144200604 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.115967044 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091317571 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.095792497 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11064569 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.152365953 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135435903 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.270339272 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.07580407 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09889798 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109732085 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095064909 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123341922 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093082639 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103902203 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100541723 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138085195 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139533195 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095204795 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097607369 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10400777 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.118611769 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074449929 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152520966 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10085308 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117262863 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082071137 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137384253 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.109807746 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087002768 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085563111 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097997332 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.103375452 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107389996 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143782359 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095713511 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071422937 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091887443 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143565246 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077208335 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108794169 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090186544 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091477267 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118384721 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094633132 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081056332 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067446201 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128204603 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.160983187 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069583286 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115241569 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110914576 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104118192 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.124731166 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070474126 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123735013 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144788066 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122213592 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151754193 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.339978129 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116781321 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116773692 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.109944345 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102626609 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07685206 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125451341 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131080708 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092951446 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088893993 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131720232 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117349678 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.132101947 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113425918 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11518938 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101360282 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105494932 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099962803 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101787599 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141592131 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121631404 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.123011662 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085174546 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104813229 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118854672 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135775212 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080796606 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140985761 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084757245 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119703606 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077134043 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123096856 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077279885 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108431008 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080320055 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101589408 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068745346 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073360328 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145518211 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114299697 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108468747 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101951298 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.140147702 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.138873554 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079024658 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10874633 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119001141 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103990902 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121314837 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113317987 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.269341965 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093098457 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106147495 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083089842 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079155005 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112529606 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091644071 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121492215 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081813612 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072641013 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135114197 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100962589 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091325974 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075857659 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104037302 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.12067873 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091277038 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08434337 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114432522 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10243226 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137215877 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088465667 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.09456915 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120945045 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078022598 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.089878921 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067769316 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08321561 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074354851 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.126248604 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074768206 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116065314 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067567813 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.129997125 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086192011 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091988807 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103188887 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110086446 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127101239 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093628337 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140337566 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088640235 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120014512 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10773798 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095237666 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089907112 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104074226 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100710777 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.123588158 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096100183 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125096887 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147145376 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104207499 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145349523 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0931381 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128234631 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112467276 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.305466268 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11073177 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167184978 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137697049 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109452819 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109635074 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075865523 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096052274 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105399137 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.113034497 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176201227 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123818443 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070970363 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105451053 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09194264 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105471929 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100302302 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079130057 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140362305 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099290101 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085681324 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108900625 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089495341 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103645643 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074784984 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099067373 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.103302744 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094212237 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09647744 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117304979 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128695208 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111976772 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145206594 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100313674 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091330433 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.117860708 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109917122 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109108199 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085443473 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085650011 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139288376 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123807036 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.12906588 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.10241929 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110019308 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114240914 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101349518 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127671574 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109273503 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.132808149 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083932583 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.080197569 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.243189119 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071143081 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121127898 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104645453 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108343915 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095719979 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070334039 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101584825 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104050339 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070146883 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085089915 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09024815 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092756151 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.088917759 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103436236 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.109332782 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088566605 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100956891 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09837728 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142932044 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099177424 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085482054 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1398793 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145434992 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084976617 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089796592 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069900122 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078312652 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111368975 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148325485 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.151718085 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077696193 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086170151 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085211033 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085548455 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070373684 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.08763033 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088178736 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106243609 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100615334 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112528678 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105336516 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074990903 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101646113 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098745137 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092898946 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108569595 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122768167 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129005517 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.144170694 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115766468 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109333099 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076132619 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080253918 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075669939 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079410036 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102318828 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080240321 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078204642 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.320594693 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090576504 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102334371 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105028301 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085311113 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07303175 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134177501 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068982731 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131211901 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069052584 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079214873 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079688516 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076276847 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090077604 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133019983 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107865137 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107714096 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106505714 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10154485 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156611577 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153867701 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078535813 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14082807 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073819787 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074239559 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.073966726 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109357954 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088797273 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114367799 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140857285 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089758492 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101566875 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077584907 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143092238 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.098568 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104262334 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086717305 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078564186 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143722511 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078647782 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080533395 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089508264 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112323688 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072275478 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103982923 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084761595 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07952279 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167051634 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.709219358 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091560935 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077150783 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097271928 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.145758076 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136531821 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099965091 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.288972845 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.117385682 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099173492 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095590278 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105454896 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188053414 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072384895 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091314653 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100461375 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094496313 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098900583 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096559057 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086149948 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090177229 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085183562 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077326118 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104308941 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085518251 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09702864 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109725627 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081387508 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085949933 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127781362 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.102045434 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080234845 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085688161 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103478416 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085452841 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100187282 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067713314 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112942802 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090316942 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117209315 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.097569265 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108035597 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127938509 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09344644 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136482221 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.106902641 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121818553 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086780411 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077184103 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127910793 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.091176077 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077363348 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145731379 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.097043793 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09147167 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103849075 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096894381 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114852766 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118597506 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116122878 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098805806 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080229264 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105257713 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.106522745 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.263129209 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077844085 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072632172 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074731638 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105595031 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083714554 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081560091 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112127919 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086330449 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100299076 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100283627 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118864711 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085171558 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098574721 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109558737 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090028942 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106998794 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098882985 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125348145 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169614776 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120834899 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12607193 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131046961 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07616243 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.073322242 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067103814 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115137089 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078545115 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088170389 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080828236 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134213539 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081703749 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114290305 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.244838185 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080759506 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094361042 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095826926 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.06871781 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082635695 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107307252 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086262271 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079265144 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119253392 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08920149 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.131719728 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110835626 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099929329 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096320995 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080735833 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115365515 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105543383 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131893326 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099302082 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076075995 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126763895 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105433089 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141330772 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074568508 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084518795 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.138153271 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.2803207 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128954462 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078191894 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14564134 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140600728 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098064287 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130205509 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068936194 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085407515 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08707872 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12495588 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081411707 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107944075 seconds)
  done (took 68.246600972 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.180791695 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.177338872 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.12107169 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.132139527 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.289838482 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.299537754 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.15201515 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.12324324 seconds)
  done (took 3.275392796 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069936318 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081612749 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079344846 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.246394144 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096325256 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068042243 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07256235 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080580059 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066320927 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.066620607 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100320512 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065926637 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065855721 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.524114524 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065862115 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071073666 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065766552 seconds)
  done (took 3.681759045 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.356166913 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.606091857 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.324889568 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.748545993 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.168516778 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.722112265 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075457572 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082068488 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.939405642 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.398388218 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.161447786 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088645475 seconds)
  done (took 21.469172779 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.07745128 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.12257766 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.122210534 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072721755 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.073065534 seconds)
  done (took 2.252226046 seconds)
done (took 121.591130161 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085240656 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.171405355 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067338234 seconds)
  done (took 2.055508733 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.123573547 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.120953578 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.119347915 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.120530903 seconds)
  done (took 2.28093995 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076000143 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074925138 seconds)
  done (took 1.941313865 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.228037078 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.216086932 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089923707 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084949665 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078426561 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078730683 seconds)
  done (took 2.041011044 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.0725946 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.06941216 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069970986 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.070909484 seconds)
  done (took 2.069023073 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.173017081 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.0656133 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067765068 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069674729 seconds)
  done (took 2.162689197 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087231027 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086084821 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115530492 seconds)
  done (took 2.085700505 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084499676 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082897207 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078572166 seconds)
  done (took 2.047318891 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110585645 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.096699324 seconds)
  done (took 1.993762 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080500405 seconds)
  done (took 1.87289576 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093260393 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096971414 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.187970448 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.152486542 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.187967888 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.174408915 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075231022 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075392153 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071462642 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070245344 seconds)
  done (took 2.975982661 seconds)
done (took 25.936726406 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085387589 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.190067347 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.318046717 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088644122 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.652991837 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.314035651 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.730879842 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089765147 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.099625485 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067604662 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083655743 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.631819307 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.731651788 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.145912695 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.719992621 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.139592215 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.563242336 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06773806 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066342075 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067172521 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.715110625 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068858493 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06711542 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067148927 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.558365872 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.332020822 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069348611 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.136876453 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069593244 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073928357 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.314144332 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068795025 seconds)
  done (took 14.161039738 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.095913762 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125958969 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07146227 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082378634 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068658453 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068371035 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070589783 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067557177 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109099439 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067482588 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084415958 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066700524 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071767128 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068268984 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087358643 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067024959 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070757827 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068583016 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067249976 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067653684 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085762921 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066415246 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06745739 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067487323 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06749983 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080677763 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068059589 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066804598 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067049084 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070832539 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072020001 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068391777 seconds)
  done (took 4.204101594 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.128704454 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128794995 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072005277 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106722647 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115220083 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069416922 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149983974 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089349554 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112705576 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067421767 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085072662 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068218611 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.103210743 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068819678 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087863256 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06720147 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069396663 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067379256 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06694684 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067440212 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086179477 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066767143 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067354227 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068197833 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068257513 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082860211 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068307376 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067157328 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066940645 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071142437 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072788476 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068403823 seconds)
  done (took 4.457353395 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070905197 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069803786 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075443195 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078792311 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064626833 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066803534 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067782636 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064729564 seconds)
  done (took 2.371669054 seconds)
done (took 27.005448038 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079926802 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065863136 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068717927 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085383376 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071928812 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.112682463 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064339408 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073380405 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069594928 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069727286 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.070924978 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06550281 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.06798961 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062924978 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069678882 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064344653 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.115260812 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068281989 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.112240877 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.113865032 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066740917 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069402732 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072594684 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.114073065 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.112898348 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.112615122 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073058522 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.069949695 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064328159 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067242381 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.174396061 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.188408902 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.0743382 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.120649287 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065061339 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064563441 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068686416 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067283309 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.116972531 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073687954 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.0668772 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073843809 seconds)
  done (took 5.325282353 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.193788924 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.196632576 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.189960446 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078716661 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091088946 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078484644 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.19585985 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076132513 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075474224 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.196154637 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070753485 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074408319 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.07672871 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067310129 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.07402105 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070316638 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.076103966 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068518345 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.07402718 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.074120109 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.194798982 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068200966 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.07848942 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075980731 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.069847138 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.076125096 seconds)
  done (took 4.496380349 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074322513 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087226657 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090884516 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145004514 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109003257 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081594284 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081979699 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.093273931 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100299015 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066620588 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070431427 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097273237 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094833119 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073009917 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105760721 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084759546 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078779042 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068005512 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072914284 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100432283 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.08899908 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084656353 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099420303 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086602925 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065606081 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075641796 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073287357 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082109688 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073756389 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078380288 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071093069 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070987227 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067333571 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.077755443 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070480407 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064425899 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089287354 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079759545 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08147952 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106015098 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077041816 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.117757172 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.094298527 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.131913778 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066611891 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068861039 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070487482 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079299798 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069037294 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099399104 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082924554 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.06677515 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086420303 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068233204 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068048311 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08411483 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.06913555 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069117892 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078569686 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072838124 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.08766525 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072089718 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087791897 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066546578 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078162147 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068647699 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068485733 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065225637 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.100625786 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074162738 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117114452 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068194839 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06450925 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078936572 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078030697 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073535696 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066484869 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085773822 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07887426 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070626378 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077990059 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.07052727 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070411233 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103382977 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065583384 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064586173 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064462476 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069090856 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070593788 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067420386 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079702918 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.06647387 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.07057593 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082072722 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067286935 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067657436 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069683953 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068300349 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066500601 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077541595 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071243869 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069041279 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080065364 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068298145 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07072885 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082595831 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076662108 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066960781 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069289691 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072176931 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071134086 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073932882 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072327288 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070739428 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073542013 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076373199 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075396595 seconds)
  done (took 11.048020002 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.212065561 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.197988708 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068174571 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.193980527 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075067669 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.127770198 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.195698499 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.133555168 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067359055 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068007875 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.06635461 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.142303576 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.137179799 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.147160795 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.118033342 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067315832 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.092965319 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.146643086 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.2001482 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.195060363 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093839049 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075693804 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069511152 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068585231 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.06845023 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076295569 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083036542 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075753232 seconds)
  done (took 5.147017156 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075458863 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082236979 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070198553 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091007496 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084415097 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.068226281 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069205364 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067853061 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083988868 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072245069 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066343228 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071030016 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069621429 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.066945522 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.06743569 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073157835 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073420535 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065958657 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070229391 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07104046 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078706999 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.161798778 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072361147 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069846919 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.068800253 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066841727 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.072903333 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.074487572 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066116624 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100105212 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06412973 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072463626 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082345038 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068301944 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066892624 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067750834 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066875363 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.06685926 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067186942 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06486674 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064749083 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072886381 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065644358 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.07370961 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082603456 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076137362 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068319836 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069351242 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069239423 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063883331 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070188092 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070338761 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069696163 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075658431 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070568934 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069218703 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068509063 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096392848 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073303718 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067218791 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067895803 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065519818 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068829193 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075066854 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083781805 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068589254 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065262353 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066901145 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074457896 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081470478 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066786511 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072993246 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064281077 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.06792216 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070089084 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070073723 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068664498 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06521105 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.06687785 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067288127 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068288108 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066849733 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067276309 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069998755 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064670702 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065221216 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068005803 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068511613 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073547092 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066912982 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069873917 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069017437 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066528696 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070428935 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073756174 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070577919 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087849559 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075520655 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.06793982 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065168521 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08258495 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069495368 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067257849 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071616666 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072305829 seconds)
  done (took 9.442847805 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098271124 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067794294 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086827117 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.09847138 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076739102 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072025545 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081430475 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067346977 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088085616 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065415821 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075634135 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064754715 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.081300533 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076030485 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067907685 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076778444 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.06873736 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087370994 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081160027 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064636584 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075285799 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078517669 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078868445 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084839888 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084716276 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085306944 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078694998 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068766509 seconds)
  done (took 4.062826851 seconds)
done (took 41.323317753 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.901851481 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.086534897 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.894031112 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.382545397 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.042409428 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.915049547 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.032553878 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.88998291 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.121809558 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.97495159 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.653287876 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.580114731 seconds)
done (took 69.376444707 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.94645231 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.069564492 seconds)
    (2/2) benchmarking "String"...
    done (took 2.16500493 seconds)
  done (took 6.092990424 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.363414165 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.925121562 seconds)
    (3/3) benchmarking "different"...
    done (took 1.956602633 seconds)
  done (took 8.068493051 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.207141037 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.46380695 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.197421914 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.922845998 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.930390253 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.405429989 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.074245196 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.557978688 seconds)
  done (took 33.380031211 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.928756534 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.224580509 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.262207606 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.333345301 seconds)
  done (took 21.64942477 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.365466903 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.272412287 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.272658593 seconds)
    (4/4) benchmarking "different"...
    done (took 2.370152171 seconds)
  done (took 11.194466736 seconds)
done (took 92.514156641 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.913820837 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.285398127 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.936667535 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.070585897 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.985178117 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.983696896 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.971388804 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.001733433 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.89939088 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.915659257 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.902157909 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.922756856 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.903291286 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.957893867 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.914832064 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.987104544 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.234756664 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.984142166 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.935404156 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.655023837 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.260473161 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.98291544 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.904990739 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.953944311 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.348442141 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.943779819 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.409429074 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.916795323 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.522349313 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.905632966 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.912567977 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.972628117 seconds)
  done (took 209.217456973 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.917938936 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.720818977 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.752974659 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.974953388 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.262545888 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.263632969 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.778565332 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.275402974 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.925965774 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.95155166 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.919898148 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.924843308 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.932756854 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.476303795 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.94323107 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.954250151 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.776941923 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.679082047 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.956357272 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.837065473 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.925662833 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.471529055 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.424931437 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.712501993 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.949615655 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.943360334 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.05854088 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.93835318 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.407432571 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.725407579 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.929524392 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.937683203 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.408546063 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.154027821 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.927239366 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.931857458 seconds)
  done (took 182.903233624 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.125018005 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.946907103 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.970125263 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.030924115 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.867349637 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.724660917 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.92801833 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.923249551 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.925097999 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.931941631 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.894424479 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.991867118 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.645127136 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.948878008 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.913960572 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.922448952 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.100496496 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.924810825 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.92080121 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.893403243 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.446601425 seconds)
    (21/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.924333138 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.041772704 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.26635503 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.029629106 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.924656403 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.901213002 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.03417989 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.930506285 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.92246812 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.035323379 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.928297287 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.06035813 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.036285306 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.905903561 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.982397213 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.930205267 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.109335261 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.923704795 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.92261186 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.920901921 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.96787565 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.924332311 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.982404769 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.029901206 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.92556726 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.944208309 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.399075483 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.478239377 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.932321087 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.921833212 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.919862211 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.937766927 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.934734752 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.230045757 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.920636979 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.955469353 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.334047846 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.925225679 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.92340408 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.911755682 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.920373046 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.922100902 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.934366263 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.934748053 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.558531348 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.773924047 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.262164307 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.662032178 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.928597944 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.633108653 seconds)
    (71/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.927852065 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.951495759 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.916075103 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.104502077 seconds)
    (75/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.929224345 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.928187101 seconds)
    (77/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.932535234 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.92326544 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.924782081 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.904478889 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.983387906 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.925818527 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.03759634 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.92874514 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.926427744 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.010746473 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.994948418 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.941044104 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.961423682 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.959772338 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.93244016 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.927396525 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.959573385 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.879506064 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.935419921 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.927068463 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.928672585 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.308297501 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.934570144 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.05275109 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.319553135 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.020476442 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.3549658 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.868245506 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.899553319 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.931138456 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.96312966 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.93416254 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.928216205 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.907433747 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.927704246 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.926142406 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.919310782 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.933058711 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.926392417 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.901803023 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.943632539 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.924615448 seconds)
  done (took 424.89190113 seconds)
done (took 821.042021579 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.57874001 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.659277423 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.498587546 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.551966926 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.505710687 seconds)
  done (took 14.625289763 seconds)
done (took 16.458745626 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.955215377 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.94757719 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.937279021 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.956255322 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.952329005 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.954581248 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.961186244 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.975360389 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.960833692 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.952296827 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.959768598 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.950912441 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.961355472 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.963389383 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.964104313 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.968375042 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.958548089 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.94947463 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.960865836 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.954552315 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.95209828 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.951270646 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.94886122 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.960925675 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.966305774 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.956173543 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.951464641 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.962508673 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.962468633 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.964743301 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.975318645 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.966706792 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.962192563 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.965300052 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.963989926 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.968553965 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.957133415 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.968823374 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.955881454 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.968830539 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.967419983 seconds)
  done (took 82.171460223 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.919994089 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.089153062 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.193900069 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.973684658 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.923950958 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.193370081 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.987490569 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.075069245 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.080380265 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.193095755 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.212975408 seconds)
  done (took 24.682501409 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.921573279 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.088678021 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.204069822 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.961191087 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.922184441 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.210683011 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.990757352 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.083673837 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.090271056 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.214958238 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.228789352 seconds)
  done (took 24.765307088 seconds)
done (took 133.468117901 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.470913674 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.982731262 seconds)
  done (took 6.289467819 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.927405304 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.922031883 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.137029926 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.908859512 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.908392367 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.903377817 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.899622158 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.912163295 seconds)
  done (took 17.357301827 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.932608981 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.933634668 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.933905829 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.930806991 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.9355003 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.94105278 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.936445296 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.93546835 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.933197354 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.934071702 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.933341072 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.936874196 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.941727573 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.937406 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.933693636 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.93710398 seconds)
  done (took 32.799187205 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.934494533 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.934767851 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.93836783 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.935382089 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.935019453 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.937191466 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.941689426 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.935795327 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.936218943 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.938832444 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.938714144 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.931756602 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.934274358 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.934605409 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.934071954 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.931405522 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.940034659 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.938022134 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.939463295 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.934988415 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.941683446 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.938107859 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.943935705 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.937007484 seconds)
  done (took 48.31725772 seconds)
done (took 106.618022026 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.50865862 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.117671559 seconds)
  done (took 9.457571632 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.940680733 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.938445492 seconds)
  done (took 5.82088603 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.940234628 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.938913792 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.93482822 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.934700887 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.932805528 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.939039241 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.93460752 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.939757904 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.940270018 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.936489985 seconds)
  done (took 21.205324172 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.934311383 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.936498941 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.93719547 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.937683581 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.938338014 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.935392441 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.935698373 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.935462965 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.939429606 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.934848826 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.940643359 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.939439409 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.937318569 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.939520554 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.93516588 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.939742893 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.94198452 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.94075628 seconds)
  done (took 36.715254086 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.936604417 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.938882893 seconds)
  done (took 5.711752878 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.93669431 seconds)
    (2/7) benchmarking "second"...
    done (took 1.941231266 seconds)
    (3/7) benchmarking "month"...
    done (took 1.940867644 seconds)
    (4/7) benchmarking "year"...
    done (took 1.937355338 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.938704538 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.934791908 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.941382675 seconds)
  done (took 15.403381866 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.944737555 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.071451223 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.110246071 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.41093729 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.944609253 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.94245615 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.548080105 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.945725096 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.942252135 seconds)
  done (took 20.695051535 seconds)
done (took 116.848483732 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.745905055 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.908894068 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.53278112 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.018807075 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.971464248 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.264261186 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.916771438 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.488807442 seconds)
done (took 44.688698251 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.946815521 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.919108361 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.963214814 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.958207581 seconds)
  done (took 22.690148951 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.926035145 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.552978924 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.952284988 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.054781522 seconds)
  done (took 23.412422292 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.437593352 seconds)
    (2/2) benchmarking "read"...
    done (took 2.45754989 seconds)
  done (took 6.744477244 seconds)
done (took 61.644487984 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.942568088 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.94021718 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.938365782 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.939981012 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.940463474 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.943044461 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.941115822 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.950644377 seconds)
    (9/24) benchmarking ("zero", "Float32")...
    done (took 1.941640322 seconds)
    (10/24) benchmarking ("one", "Float32")...
    done (took 1.937715623 seconds)
    (11/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.937530051 seconds)
    (12/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.939636427 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.943625088 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.941505349 seconds)
    (15/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.942073061 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.939900151 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.938338067 seconds)
    (18/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.939590002 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.939307072 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.93437978 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.938307769 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.944675548 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.9437456 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.942512061 seconds)
  done (took 48.416641345 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.938750124 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.940279888 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.943528557 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.946143145 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.944341867 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.938859486 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.938707641 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.941224434 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.940082328 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.940336606 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.937659311 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.946734906 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.946507364 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.941018708 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.9464243 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.940085612 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.945990917 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.943012039 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.939976541 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.942490704 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.946106634 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.942912365 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.948312094 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.941639947 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.941542477 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.941699291 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.939161542 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.938771799 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.945166376 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.949279836 seconds)
  done (took 60.120594732 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.938568395 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.942862372 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.939884762 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.941570496 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.945092295 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.945491865 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.941740064 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.94582528 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.94238507 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.940407295 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.944526621 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.943922245 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.941214047 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.946591958 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.946324617 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.941864237 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.940948488 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.94178216 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.942800643 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.940873457 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.943069527 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.942192234 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.946554683 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.947156018 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.947804432 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.944625989 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.945366778 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.944446869 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.940528804 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.939819208 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.94449495 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.946953886 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.946846979 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.942519534 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.945950656 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.941410535 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.94277712 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.947201726 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.952219921 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.961156815 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.948645348 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.945888115 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.946091168 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.94579642 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.943162796 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.945028255 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.947604877 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.945316161 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.943109308 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.947830742 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.945380634 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.94268056 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.94538184 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.943600082 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.943001461 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.947851768 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.942760522 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.948339882 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.95719032 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.947879831 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.948089306 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.945444612 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.950097571 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.94553399 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.947326682 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.943358235 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.943000761 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.946234224 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.948845865 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.947891923 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.944936008 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.945854784 seconds)
  done (took 141.888825876 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.950744558 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.954272696 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.947863699 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.953799112 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.944876716 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.943143574 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.947073438 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.943652267 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.946047435 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.945751552 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.952395689 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.947027065 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.947156577 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.947491211 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.950037935 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.952343912 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.948105046 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.94658591 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.948247006 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.946598685 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.950469157 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.949013686 seconds)
  done (took 44.707346348 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.945664033 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.960028327 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.944935764 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.943692531 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.947693053 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.951798294 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.953098987 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.946298486 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.945947605 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.945426413 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.944724264 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.945492143 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.949906054 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.95136349 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.950586874 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.948358372 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.949041179 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.947173067 seconds)
  done (took 36.916383249 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.944189495 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.950213919 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.947982831 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.953397113 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.949312208 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.948212152 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.946763837 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.946315173 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.950804242 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.946172777 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.948417306 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.952318368 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.950452286 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.949410596 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.948033995 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.951897114 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.946983011 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.94808421 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.947569332 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.947586318 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.957006775 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.950181446 seconds)
  done (took 44.723881985 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.948237331 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.951098036 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.949142733 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.949182245 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.950413356 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.953516173 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.955073522 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.952369929 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.956238612 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.953627259 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.963730542 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.949085188 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.951847983 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.947526653 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.948695489 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.95494843 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.956561348 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.952066541 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.951675152 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.948640107 seconds)
  done (took 40.891178503 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.935894717 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.942921724 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.942094664 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.942519823 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.939568544 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.940958264 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.942455172 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.939933917 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.937451043 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.936576596 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.943288964 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.941646743 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.939720439 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.936469546 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.936655721 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.938386081 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.936312618 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.939375511 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.94356582 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.942540674 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.939028206 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.939407367 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.937265307 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.941795893 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.93862428 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.939205906 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.942837899 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.942570299 seconds)
  done (took 56.165203163 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.954684891 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.949744295 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.948399611 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.949370838 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.953670211 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.955051328 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.951711333 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.949723313 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.952880258 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.950862617 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.953758484 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.950319159 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.950308437 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.948476585 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.955187006 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.956286309 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.952660826 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.95308471 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.949796306 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.949573661 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.951281738 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.950227541 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.951373722 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.95240238 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.954016913 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.956031297 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.956152501 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.956230054 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.949432384 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.953149852 seconds)
  done (took 60.413746878 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.969141477 seconds)
    (2/2) benchmarking "in"...
    done (took 1.975923683 seconds)
  done (took 5.78977993 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.9517516 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.95362641 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.952934581 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.951355336 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.953601016 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.952699586 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.954620699 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.952531364 seconds)
  done (took 17.478340939 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.952036241 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.945441346 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.954315632 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.952004567 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.938980365 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.948683979 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.958375322 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.945402865 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.949627245 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.954542171 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.948142847 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.952612684 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.950785339 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.945556799 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.950021219 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.954767433 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.945032679 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.948184034 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.944760784 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.952568088 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.944361116 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.940111228 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.951589472 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.940959864 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.951328905 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.948517701 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.95531104 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.945231245 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.943730745 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.955575224 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.94746252 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.953240736 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.945525603 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.944529138 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.943917233 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.958475222 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.957266346 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.945798798 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.945208534 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.954502169 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.944578139 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.943534417 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.944242054 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.950146534 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.943888001 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.959194056 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.957900374 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.945182378 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.957961778 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.949335561 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.977769756 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.943386813 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.956793308 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.95334582 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.948422652 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.946967329 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.948562372 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.952565882 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.956936791 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.95303341 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.950972362 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.967656155 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.954163862 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.94110586 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.945247397 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.959439804 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.976754197 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.950795851 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.947087479 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.954518173 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.951388804 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.954927726 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.954890935 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.955961801 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.958943735 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.958633287 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.947506403 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.961787209 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.960167425 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.945451808 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.94389175 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.947852282 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.9433926 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.941022091 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.957449985 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.97513691 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.94474783 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.94591066 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.954231905 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.958991698 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.953963124 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.947383841 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.957370171 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.954486427 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.946525644 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.981740847 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.964738222 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.949371424 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.961033864 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.958054328 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.95825805 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.956393047 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.954887291 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.955317707 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.958357495 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.945126505 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.948332245 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.947810903 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.957276746 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.949607874 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.948330435 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.956027086 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.959113504 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.95181657 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.95847375 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.951377011 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.95535778 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.95683895 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.961923055 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.957132504 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.953716336 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.948489576 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.962073035 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.975025279 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.957086352 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.950730209 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.955981004 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.962367236 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.946766157 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.956055105 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.949017831 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.959019733 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.962203474 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.95042633 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.957772898 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.949091108 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.962611023 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.95002972 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.962505157 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.953090475 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.972768301 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.954555657 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.957957185 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.950704317 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.950748739 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.948680754 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.95213498 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.957182563 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.962105588 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.957560973 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.962783537 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.958046461 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.963103788 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.950071532 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.95987122 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.961556784 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.949559082 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.961117579 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.961070107 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.95013833 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.967976805 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.967199919 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.968344598 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.953200727 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.948915122 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.97070188 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.951604946 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.947995774 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.951033083 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.952421291 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.95655938 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.954868787 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.955997583 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.963925696 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.961439341 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.947924168 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.960810424 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.962043655 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.953781801 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.964301196 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.959594996 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.96885635 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.968352336 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.956907716 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.962045597 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.954163559 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.95342639 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.950536928 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.952049309 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.958580168 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.963758537 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.95988319 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.017902912 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.971687665 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.956315941 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.967685388 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.985330555 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.987942174 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.957491673 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.962619794 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.948858755 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.95138749 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.956647903 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.955988313 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.968706343 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.961121195 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.964620363 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.964533479 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.95682245 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.953744457 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.960016865 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.951081955 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.978551145 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.955493444 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.966301013 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.969773354 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.966237362 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.964566406 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.957740857 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.954639546 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.962574018 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.959080053 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.954519584 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.951525058 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.975492933 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.957039955 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.963416701 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.965461173 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.955472429 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.960808098 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.967348211 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.962845484 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.96803631 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.963399003 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.952158982 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.967763219 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.960623384 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.978094445 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.959391957 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.965796381 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.958016156 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.963874699 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.956417634 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.955889313 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.955187362 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.955461572 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.959143594 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.961156103 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.967643201 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.962524386 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.968989687 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.952991607 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.97128154 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.973717266 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.966055385 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.966762009 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.952880654 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.955387871 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.963459333 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.959563635 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.967559967 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.969784447 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.95672649 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.967832916 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.972035155 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.954669537 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.972048226 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.965860419 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.968719399 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.970877665 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.962756496 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.962288412 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.968665137 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.956785179 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.963464918 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.973213191 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.967288185 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.96863903 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.953238681 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.958116742 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.964832766 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.972930212 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.962797111 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.959669658 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.957126978 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.955623321 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.969581494 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.956107454 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.955752869 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.955955748 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.969782424 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.971471744 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.9625514 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.973244737 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.969534141 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.973916961 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.979536193 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.962594342 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.956229524 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.966121037 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.957878773 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.966713151 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.955449127 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.956029316 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.969930876 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.97565449 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.964142594 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.963192889 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.969722308 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.959036149 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.964991075 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.95791155 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.96653548 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.956576702 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.966741429 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.954463739 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.964939246 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.976228315 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.980177731 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.973479544 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.96686075 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.974880156 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.972454956 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.965934649 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.972392627 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.95712176 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.959967217 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.970203981 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.965461763 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.96340235 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.971061245 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.961007445 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.972693293 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.972207599 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.961657995 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.962200023 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.959244264 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.970757858 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.969967728 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.965357594 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.954833864 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.956694158 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.963980044 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.974832223 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.975250438 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.983397445 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.962800496 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.976396363 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.964424712 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.972114606 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.967198027 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.962622096 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.962114446 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.973923118 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.971825614 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.971013665 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.977078672 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.961927374 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.988536508 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.977554942 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.978943694 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.97354702 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.9672516 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.976122361 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.964650837 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.961823449 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.967158242 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.975395088 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.004696944 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.012078865 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.966786578 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.976362434 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.970835426 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.963584957 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.973878157 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.968756223 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.973032723 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.969802536 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.973400865 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.966183549 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.976537209 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.964268511 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.975967596 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.972698834 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.965319449 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.973478965 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.970440838 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.986473663 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.962714236 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.975206197 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.977186495 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.988815219 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.986733379 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.964408479 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.976309 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.962954879 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.974003136 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.964125653 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.963062629 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.960903831 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.965735547 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.962738162 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.966621267 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.973007226 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.967973122 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.991709538 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.967084328 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.967436763 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.981167376 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.962933159 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.963429011 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.964060629 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.973812719 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.978178821 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.977225285 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.978293287 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.968288935 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.974965152 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.969709545 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.972712273 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.975782178 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.968965416 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.981186338 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.963975583 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.970992895 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.978908514 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.97372047 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.976315535 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.973987574 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.965890111 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.977637404 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.971313989 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.989327932 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.963024411 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.977073658 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.961771027 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.968665074 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.967919454 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.969790293 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.967493531 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.979395022 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.976498621 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.976252326 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.986885633 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.968672395 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.981587468 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.964685982 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.979519906 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.97318153 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.975865023 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.978357386 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.974205173 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.967235912 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.965689355 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.968570347 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.971670334 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.980314094 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.968787388 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.971051079 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.981928671 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.977603166 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.979256111 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.967780554 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.97799998 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.972966019 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.975554586 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.983399592 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.975163077 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.970099358 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.986263319 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.989915797 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.965731511 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.976794987 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.975861498 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.966284566 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.967168914 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.968156581 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.977892866 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.973761774 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.975665096 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.965577665 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.981264162 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.977136777 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.971658776 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.968148955 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.970496706 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.965589107 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.975756394 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.975332255 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.968179111 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.989824817 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.974023366 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.977256393 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.990449324 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.976892575 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.970083327 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.980612336 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.978586388 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.984125186 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.980800302 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.969698414 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.968990494 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.969118807 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.963673834 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.971379133 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.964937275 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.969479524 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.982561601 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.978493134 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.976048818 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.982346028 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.980373412 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.984559347 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.973937091 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.9691414 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.971617971 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.998356994 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.984528569 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.974459084 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.972798153 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.979978596 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.983620756 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.979176009 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.99280694 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.972891344 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.97252063 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.973438051 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.001110345 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.983193163 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.98411215 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.00375023 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.982254894 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.967180807 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.966948034 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.98672352 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.969279092 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.988701371 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.971763123 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.976256328 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.968344525 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.983164987 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.978826711 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.982143134 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.984613783 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.969270816 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.982329838 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.973234122 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.968625022 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.973693468 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.979091483 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.983497838 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.985043155 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.988350554 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.984091266 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.986292724 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.988067227 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.975520456 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.987971776 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.971687065 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.982052112 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.971601062 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.969789638 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.987231772 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.994781587 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.970784932 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.983887261 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.96768592 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.979559773 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.972309067 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.981131138 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.97516364 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.989607834 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.974310146 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.991884201 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.969415213 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.970239676 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.972523354 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.985121788 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.970853989 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.986952805 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.989790674 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.984940786 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.989958261 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.985479696 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.984105011 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.983740653 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.975374133 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.976504331 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.978695069 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.972106923 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.985480547 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.981677723 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.991388937 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.974942545 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.995282707 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.972475079 seconds)
  done (took 1173.511952743 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.986837991 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.985242635 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.987506968 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.992002624 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.986691192 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.988885596 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.985904811 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.984320165 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.993427511 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.984187447 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.985364549 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.985151244 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.99572814 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.990915951 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.984656552 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.986783555 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.983491827 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.985137257 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.988246955 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.981646801 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.985058213 seconds)
  done (took 43.605874831 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.988316344 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.986095171 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.983713817 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.985076535 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.986374782 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.984516237 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.986920723 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.991608363 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.988677319 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.98898632 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.991032032 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.990939185 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.98817769 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.989193372 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.986856031 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.983599037 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.988422508 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.984145457 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.984792039 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.987490475 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.982936318 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.983608762 seconds)
  done (took 45.59166428 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.972337552 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.972562406 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.97263197 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.987645037 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.986827448 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.975676453 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.996251615 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.993993595 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.993994038 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.992294095 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.985215512 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.004282478 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.993234578 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.995983096 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.987606732 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.976501544 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.108466013 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.980642724 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.980720182 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.994519942 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.977070745 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.982361199 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.989479792 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.98975027 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.999001762 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.974211817 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.989178634 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.989608165 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.987619304 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.99290255 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.978885814 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.991594746 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.979520508 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.977496394 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.986373048 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.988499884 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.980618722 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.973389746 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.989181312 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.988237028 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.986460973 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.019055909 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.988339793 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.975915525 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.017311428 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.988113121 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.989570042 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.979085865 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.001588057 seconds)
  done (took 99.380930505 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.99243696 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.993561994 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.990027258 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.991389721 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.988885482 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.991184788 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.001894709 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.989562489 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.991359535 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.986938828 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.987116699 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.990982716 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.989868386 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.001479059 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.987645037 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.987511255 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.993025627 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.989875273 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.987376835 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.986276852 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.986976933 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.987811407 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.987372527 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.986406934 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.987288021 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.988930246 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.987048606 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.985612424 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.985961514 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.987320711 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.989665408 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.9948891 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.990503006 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.990490017 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.991896509 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.990789302 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.99581748 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.001378229 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.993070779 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.997354537 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.997352948 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.996003617 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.99395801 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.993438235 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.996415659 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.992935043 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.99640838 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.993080755 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.992584561 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.997178742 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.991692351 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.990995564 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.990256324 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.994238587 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.001941618 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.990171082 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.991204045 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.98727281 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.991762517 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.990500739 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.990690313 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.988559121 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.993170295 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.988444381 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.990223991 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.993238041 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.990914394 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.989620816 seconds)
  done (took 137.309712989 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.975184124 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.974003635 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.981179817 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.979666892 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.980656774 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.982488958 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.982454126 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.982852344 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.979114088 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.980745274 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.978734699 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.988988416 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.976140788 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.994701521 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.977360007 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.983881697 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.976832998 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.977437657 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.980819358 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.979048638 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.97949698 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.978058905 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.977984878 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.979638977 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.979420328 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.983797762 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.980299504 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.98334652 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.984972895 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.984971811 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.006287581 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.984021255 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.985597862 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.985616337 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.981359942 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.987340892 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.981030222 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.979885664 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.982023878 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.979114994 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.984865294 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.98115204 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.981925095 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.982730597 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.977245406 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.980312093 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.984125751 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.979183636 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.993067742 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.979136072 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.978173997 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.983713012 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.980597199 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.986444263 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.98332958 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.996569407 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.984089886 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.985719576 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.995611332 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.044245409 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.984167855 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.997667157 seconds)
  done (took 124.887567234 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.994471314 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.992785487 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.994097559 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.993448142 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.991152008 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.998574656 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.994372596 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.993380243 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.9940049 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.993838701 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.997414456 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.994505279 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.995456169 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.995804199 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.995120245 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.997724834 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.993872262 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.992736482 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.996373613 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.993695073 seconds)
  done (took 41.781306376 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.995924956 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.996020531 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.994109601 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.9941471 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.996548772 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.995622947 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.992923168 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99241169 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.998110621 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001003828 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.994352774 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.997227093 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.996035984 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.998423455 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.998703293 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.996895194 seconds)
  done (took 33.825780641 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.998825326 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.00098755 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.988418473 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.98307942 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.997982268 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.001881257 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.996319458 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.996820231 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.998980897 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.998695227 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.997174355 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.996427507 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.997308325 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.982899047 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.99686038 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.997907642 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.995158646 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.997916652 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.997639367 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.987660721 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.001038182 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.998178699 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.998401966 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.001275999 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.998324577 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.999959228 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.997344164 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.003574204 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.995539934 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.994791885 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.998466081 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.998506722 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.998089758 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.99738072 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.984520044 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.003683347 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.99735222 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.998020225 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.000912833 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.99818068 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.000137347 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.000056958 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.998833877 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.997520682 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.011200879 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.00077577 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.995545331 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.004307143 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.997471667 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.002085197 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.003486088 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.985053348 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.001654337 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.000580613 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.99915259 seconds)
  done (took 111.769500153 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.9965096 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.996449068 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.999751271 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.998454708 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.000711343 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.996726002 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.999069634 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.000829372 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.997041631 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.001913214 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.001094387 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.997191212 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.00468181 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.998450818 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.001659103 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.99801713 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.00054418 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.998642062 seconds)
  done (took 37.876855964 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.007348991 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.002788988 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.002875207 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.004219085 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.003961445 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.00721339 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.00299489 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.036884823 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.001770839 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.003871755 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.002033634 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.003966972 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001805722 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.006007684 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.003504332 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.00256073 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.001739594 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.000520342 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.002612623 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.999818464 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.00633334 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.005432588 seconds)
  done (took 46.006766039 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.003728993 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.003916841 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.023597734 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.030661781 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.035444679 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.051184178 seconds)
  done (took 14.045932259 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.00982941 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.002568053 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.0046822 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006424765 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008224081 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.004565894 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.004073475 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.005806272 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0065366 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.002731528 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.005668155 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.005153652 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008063476 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006869293 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.004534239 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.00706597 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.001923564 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.003434764 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.003915038 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002791418 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.004350817 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002985686 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.006430336 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.001135053 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.001730266 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.00391199 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.002821005 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.004034277 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.003195001 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.003412636 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.003364715 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.001934991 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.000109095 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.010280839 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.006806736 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002679683 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.002157343 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.003432891 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.007262879 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.00131654 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.002893523 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.001124597 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.004137082 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.004434145 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.002497269 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.003111443 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.001451364 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.00035034 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004416846 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.999543996 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001507413 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.004679126 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.005275701 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.002502656 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.000555751 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.002943528 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.010539781 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.001453713 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.002223813 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.003417678 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.003653433 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.003730702 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.000787607 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.003370173 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.005781372 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.002423812 seconds)
  done (took 134.156060622 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.003187324 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.00328125 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.003883789 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.005302205 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.004896243 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.004071317 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.003758816 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.004498663 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.00630176 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.005594432 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.004341195 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.004651937 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.004847676 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.004857589 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.00383622 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.003252849 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.005169959 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.010785236 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.002408014 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.005596903 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.00285608 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.005043841 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009731999 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.003862828 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.003026783 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.004470458 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.016175721 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001748685 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.002193713 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.005327977 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004693933 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.003685258 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.004716897 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.005992144 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.003945129 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.005506426 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.005456365 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009252211 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.011374896 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006270756 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.009255312 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.006907352 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.010159749 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.006714086 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006552557 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.007675398 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009433418 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.009594869 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.008368478 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.007761973 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.006872152 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.008858159 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.010739659 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009686333 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.005572879 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006809744 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.006127006 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.015120755 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.012136767 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006515265 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.009352881 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042125735 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024461734 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040707278 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.012250618 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009984098 seconds)
  done (took 134.415093006 seconds)
done (took 2737.531610044 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.085658256 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.145281298 seconds)
  done (took 16.12846406 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.111572106 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.046369912 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.128436999 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.072550287 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.972014857 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.992653942 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.979065568 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.976905719 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.062876271 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.976396554 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.066403951 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.982717398 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.976812726 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.976289407 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.978751344 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.977817717 seconds)
  done (took 54.225945927 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.980978081 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.982716619 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.978790686 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.979397593 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.002048262 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.081131437 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.005746427 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.985638542 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.010696125 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.033897724 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.004941145 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.984531957 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.996414309 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.987414937 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.090172188 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.043860053 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.057977224 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.077123061 seconds)
  done (took 38.183019908 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.079716429 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.995416836 seconds)
  done (took 10.988499043 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.026084713 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.020439852 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.031312177 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.045316054 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.035552694 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.028277628 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.030116454 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.019394142 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.048980911 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.039327015 seconds)
  done (took 72.250584875 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.982604052 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.984949925 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.301415378 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.998324046 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.991867916 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.020235087 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.015191747 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.015685238 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.024146269 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.983101555 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.999629547 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.310864999 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.996967636 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.982955989 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.395185472 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.000663689 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.992549704 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.018103561 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.020264482 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.988274014 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.992270256 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.982388672 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.225560888 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.76514917 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.983802427 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.992143852 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.992368962 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.011870592 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.013110641 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.980182422 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.985660309 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.980816978 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.992503964 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.993268148 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.005060999 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.992263603 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.642895998 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.004682992 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.991965393 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.066945357 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.038065434 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.992134699 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.986106045 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.990664071 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.017198 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.992109307 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.72872616 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.05463118 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.025484402 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.168650939 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.417618211 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.006974572 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.140147039 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.123774871 seconds)
  done (took 140.20869902 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.013686323 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.466788853 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.168749524 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.020838072 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.361056379 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.228992065 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.77019066 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.061538514 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.016744289 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.224382915 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.178388523 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.14307522 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.018677261 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.026944564 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.019226524 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.018671245 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.193984581 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.083966377 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.017397508 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.017074626 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.040678177 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.251790683 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.13945965 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.017505087 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.035362019 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.236410787 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.068363506 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.134027701 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.426642608 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.018358296 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.0806428 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.015956035 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.020900794 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.014620748 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.060685466 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.121049873 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.120784729 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.018191576 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.779523096 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.018458237 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.623388944 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.225116972 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.127352312 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.147922256 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.265606931 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.231962907 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.725024327 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.015261346 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.739212773 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.182906244 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.230357208 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.233487009 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.117078456 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.019590443 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.607911542 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.019379056 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.01728866 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.24946302 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.176499306 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.152150506 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.021450415 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.023241868 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.021223226 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.257228956 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.019318887 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.130641797 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.021106395 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.048685358 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.137125777 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.163868281 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.185675855 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.244216878 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.051401481 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.318729115 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.002717251 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.229801217 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.083642429 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.25151877 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.019617465 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.019104387 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.108548462 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.482199718 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.172802562 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.25956566 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.330104865 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.060314744 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.540244207 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.019232035 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.235393871 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.167498623 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.24111461 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.270264406 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.076145727 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.866734044 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.020628178 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.026341412 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.915305649 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.149447192 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.022438124 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.5539355 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.260809881 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.621042782 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.045353912 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.450995729 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.127148449 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.024536687 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.668287871 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.022422854 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.238482906 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.063844924 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.023633503 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.020446384 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.170914311 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.744508384 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.020258041 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.084858956 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.080875514 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.02432239 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.17907457 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.027131722 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.276637991 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.724639206 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.263599091 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.028399788 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.05780735 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.190204866 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.275337767 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.02571474 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.397344228 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.259621745 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.120446522 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.235930735 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.537772092 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.022456544 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.296124489 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.025056124 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.02380324 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.187842408 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.93123345 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.181741877 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.029473919 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.267373482 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.043498009 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.076779473 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.02986577 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.267172701 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.055578585 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.071230585 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.0236271 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.152746846 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.030745499 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.069549299 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.186375845 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.024983348 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.028592719 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.8989762 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.021944372 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.173907124 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.256854934 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.037620486 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.093094467 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.41566468 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.021904245 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.123447797 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.045300816 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.454966315 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.537347134 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.185819984 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.647323572 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.264169644 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.022846488 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.258796558 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.199798937 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.03016446 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.028071691 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.779667421 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.481599497 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.024885191 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.181082051 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.24559735 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.394339656 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.235201662 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.026030052 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.079263578 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.031482995 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.276335404 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.558917733 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.256425846 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.024489607 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.023601504 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.023318991 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.025508886 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.220758544 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.057761592 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.659735917 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.165821102 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.293446505 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.237704222 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.334587618 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.084059746 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.029126667 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.33933331 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.025110615 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.087936582 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.026449763 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.035466434 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.269133886 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.026577245 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.230153706 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.375182261 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.130468576 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.070825608 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.027585933 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.030146062 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.026716496 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.191755707 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.141610151 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.02746471 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.273429842 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.067564009 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.146966128 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.223219717 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.302820476 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.989410839 seconds)
  done (took 920.313125841 seconds)
done (took 1254.206030689 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.025280706 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.027032201 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.026860753 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.010218321 seconds)
  done (took 30.00353125 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.026121087 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.025865012 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.992834144 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.992875247 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.02475569 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.01309665 seconds)
  done (took 13.999352632 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.022829196 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.027771375 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.027715342 seconds)
  done (took 22.99223802 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.399356318 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.301759686 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.086447755 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.16825215 seconds)
  done (took 10.883964703 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.002982265 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.016381391 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.018973518 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.994266136 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.993373376 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.014419404 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.997813489 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.996282679 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.99815766 seconds)
  done (took 19.964865472 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.500220573 seconds)
done (took 106.273780876 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.531108289 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.294954406 seconds)
    (3/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.098839747 seconds)
    (4/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.207483108 seconds)
    (5/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.379765328 seconds)
    (6/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.053342706 seconds)
    (7/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.533397973 seconds)
    (8/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.134589888 seconds)
    (9/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.032073102 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.361997668 seconds)
    (11/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.143478658 seconds)
    (12/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.271069668 seconds)
    (13/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.032944072 seconds)
    (14/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.676198019 seconds)
    (15/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.045533654 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.172489015 seconds)
    (17/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.227413339 seconds)
    (18/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.14634495 seconds)
    (19/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.459518997 seconds)
    (20/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.132840862 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.048780813 seconds)
    (22/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.380442119 seconds)
    (23/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.188673902 seconds)
    (24/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.322228769 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.049891506 seconds)
    (26/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.88831786 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.068413571 seconds)
    (28/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.176632918 seconds)
    (29/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.564354989 seconds)
    (30/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.219058223 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.447309357 seconds)
    (32/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.331286774 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.04624496 seconds)
    (34/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.259127684 seconds)
    (35/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.26719621 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.143719958 seconds)
    (37/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.34096013 seconds)
    (38/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.095956388 seconds)
    (39/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.561850485 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.515485537 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.330253916 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.08457388 seconds)
    (43/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.500676746 seconds)
    (44/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.152752785 seconds)
    (45/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.037464945 seconds)
    (46/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 4.930037253 seconds)
    (47/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.034478568 seconds)
    (48/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.139424662 seconds)
    (49/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.196545193 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.503425901 seconds)
    (51/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.461794251 seconds)
    (52/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.147316445 seconds)
    (53/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.1399481 seconds)
    (54/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.555982817 seconds)
    (55/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.554475815 seconds)
    (56/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.046514902 seconds)
    (57/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.263052722 seconds)
    (58/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.017738753 seconds)
    (59/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.641920708 seconds)
    (60/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.218945224 seconds)
    (61/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.278881708 seconds)
    (62/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 9.0165622 seconds)
    (63/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.370228747 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.353533855 seconds)
    (65/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.400033833 seconds)
    (66/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.312501118 seconds)
    (67/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.299120878 seconds)
    (68/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.517089847 seconds)
    (69/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.01503734 seconds)
    (70/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.284848601 seconds)
    (71/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.01139352 seconds)
    (72/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 8.608858963 seconds)
    (73/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.417424308 seconds)
    (74/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.219996004 seconds)
    (75/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.156543181 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.752860744 seconds)
    (77/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.044379981 seconds)
    (78/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.039526289 seconds)
    (79/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.219439319 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.062431102 seconds)
    (81/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.01363714 seconds)
    (82/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 3.994715097 seconds)
    (83/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.551694193 seconds)
    (84/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.333639276 seconds)
    (85/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.052469376 seconds)
    (86/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.452398612 seconds)
    (87/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.153988678 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.409257763 seconds)
    (89/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.27740036 seconds)
    (90/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.040459394 seconds)
    (91/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.863581943 seconds)
    (92/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.054715075 seconds)
    (93/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.163448318 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.158172568 seconds)
    (95/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.817451772 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.188240664 seconds)
    (97/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.409760941 seconds)
    (98/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.153016772 seconds)
    (99/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.009808693 seconds)
    (100/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.161807462 seconds)
    (101/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.344554758 seconds)
    (102/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.385910836 seconds)
    (103/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.060682269 seconds)
    (104/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.637129364 seconds)
    (105/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.353241916 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.988495601 seconds)
    (107/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.05907613 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.492424057 seconds)
    (109/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.351183423 seconds)
    (110/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.184628437 seconds)
    (111/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.061885934 seconds)
    (112/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.138464929 seconds)
    (113/341) benchmarking ("sort", Float32, false)...
    done (took 6.71314809 seconds)
    (114/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.072064484 seconds)
    (115/341) benchmarking ("sort", Int8, false)...
    done (took 5.646659326 seconds)
    (116/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.0499654 seconds)
    (117/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.031008732 seconds)
    (118/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 4.777330171 seconds)
    (119/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.816895627 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.295270541 seconds)
    (121/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.356158341 seconds)
    (122/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.370885382 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.468620894 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.323672748 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.189617805 seconds)
    (126/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.258758094 seconds)
    (127/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.187383579 seconds)
    (128/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.038508793 seconds)
    (129/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.037739594 seconds)
    (130/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 5.656961796 seconds)
    (131/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.247896706 seconds)
    (132/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.050214751 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 3.81320313 seconds)
    (134/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.379244506 seconds)
    (135/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.025505507 seconds)
    (136/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.153849798 seconds)
    (137/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.239639559 seconds)
    (138/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.35023133 seconds)
    (139/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.130602629 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.643664673 seconds)
    (141/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.040791389 seconds)
    (142/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.245021025 seconds)
    (143/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.348783267 seconds)
    (144/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.052133015 seconds)
    (145/341) benchmarking ("sort", Bool, false)...
    done (took 2.258441646 seconds)
    (146/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.109223219 seconds)
    (147/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.084072094 seconds)
    (148/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.524210485 seconds)
    (149/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.021632962 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 3.183918452 seconds)
    (151/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.156706681 seconds)
    (152/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.234772681 seconds)
    (153/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.078838241 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.057065065 seconds)
    (155/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.306974891 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.904238413 seconds)
    (157/341) benchmarking ("sort", Int64, false)...
    done (took 7.038223784 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.372526937 seconds)
    (159/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.192457264 seconds)
    (160/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.184319066 seconds)
    (161/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.048846748 seconds)
    (162/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.164795763 seconds)
    (163/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.083917627 seconds)
    (164/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.170345179 seconds)
    (165/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.268509239 seconds)
    (166/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.183271318 seconds)
    (167/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.388895683 seconds)
    (168/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.659006054 seconds)
    (169/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.124794184 seconds)
    (170/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.056039948 seconds)
    (171/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.910613362 seconds)
    (172/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.185775642 seconds)
    (173/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.490760927 seconds)
    (174/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.527814629 seconds)
    (175/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.059387745 seconds)
    (176/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.05650406 seconds)
    (177/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.048480549 seconds)
    (178/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.217610818 seconds)
    (179/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.922637503 seconds)
    (180/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.166812371 seconds)
    (181/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.327075796 seconds)
    (182/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.942013531 seconds)
    (183/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.191440849 seconds)
    (184/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.037983362 seconds)
    (185/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 8.690640717 seconds)
    (186/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.169643916 seconds)
    (187/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.164162462 seconds)
    (188/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.040887565 seconds)
    (189/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.562268477 seconds)
    (190/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.313861568 seconds)
    (191/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.387785204 seconds)
    (192/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.566660881 seconds)
    (193/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.428317823 seconds)
    (194/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.195005375 seconds)
    (195/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.041608988 seconds)
    (196/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.040530886 seconds)
    (197/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.16653932 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.691938996 seconds)
    (199/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.155313763 seconds)
    (200/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.043925479 seconds)
    (201/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.053953042 seconds)
    (202/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.037252964 seconds)
    (203/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.235315375 seconds)
    (204/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.112305541 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.31771553 seconds)
    (206/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.049060964 seconds)
    (207/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.214374602 seconds)
    (208/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.039775388 seconds)
    (209/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 4.743685657 seconds)
    (210/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.442683963 seconds)
    (211/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.064579606 seconds)
    (212/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.552121608 seconds)
    (213/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.23938674 seconds)
    (214/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.290054854 seconds)
    (215/341) benchmarking ("sort", Float64, false)...
    done (took 6.750724029 seconds)
    (216/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.235983962 seconds)
    (217/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.479934419 seconds)
    (218/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.609067618 seconds)
    (219/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.124188293 seconds)
    (220/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.049416181 seconds)
    (221/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.040040395 seconds)
    (222/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.236623427 seconds)
    (223/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.122126896 seconds)
    (224/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.063575816 seconds)
    (225/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.059306743 seconds)
    (226/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.734534174 seconds)
    (227/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.942912545 seconds)
    (228/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.579376372 seconds)
    (229/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.943413767 seconds)
    (230/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.368096928 seconds)
    (231/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.258924382 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.823873054 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.366667987 seconds)
    (234/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.55397962 seconds)
    (235/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.382222983 seconds)
    (236/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.290595045 seconds)
    (237/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.19979365 seconds)
    (238/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.075159366 seconds)
    (239/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.427643462 seconds)
    (240/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.133920191 seconds)
    (241/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.04340697 seconds)
    (242/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 5.580091378 seconds)
    (243/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.077945749 seconds)
    (244/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.109705063 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.454037035 seconds)
    (246/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.242213763 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.027085437 seconds)
    (248/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.155513163 seconds)
    (249/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.280919194 seconds)
    (250/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.028522003 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.22317336 seconds)
    (252/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.288434153 seconds)
    (253/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.061491899 seconds)
    (254/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 8.729577455 seconds)
    (255/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.227114908 seconds)
    (256/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.049075291 seconds)
    (257/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.068021579 seconds)
    (258/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.172690719 seconds)
    (259/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.063942166 seconds)
    (260/341) benchmarking ("perf_sum", Float32, true)...
    done (took 4.75324019 seconds)
    (261/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.319195586 seconds)
    (262/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.323649805 seconds)
    (263/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.203833449 seconds)
    (264/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.067147308 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.194370796 seconds)
    (266/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.157607734 seconds)
    (267/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.60749267 seconds)
    (268/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.211658037 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.09577158 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.512550497 seconds)
    (271/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.067025396 seconds)
    (272/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.167350128 seconds)
    (273/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.030532557 seconds)
    (274/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.188320466 seconds)
    (275/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.050716791 seconds)
    (276/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.302953995 seconds)
    (277/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.207736603 seconds)
    (278/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.291644809 seconds)
    (279/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.075433286 seconds)
    (280/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.514686934 seconds)
    (281/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.022463651 seconds)
    (282/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 3.182474386 seconds)
    (283/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.064894093 seconds)
    (284/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.236846673 seconds)
    (285/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.04831314 seconds)
    (286/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.196108185 seconds)
    (287/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 9.251543903 seconds)
    (288/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 3.538609434 seconds)
    (289/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.16356027 seconds)
    (290/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.307817985 seconds)
    (291/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.067036998 seconds)
    (292/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.5021587 seconds)
    (293/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.899913951 seconds)
    (294/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.521908504 seconds)
    (295/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.028906737 seconds)
    (296/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.066423148 seconds)
    (297/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.3537329 seconds)
    (298/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.189664792 seconds)
    (299/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.340150433 seconds)
    (300/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.044027574 seconds)
    (301/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 5.748466793 seconds)
    (302/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.506500488 seconds)
    (303/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.054135404 seconds)
    (304/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 9.308273663 seconds)
    (305/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 4.029275134 seconds)
    (306/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.355999303 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.16880894 seconds)
    (308/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.433515946 seconds)
    (309/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.141436592 seconds)
    (310/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.075838337 seconds)
    (311/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.592631936 seconds)
    (312/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.067199945 seconds)
    (313/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.46848408 seconds)
    (314/341) benchmarking ("sort", BigInt, false)...
    done (took 7.061806559 seconds)
    (315/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.186823465 seconds)
    (316/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.119146534 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.062128824 seconds)
    (318/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.3220025 seconds)
    (319/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.573429121 seconds)
    (320/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.065728675 seconds)
    (321/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.342302988 seconds)
    (322/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.026583048 seconds)
    (323/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 3.904859336 seconds)
    (324/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.956723085 seconds)
    (325/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.273622087 seconds)
    (326/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.128604682 seconds)
    (327/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.458061061 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.084698904 seconds)
    (329/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.568422204 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.090043247 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.936998201 seconds)
    (332/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.867357794 seconds)
    (333/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.784675343 seconds)
    (334/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.381578122 seconds)
    (335/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.068819251 seconds)
    (336/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.289407961 seconds)
    (337/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.076295396 seconds)
    (338/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.229629623 seconds)
    (339/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.474153234 seconds)
    (340/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.376943826 seconds)
    (341/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.412717522 seconds)
  done (took 1190.788630894 seconds)
done (took 1192.852679364 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.044909964 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.014929981 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.589752909 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.03260689 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.019195708 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.01672169 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.567422963 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.055367189 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.03198415 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.565109527 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.032687619 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.014551466 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.025888006 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.035648395 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.022906951 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.028385428 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.020742664 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.046229544 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.042085124 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.021972221 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.095253705 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.021217937 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.028769596 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.06686608 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.018529672 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.029326948 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.045110427 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.102946588 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.093332627 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.01944828 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.026454902 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.412691196 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.078137513 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.025236089 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.027283841 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.023939003 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.024038426 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.02737504 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.037537639 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.027328467 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.017554164 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.028424091 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.022470392 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.018699189 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.016475274 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.016556725 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.017801919 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.11650814 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.029845991 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.42658448 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.094974213 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.037097199 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.093005541 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.017386851 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.020488438 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.020665935 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.094921096 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.024092492 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.020519166 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.425900632 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.129532987 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.031448363 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.4280815 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.093261097 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.031284991 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.030796987 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.025070433 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.043820005 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.416328904 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.617727496 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.058076076 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.041146041 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.020444115 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.020590478 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.028506165 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.566584851 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.036921966 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.69710371 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.050100717 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.044941069 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.025792507 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.021509946 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.018190095 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.025859338 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.042027516 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.018826822 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.022740549 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.027527806 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.030549764 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.41990367 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.073156979 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.588903812 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.037737252 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.043048876 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.043689171 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.694744992 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.051762836 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.043286539 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.059560745 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.416439772 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.069995652 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.043474592 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.022572872 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.029628082 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.114300925 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.046043205 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.045667674 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.020488034 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.045732478 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.027300832 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.020889746 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.030447242 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.080399901 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.038115915 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.028781069 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.021966442 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.058494841 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.025705485 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.053889494 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.038715916 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.031196351 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.029442778 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.024660436 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.072351725 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.041655997 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.027722028 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.114380403 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.028776122 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.115453119 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.031607099 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.030249324 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.020768645 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.431751819 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.074146581 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.04790851 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.034069344 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.05115634 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.046947204 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.031667795 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.027429409 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.029341948 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.023905345 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.069873714 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.028012424 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.04827074 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.069439662 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.032606395 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.033672056 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.050570542 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.047192177 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.042670859 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.024365769 seconds)
done (took 319.779165562 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.114983367 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.392091517 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.137517664 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.056840783 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.13497512 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.120925535 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.061716664 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.069255517 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.058850742 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.490341949 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.056819668 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.062062947 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.404096238 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.05844082 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.116888035 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.060378148 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.057722021 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.328450171 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.047937873 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.121184574 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.070631272 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.064887157 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.061709191 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.487163256 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.065100425 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.06291032 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.123820366 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.061479988 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.355418441 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.083963628 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.088652268 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.342321513 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.13108218 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.064818448 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.059830572 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.065950575 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.138357111 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.068206105 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.109152049 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.118288615 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.130669743 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.055625105 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.058992212 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.090805929 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.067070565 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.047504692 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.059166041 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.067704951 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.060371911 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.068456296 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.33077663 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.065257705 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.069138743 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.067498547 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.058733805 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.046489144 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.060069255 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.046013015 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.119570915 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.047813245 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.11366769 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.488381477 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.495368796 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.060725755 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.079697476 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.067540711 seconds)
  done (took 163.450266366 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.148770821 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.161322573 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.15713517 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.066353923 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.120960003 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.143607485 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.071789371 seconds)
  done (took 16.819775453 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.075706057 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.062148286 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.092365449 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.091358253 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.046399706 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.235936674 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.078441375 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.062173058 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.094094097 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.032919648 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.429429002 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.089733446 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.064463494 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.06945917 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.083808416 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.097825632 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.061709387 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.044214223 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.165715811 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.139646776 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.06910971 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.062828576 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.094431512 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.074244186 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.061140758 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.031812226 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.049335301 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.073023415 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.066736027 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.059905871 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.060113877 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.07977345 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.062179128 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.06290934 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.069237731 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.066755024 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.051752883 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.062468349 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.062604793 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.448361373 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.077263209 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.06658766 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.06142447 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.06408217 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.062159888 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.087978951 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.061782045 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.070912045 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.059836365 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.063124458 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.102630286 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.068349128 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.065034149 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.062853426 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.097381506 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.061240592 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.04860591 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.06422269 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.063851617 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.063960916 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.068096624 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.141892363 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.096270494 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.06815687 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.095620767 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.10439705 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.064546908 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.06917348 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.065181032 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.094251248 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.068578287 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.090802556 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.062754522 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.153682166 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.064723372 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.238772348 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.096286053 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.070558713 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.069257345 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.032540801 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.07597586 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.065520164 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.069874545 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.074042295 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.067053059 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.065619506 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.070159019 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.066388548 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.072816969 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.066221733 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.125110598 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.062422201 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.050046292 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.161274275 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.064800845 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.1779687 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.095993549 seconds)
  done (took 207.361273762 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.069760606 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.070379387 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.083295259 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.067587086 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.074543731 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.080036601 seconds)
  done (took 14.39407115 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.076119086 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.08192026 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.064804676 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.066945562 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.056402972 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.049481302 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.067369 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.073793654 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.057493449 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.068304806 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.054659668 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.040121689 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.053423795 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.048209068 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.065537209 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.071484906 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.068136253 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.062193364 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.063734353 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.051681611 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.261657111 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.055763225 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.050315574 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.035868358 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.063042813 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.067078355 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.077875552 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.06696185 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.067435932 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.07815977 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.058031618 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.050062364 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.036688438 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.074230031 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.07151005 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.03556776 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.07544383 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.037037161 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.068870671 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.053928025 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.035431079 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.057897858 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.069821534 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.044263771 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.084381829 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.051653612 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.051055131 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.086254041 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.074338037 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.042394371 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.045589415 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.071626868 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.053275967 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.034681818 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.053373664 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.074125538 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.044158159 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.067665996 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.052031486 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.037217291 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.071983481 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.05114125 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.072148034 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.072599656 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.07025103 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.044612632 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.041231161 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.055967343 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.049464497 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.064649266 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.040435303 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.073457717 seconds)
  done (took 150.427988299 seconds)
done (took 554.403322126 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.066211199 seconds)
  done (took 9.0162689 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.269951119 seconds)
  done (took 9.354013322 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.360439984 seconds)
  done (took 14.322592664 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.08696647 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.113375746 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.040000798 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.07712461 seconds)
  done (took 30.297514002 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.203966436 seconds)
  done (took 9.16298046 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.061339231 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.043946946 seconds)
  done (took 16.148390006 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.291521692 seconds)
  done (took 9.258703729 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.419100279 seconds)
  done (took 9.385949508 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.076385624 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.070952782 seconds)
  done (took 16.135124691 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.047228531 seconds)
  done (took 9.00830621 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.579757567 seconds)
  done (took 10.625384853 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.088528766 seconds)
  done (took 9.077914202 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.14323921 seconds)
  done (took 9.113223699 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.763631325 seconds)
  done (took 9.740742096 seconds)
done (took 172.606061278 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.087672795 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.074514464 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.070422181 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.067292104 seconds)
  done (took 30.252950579 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.106591967 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.105606624 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.110938735 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.119281794 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.100496046 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.093946292 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.105345205 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.107555787 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.100288407 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.110649417 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.108615525 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.125513686 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.121239146 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.108846435 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.110406829 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.118569506 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.126694856 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.111215868 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.095873698 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.11261677 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.125346657 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.130360888 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.067884352 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.071042566 seconds)
  done (took 52.556419992 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.27416823 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.148541467 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.231381127 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.126067268 seconds)
  done (took 10.731629125 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.071453032 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.145550689 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.125974954 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.111489156 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.130163028 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.243410186 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.129701916 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.277475491 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.2466535 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.252142182 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.075330931 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.091102844 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.08613454 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.130834304 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.239409646 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.071464607 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.06743973 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.247250621 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.142642367 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.268687057 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.072381554 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.126952242 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.128284624 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.128150677 seconds)
  done (took 53.566700856 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.072076236 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.087472928 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.080025582 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.071930784 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.069695869 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.069488595 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.083820562 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.072830871 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.101345415 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.077365941 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.07217445 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.070384687 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.070527989 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.073615168 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.075532588 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.092466575 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.085843719 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.086262931 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.076850355 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.083057849 seconds)
  done (took 43.527706542 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.072798958 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.325881467 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.360045476 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.238175938 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.07515052 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.075411048 seconds)
  done (took 33.106319131 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.093590372 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.096591152 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.081630675 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.1098323 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.143301054 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.086754658 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.157795623 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.286715664 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.087488007 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.153968972 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.103846593 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.085488338 seconds)
  done (took 27.457458305 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.076796941 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.07560004 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.072214058 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.093917807 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.082861943 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.086848768 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.08492031 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.074008916 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.092706878 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.095908872 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.082904515 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.094808399 seconds)
  done (took 46.973315058 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.2784134 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.248005372 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.405542905 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.742598508 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.595706644 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.143103763 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.471282449 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.561330046 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.842560542 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.885543818 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.562349164 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.106462792 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.577665584 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.025821257 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.07394727 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.3440154 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.074975802 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.996257421 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.50015592 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.151295398 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088692742 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.087481917 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.080922479 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.602381846 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.382027563 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.0833439 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.267577236 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.10808469 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.076251018 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.284329899 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.086582242 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.112190318 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.268228387 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.380017262 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.595627156 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.170091476 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.16251406 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.07031579 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.143607561 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.111701859 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.086672947 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.088692751 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.574981022 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.066781549 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.320070477 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.074539817 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.075238794 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.663327415 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.031717267 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.203184867 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.250041688 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.945534699 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.130335436 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.725745174 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.214787246 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.348767546 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.085467278 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.076661264 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159989819 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.136877838 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.247448874 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.158995217 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.279241715 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.029406594 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.562419249 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.261172093 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.075465868 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.079084331 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.336057187 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.35789893 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.15159113 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.205239064 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.819943138 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.075724338 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.074314067 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.506466391 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.194940963 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.072665012 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.802418579 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.59689574 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.02744298 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.176732242 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.666426721 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089043535 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.07171239 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.09026899 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.65968202 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.029698989 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.165766707 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.142592941 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.434073089 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.073828395 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.075806669 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.102700932 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.082601407 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.066934825 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.683454673 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.163763931 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.027458816 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.630832184 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.077619748 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.038751296 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.076028257 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.098777208 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.474703083 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.119271532 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.820692482 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.661083439 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.358741334 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.607873639 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.085806198 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.078815249 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.163236575 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.158580215 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.075428168 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.771409407 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.094781386 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.185368059 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.258286969 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.077464674 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.028443622 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.095915364 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.271969181 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.077986919 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.113852827 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.076080321 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.092685219 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.080365436 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.090028472 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.108931111 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11025015 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.582526832 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.164001701 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.083231181 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.017401633 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.089238315 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.552941815 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.165903742 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174314541 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.498906955 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.645074593 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.543669872 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.045261059 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.859454491 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.532836329 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.187846268 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.165077266 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.201902868 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.239901639 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.162684817 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.079419852 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.254311702 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.084575292 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.08592589 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.076330727 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.735227343 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.736514466 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.129621853 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.081806758 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.038194904 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.13542073 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.320476766 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.734037046 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.117556527 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.091874056 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.17015456 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.251026795 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.066576436 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.040437553 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.436244807 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.314789338 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.586792378 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.438036753 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.723071294 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.149140878 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.093314106 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.25963221 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.163473004 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.723111033 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.474354425 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.411842813 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.537157803 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.086939335 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.597623438 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.163287187 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.47979917 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.103905114 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.83099067 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.0933629 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.56965565 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.129466606 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.536732491 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.0361839 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090000912 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.550605137 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.084726283 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.636268356 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.14725428 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.264704826 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.083659807 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.084373246 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.091771577 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.077954575 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.199027062 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.157898037 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1581653 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.038652364 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.511795006 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.140076421 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.082604341 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.08100817 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.306118059 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.024207811 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.101112359 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.088933875 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.170516539 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.937412728 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.785859325 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.086254151 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.084030521 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.574775382 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.090942194 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.084573405 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.097815125 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.987138139 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.122937024 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.150744526 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.209720618 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.614093517 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.190360813 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.165046052 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.078617031 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.091797833 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.357090646 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.097423206 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.348065735 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.564887774 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.664948609 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.742122727 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.188176992 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.682644053 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.107617784 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.083112658 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.640400299 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.119753734 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.083866912 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.26908154 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.780268569 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.227668216 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.110632995 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.170640956 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.084582428 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.536125726 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.674345393 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.090458686 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.012200518 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.201815034 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.091147681 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.28220556 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.978586362 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.092703361 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.590604923 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095240959 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.291416318 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.278081605 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.47116338 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.582034085 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.77853842 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.037418846 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.093296889 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.153540019 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.361653731 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.083215041 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.122813008 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.75791683 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.753231703 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.863209077 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.614322611 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.341964638 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.709584993 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.543891462 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.185443772 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.100376354 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.009409658 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.287159638 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.047947914 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217464403 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.0354756 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.872956804 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.382769054 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.117050026 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.539055381 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.124321304 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.609132861 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.441491796 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.166032889 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.196847296 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.120533501 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.096402136 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.167757941 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.091724312 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.181139648 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.233676461 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.101208382 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.535714949 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148509231 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.169265199 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.09357046 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.753650756 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117332472 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.091071638 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.544826137 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.123648106 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21457339 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174780484 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.914124893 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.154503429 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.086638279 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.605241293 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.666150694 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.698762855 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.17550686 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.662940345 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148927763 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.828947973 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.094565771 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.28111081 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.096492762 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.718961439 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15226462 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.481493556 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.108662221 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.295394233 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.399100185 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.181817563 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.10048338 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.04393558 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.663569441 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.190771234 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.578133109 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.098971401 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.853715853 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.593953187 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.219356513 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.642822246 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.047721389 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.095960869 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.321086075 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.779798462 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.768194418 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147483204 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090109154 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.263265676 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.286502787 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.181215579 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.832424166 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.106933004 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.115667162 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.288560282 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215500042 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.038313951 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.617840621 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.840598257 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.356914895 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.113955192 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.28406335 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.24878772 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.278821008 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148094959 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.166689259 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.83506069 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.54256085 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.199088107 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.038857899 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090076514 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.770814321 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.823140004 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.176064141 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.369770586 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.492577518 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.148848399 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.149727802 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.093972376 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.607091431 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.833487637 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.796229244 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.424461941 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.601474853 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.671340938 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.825156225 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.83920737 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.279092572 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204800415 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.480666117 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.993099458 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.464802993 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.366394551 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.098605169 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.038109454 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.287516115 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.1029823 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.167644835 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.782525341 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.385420668 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.172232002 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.20380616 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.677045952 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.181000738 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.12850057 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.315391156 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.115227065 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.114898115 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.095571294 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.620725979 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.485440876 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.1162953 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.047533466 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.846965594 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.054926352 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.278469555 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.149842608 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.149378985 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.914461935 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.198639884 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.264039844 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.615628351 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.193497479 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.150847616 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.046144897 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.170989593 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.075222847 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.760368738 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.873493137 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121151813 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.102487131 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.28545297 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.08251929 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172855508 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.100190017 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.399738989 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.776506174 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.554935595 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.266336829 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.445549936 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.370986612 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.043087483 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.203872991 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.344023232 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.043853567 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.137754252 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.075222748 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.146140884 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.170987201 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.095032069 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.100688857 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.332919749 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.222524511 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.247398882 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.243095374 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.098690015 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.121635754 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.224761272 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.241268184 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.100414419 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.107660301 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.16831473 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.286881753 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.097670502 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.070192647 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.283826437 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175625727 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.453237655 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.174469072 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.986243627 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.111195307 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.05047241 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.253031378 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.599749832 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.097939978 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.923637144 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.174447129 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.130122067 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.553545614 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.712813859 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.332088707 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.355605181 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.171134924 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.130488516 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.161532119 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.135596066 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.101966233 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.697031378 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.475775289 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.09790175 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.547887047 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.168355534 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.10946642 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.887332171 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.588011071 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.103730574 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.175811406 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.289661938 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.594852973 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.352622402 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.088068781 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.244971937 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.103266438 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.055428 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.10315334 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.193184744 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.604109068 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.118944357 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.627278064 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.26031719 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.24754819 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.131233982 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.100349306 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.095698297 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.287376823 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.69097138 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122894465 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.367405577 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.288208695 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.10272761 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.629881817 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.756253273 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.236427446 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.160557002 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.15757066 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.467437834 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.785426495 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.126491759 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.646786151 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.279698119 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.103886507 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.329086071 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.351264622 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.099945598 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.304733691 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.192349952 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.350403696 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.37019776 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.654347837 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.210273833 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.167306908 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.573243265 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.128155926 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.631741856 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.557184733 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.188435396 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.095713879 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.116406248 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.099712867 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.906906678 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.697105066 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274496944 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.249649686 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.039794316 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.616044603 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.107248304 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.055971831 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.104744546 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.134200125 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.100727536 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.05012628 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.892259873 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.901154673 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.275509168 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.391765359 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.052883117 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.289161025 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.095336173 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.056681413 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.580556952 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.10065434 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.414927374 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.052564505 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.107401162 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.057020003 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.215401078 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.322712925 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.381691781 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.100240365 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.06116968 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.110929885 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.078285738 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.103472306 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.188507922 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.107173468 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347246522 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.558908082 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.343740264 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.269098771 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.897340685 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.18386342 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.073695972 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.176951175 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.913450143 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.651872561 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.21797928 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.30173923 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.887063262 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.0850554 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.626882363 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130618087 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.83266601 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.114943645 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.109994784 seconds)
  done (took 2423.200437524 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.134351114 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.175372391 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.158435108 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.191354144 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.16675772 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.181809097 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.154498963 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.133393245 seconds)
  done (took 59.286792547 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.11966956 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.093234454 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.517575986 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.112221969 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.11149343 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.11755292 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.432981319 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.15027705 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.103665608 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.116711969 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.103404541 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.114588118 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.102577209 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.082120195 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.128500067 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.369637367 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.138066075 seconds)
  done (took 81.955282036 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.120771095 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.045476527 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.171024952 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.379885479 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.204698915 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.43902804 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.092500531 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.170460958 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.185712886 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.731257738 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.166849981 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.10294865 seconds)
  done (took 90.832694422 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.105656571 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.103276667 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.106558798 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.109442274 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.105144496 seconds)
  done (took 12.525062169 seconds)
done (took 2968.067793715 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.31630937 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.234900832 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.181332705 seconds)
  done (took 6.411040125 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.16687879 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.240672473 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.299533981 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.246289049 seconds)
  done (took 10.956908894 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.383923251 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.593344496 seconds)
  done (took 6.969563556 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.607750757 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.081170608 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.605438811 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.113955664 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.109897773 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.111992447 seconds)
  done (took 23.345586164 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.103790848 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.10789821 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.110549785 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.107847016 seconds)
  done (took 10.429528037 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.086788135 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.08047002 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.086210834 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.100091387 seconds)
  done (took 22.345325496 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.478092438 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.36290682 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.862569941 seconds)
  done (took 9.700128596 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.907697119 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.486696917 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.906333683 seconds)
  done (took 10.301055107 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.346242097 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.026012425 seconds)
  done (took 8.367642616 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.264997342 seconds)
  done (took 4.261004782 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.587933029 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.591774481 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.954702964 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.971554695 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.106851341 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.41850085 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.483395127 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.496465238 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.790735685 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.617580419 seconds)
  done (took 29.015724276 seconds)
done (took 158.708158972 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.033251614 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.49791911 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.293257137 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.140798747 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.204708985 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.300014299 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.17294399 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.924123548 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.671475368 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.67470674 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.785831384 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.203730314 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.182471189 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.489891027 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.174525032 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.463122113 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.520489067 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.016423782 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.327280104 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.12980377 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.186590116 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.661175356 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.475208735 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.656707957 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.524696218 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.24578692 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.227648138 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.491163919 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.586382959 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.236850054 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.242224927 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.393132844 seconds)
  done (took 185.125007732 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.107871645 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.113649296 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.118413539 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.112635614 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.232379475 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.113642239 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.121094123 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.116713463 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.905249683 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.90926842 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.116440162 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.236002745 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.113676994 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.121333249 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.124003433 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.114530072 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.052229772 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.122527508 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.122598728 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.13028752 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.119383187 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.958415331 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.109777915 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.956761599 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.042140393 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.115024298 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.125497375 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.122052599 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.12740571 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.112016618 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.112471897 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.114358466 seconds)
  done (took 221.12749216 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.111718934 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.117008026 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.117032041 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.113629568 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.113396921 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.117483486 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.122190335 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.121143409 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.114819134 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.112379518 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.1174148 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.120663253 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.114563196 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.113720352 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.118372473 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.119924331 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.11610256 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.124043069 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.115187337 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.115336032 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.117573606 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.119061454 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.11463455 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.113298929 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.120045233 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.131944686 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.141330263 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.115228178 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.118778236 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.124545303 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.113333338 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.119128571 seconds)
  done (took 229.794132556 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.412499153 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.11441173 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.115332538 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.495915248 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.119244519 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.111194492 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.47501126 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.411698801 seconds)
  done (took 22.263435581 seconds)
done (took 660.324472692 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.763924176 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.983363375 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.262256912 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.119340425 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.732044232 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.221349284 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.123335791 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.209181003 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.86630568 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.22783606 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.576170739 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.150381813 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.939823404 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.146286804 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.266965446 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.192034498 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.576523878 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.883793037 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.320804143 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.965732115 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.352925255 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.08827043 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.238299341 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.966820772 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.616655195 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.153126186 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.228207301 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.554921211 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.115844671 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.389878919 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.161971039 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.518093007 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.167001052 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.149941705 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.185338746 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.166691711 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.449845985 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.171518079 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.281333223 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.864055344 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.933956347 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.739683473 seconds)
  done (took 113.026738111 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.106308558 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.097964206 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.098304357 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.097502628 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.1018167 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.106956399 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.097227275 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.101656936 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.097386092 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.098045523 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.10338352 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.101581896 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.099448492 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.102307163 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.097866088 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.10189702 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.100842701 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.099052531 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.100296358 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.097444946 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.103386657 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.105558319 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.09984112 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.105704013 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.096865246 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.102082274 seconds)
  done (took 56.644483635 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.116587331 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.295808739 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.481597854 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.165128666 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.120678333 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.123399528 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.158327084 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.136349154 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.120948858 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.117480108 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.220336386 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.123608088 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.146826887 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.472279803 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.160699919 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.119956051 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.117949223 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.126476507 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.303929555 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.14359529 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.161578468 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.133190226 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.159203611 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.145772061 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.128567075 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.125022843 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.122268879 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.629256097 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.1528695 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.228403757 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.2252371 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.176668877 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.537266726 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.48805094 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.202443006 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.130814008 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.123021876 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.271983379 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.139824039 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.123001389 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.157660793 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.135267525 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.478288287 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.768288111 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.151958186 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.11941461 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.625961563 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.290980894 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.181828123 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.142287349 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.4855523 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.165653449 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.120466705 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.125054978 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.160885606 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.133212287 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.123275106 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.422898556 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.144110287 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.16551094 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.135919394 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.121734371 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.318040593 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.138103135 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.303896112 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.138618682 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.162909106 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.128952046 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.474413944 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.163238155 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.737263902 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.152784443 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.12017995 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.225557885 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.312287098 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.660290461 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.153416465 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.315883668 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.56299471 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.181932623 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.137837457 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.604110325 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.184498597 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.144140788 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.123140789 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.120992103 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.126916559 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.165186534 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.163353123 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.660013385 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.754042376 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.455562029 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.190821605 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.168733034 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.130074213 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.426289467 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.147496447 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.165072418 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.480103476 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.793641604 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.152782893 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.137350508 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.724824556 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.153806283 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.169031389 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.141402292 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.483116427 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.165662987 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.167229027 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.123848367 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.130644508 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.130900856 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.170099724 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.142209165 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.121118422 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.721835529 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.301926253 seconds)
  done (took 265.070272577 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.134938777 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.13104022 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.130479174 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.127259461 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.127120165 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.129262516 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.125904318 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.122628224 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.137827512 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.125394561 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.12741603 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.128054148 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.133778077 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.133246751 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.153573527 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.125368169 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.92307098 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.128442885 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.131341373 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.127409563 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.835841259 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.135414655 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.123991253 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.128846734 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.133648919 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.127592301 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.137113287 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.155887318 seconds)
  done (took 175.19913797 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.125470458 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.194570334 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.130553616 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.197297654 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.142073165 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.125211241 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.158766446 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.147216529 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.14304547 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.12651265 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.130110599 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.160274696 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.139744963 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.233426096 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.16988694 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.169624981 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.256211889 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.145524964 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.123923877 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.130882274 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.196719406 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.123366077 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.168759839 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.210134095 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.156918369 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.199110693 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.121286663 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.127490393 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.128847266 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.249865655 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.152230393 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.169444777 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.179392507 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.16335863 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.265197815 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.252218349 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.248169875 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.168352432 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.142151743 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.130068784 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.130606212 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.108943027 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.200748768 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.143528967 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.125746839 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.249608188 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.154559713 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.124464445 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.155645626 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.130991588 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.142269748 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.157851293 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.180878644 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.267573271 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.19611918 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.164033807 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.158186635 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.133588506 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.111454641 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.230792075 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.119513557 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.257188661 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.153491998 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.114040266 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.133557116 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.131925501 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.198115063 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.178630337 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.241907504 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.143166101 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.230349461 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.208202126 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.149056496 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.127007404 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.133450155 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.199378924 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.251418839 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.210576339 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.213744923 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.182313789 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.12604404 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.127440335 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.112466835 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.166559862 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.148150802 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.251574285 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.260042109 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.137253211 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.13041393 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.12944153 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.131062661 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.163689805 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.213501347 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.187919367 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.229936734 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.181371398 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.182463145 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.144273928 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.148428652 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.138710978 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.168554305 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.144842301 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.148011851 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.58136369 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.184176139 seconds)
  done (took 230.109872392 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.536320958 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.169169919 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.221327275 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.413865958 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.545535455 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.376010534 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.197031233 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.171590874 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.195447454 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.309588884 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.221821243 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.22450142 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.18735947 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.16674362 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.156769751 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.194601639 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.199743861 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.549474235 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.318192181 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.102567592 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.202141138 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.504519345 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.515034206 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.563687579 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.240281421 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.671878125 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.843017169 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.284003272 seconds)
  done (took 70.313754034 seconds)
done (took 912.372039262 seconds)
SAVING RESULT...
DONE!
